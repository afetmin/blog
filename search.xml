<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Higher-order component</title>
    <url>/blog/Higher-order-component/</url>
    <content><![CDATA[<h2 id="高阶组件可以做什么？"><a href="#高阶组件可以做什么？" class="headerlink" title="高阶组件可以做什么？"></a>高阶组件可以做什么？</h2><h3 id="增强回调和生命周期"><a href="#增强回调和生命周期" class="headerlink" title="增强回调和生命周期"></a>增强回调和生命周期</h3><ol>
<li>增强回调</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Base</span> = &#123; <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withLoggingOnClickWithProps = &lt;<span class="title class_">TProps</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&gt;<span class="function">(<span class="params">Component: ComponentType&lt;TProps&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// our returned component will now have additional logText prop</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props: TProps &amp; &#123; logText: string &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// accessing it here, as any other props</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Log on click: &#x27;</span>, props.<span class="property">logText</span>);</span><br><span class="line">      props.<span class="title function_">onClick</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ButtonWithLoggingOnClickWithProps</span> <span class="attr">onClick</span>=<span class="string">&#123;onClickCallback&#125;</span> <span class="attr">logText</span>=<span class="string">&quot;this is Page button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ButtonWithLoggingOnClickWithProps</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在挂载时发送数据而不是点击时</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withLoggingOnMount = &lt;<span class="title class_">TProps</span> <span class="keyword">extends</span> unknown&gt;<span class="function">(<span class="params">Component: ComponentType&lt;TProps&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props: TProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// no more overriding onClick, just adding normal useEffect</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;log on mount&#x27;</span>);</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// just passing props intact</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="拦截-DOM-事件"><a href="#拦截-DOM-事件" class="headerlink" title="拦截 DOM 事件"></a>拦截 DOM 事件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">keyPressListener</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// do stuff</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, keyPressListener);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, keyPressListener);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Modal</span> = (<span class="params">&#123; onClose &#125;: ModalProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onKeyPress</span> = (<span class="params">event</span>) =&gt; event.<span class="title function_">stopPropagation</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onKeyPress</span>=<span class="string">&#123;onKeyPress&#125;</span>&gt;</span>...// dialog code<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// same as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withSupressKeyPress = &lt;<span class="title class_">TProps</span> <span class="keyword">extends</span> unknown&gt;<span class="function">(<span class="params">Component: ComponentType&lt;TProps&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props: TProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onKeyPress</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">      event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onKeyPress</span>=<span class="string">&#123;onKeyPress&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="通用-React-上下文选择器"><a href="#通用-React-上下文选择器" class="headerlink" title="通用 React 上下文选择器"></a>通用 React 上下文选择器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mini-redux</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withContextSelector = &lt;<span class="title class_">TProps</span> <span class="keyword">extends</span> unknown, <span class="title class_">TValue</span> <span class="keyword">extends</span> unknown&gt;（</span><br><span class="line">  <span class="title class_">Component</span>: <span class="title class_">ComponentType</span>&lt;<span class="title class_">TProps</span> &amp; <span class="title class_">Record</span>&lt;string, <span class="title class_">TValue</span>&gt;&gt;,</span><br><span class="line">  <span class="attr">selectors</span>: <span class="title class_">Record</span>&lt;string, <span class="function">(<span class="params">data: Context</span>) =&gt;</span> <span class="title class_">TValue</span>&gt;,</span><br><span class="line">）: <span class="title class_">Component</span>&lt;<span class="title class_">Record</span>&lt;string, <span class="title class_">TValue</span>&gt;&gt; =&gt; &#123;</span><br><span class="line">  <span class="comment">// memoising component generally for every prop</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">MemoisedComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Component</span>) <span class="keyword">as</span> <span class="title class_">ComponentType</span>&lt;<span class="title class_">Record</span>&lt;string, <span class="title class_">TValue</span>&gt;&gt;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props: TProps &amp; Record&lt;string, TValue&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// extracting everything from context</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">useFormContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapping keys that are coming from &quot;selectors&quot; argument</span></span><br><span class="line">    <span class="comment">// to data from context</span></span><br><span class="line">    <span class="keyword">const</span> contextProps = <span class="title class_">Object</span>.<span class="title function_">keys</span>(selectors).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, key</span>) =&gt;</span> &#123;</span><br><span class="line">      acc[key] = selectors[key](data);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// spreading all props to the memoised component</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MemoisedComponent</span> &#123;<span class="attr">...props</span>&#125; &#123;<span class="attr">...contextProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// props are injected by the higher order component below</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CountriesWithFormId</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  formId,</span></span><br><span class="line"><span class="params">  countryName,</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  formId: string,</span></span><br><span class="line"><span class="params">  countryName: string,</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Countries with selector re-render&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>List of countries for form: &#123;formId&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Selected country: &#123;countryName&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Australia<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapping props to selector functions</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CountriesWithFormIdSelector</span> = <span class="title function_">withContextSelector</span>(<span class="title class_">CountriesWithFormId</span>, &#123;</span><br><span class="line">  <span class="attr">formId</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> data.<span class="property">id</span>,</span><br><span class="line">  <span class="attr">countryName</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> data.<span class="property">country</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>使用附加功能增强回调和 React 生命周期事件，例如发送日志记录或分析事件</li>
<li>拦截 DOM 事件，例如在打开模式对话框时阻止全局键盘快捷键</li>
<li>提取一段上下文而不导致组件中不必要的重新渲染</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Hook 和 setInterval一起使用的问题</title>
    <url>/blog/React-Hook-%E5%92%8C-setInterval%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>如果仅仅是用一个变量来保存tiner的ID，会导致无法清除timerID<br />如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">TimerCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleStart</span> =(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(count++)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleEnd</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleStart&#125;</span>&gt;</span>start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleEnd&#125;</span>&gt;</span>end<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>timer的id是一个number类型，每次在页面展示count时，都会 触发重新渲染，timer会被重新赋值，这是一个基本类型的值，需要清除的timer值已经不是原来的值了，虽然打印出来的是一样的值。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>用useRef，在整个渲染周期固定一个值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">TimerCount</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> timer = useRef&lt;any&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleStart</span> =(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    timer.<span class="property">current</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(count++)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleEnd</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer.<span class="property">current</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleStart&#125;</span>&gt;</span>start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleEnd&#125;</span>&gt;</span>end<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时timer是一个引用类型，里面的current属性保存了timer的id，并且整个渲染周期不变。使用ref访问DOM节点也是一样的原理</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Hooks</title>
    <url>/blog/React-Hooks/</url>
    <content><![CDATA[<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>返回一个 state，和一个更新 state 的函数</p>
<h3 id="函数式更新"><a href="#函数式更新" class="headerlink" title="函数式更新"></a>函数式更新</h3><p>如果新的 state 需要通过先前的 state 计算得出，可以传递一个函数给 setState，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setState</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="惰性初始-state"><a href="#惰性初始-state" class="headerlink" title="惰性初始 state"></a>惰性初始 state</h3><p>如果初始 state 需要通过复杂计算获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在<strong>初始渲染</strong>时被调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> initialState = <span class="title function_">someExpensiveComputation</span>(props);</span><br><span class="line">  <span class="keyword">return</span> initialState;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>第一个常见的使用场景是当创建初始 state 很昂贵时：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Table</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// ⚠️ createRows() 每次渲染都会被调用</span></span><br><span class="line">  <span class="keyword">const</span> [rows, setRows] = <span class="title function_">useState</span>(<span class="title function_">createRows</span>(props.<span class="property">count</span>));</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Table</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// ✅ createRows() 只会被调用一次</span></span><br><span class="line">  <span class="keyword">const</span> [rows, setRows] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> <span class="title function_">createRows</span>(props.<span class="property">count</span>));</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>使用 <code>useEffect</code> 完成副作用操作。赋值给 <code>useEffect</code> 的函数会在<strong>组件渲染到屏幕之后</strong>执行。<br />如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（<code>[]</code>）作为第二个参数。这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行。</p>
<h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p><a href=""><code>useState</code></a> 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 <code>dispatch</code> 方法。在某些场景下，<code>useReducer</code> 会比 <code>useState</code> 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。</p>
<h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>(a, b);</span><br><span class="line">&#125;, [a, b]);</span><br></pre></td></tr></table></figure>

<p>返回一个 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVtb2l6YXRpb24=">memoized<i class="fa fa-external-link-alt"></i></span> 回调函数。该回调函数仅在某个依赖项改变时才会更新。</p>
<h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">computeExpensiveValue</span>(a, b), [a, b]);</span><br></pre></td></tr></table></figure>

<p>返回一个 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVtb2l6YXRpb24=">memoized<i class="fa fa-external-link-alt"></i></span> 值。把“创建”函数和依赖项数组作为参数传入 <code>useMemo</code>，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Props Children 混合插槽</title>
    <url>/blog/React-Props-Children-%E6%B7%B7%E5%90%88%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<h2 id="当多种-children-一起输入时"><a href="#当多种-children-一起输入时" class="headerlink" title="当多种 children 一起输入时"></a>当多种 children 一起输入时</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Container</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;alen&quot;</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> props.<span class="property">children</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过判断 clone 混入props</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">React</span>.<span class="title function_">isValidElement</span>(item)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">cloneElement</span>(item, &#123; ...defaultProps &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">item</span>(defaultProps)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name + props.msg&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // 多种方式混入</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(props) =&gt; <span class="tag">&lt;<span class="name">Child</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React element，children，parents and re-renders</title>
    <url>/blog/React-element%EF%BC%8Cchildren%EF%BC%8Cparents-and-re-renders/</url>
    <content><![CDATA[<h3 id="children-as-a-render-function"><a href="#children-as-a-render-function" class="headerlink" title="children as a render function"></a>children as a render function</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MovingComponent</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">...</span>// <span class="attr">callbacks</span> <span class="attr">same</span> <span class="attr">as</span> <span class="attr">before</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">      // children as render function with some data</span></span><br><span class="line"><span class="language-xml">      // data doesn&#x27;t depend on the changed state!</span></span><br><span class="line"><span class="language-xml">      &#123;children(&#123; data: &#x27;something&#x27; &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // ChildComponent re-renders when state in MovingComponent changes!</span></span><br><span class="line"><span class="language-xml">      // even if it doesn&#x27;t use the data that is passed from it</span></span><br><span class="line"><span class="language-xml">      &#123;() =&gt; <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React-memo-behavior"><a href="#React-memo-behavior" class="headerlink" title="React.memo behavior"></a>React.memo behavior</h3><h4 id="memo-parent"><a href="#memo-parent" class="headerlink" title="memo parent"></a>memo parent</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapping MovingComponent in memo to prevent it from re-rendering</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MovingComponentMemo</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">MovingComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponentMemo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- ChildComponent will still re-render when SomeOutsideComponent re-renders --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponentMemo</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="memo-child"><a href="#memo-child" class="headerlink" title="memo child"></a>memo child</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapping ChildComponent in memo to prevent it from re-rendering</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildComponentMemo</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">ChildComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- ChildComponent won&#x27;t re-render, even if the parent is not memoized --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponentMemo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useCallback-hook-behavior"><a href="#useCallback-hook-behavior" class="headerlink" title="useCallback hook behavior"></a>useCallback hook behavior</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trying to prevent ChildComponent from re-rendering by memoising render function. Won&#x27;t work!</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span>, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- Memoized render function. Didn&#x27;t help with re-renders though --&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;child&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><h3 id="什么是react-的child？"><a href="#什么是react-的child？" class="headerlink" title="什么是react 的child？"></a>什么是react 的child？</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;children&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>仅仅是一个 prop<br />我们可以将组件作为 elements， functions 或者 Components</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// as prop</span></span><br><span class="line">&lt;<span class="title class_">Parent</span> children=&#123;<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;normal&quot; syntax</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;() =&gt; <span class="tag">&lt;<span class="name">Child</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// implementation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;children()&#125;<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// even this</span></span><br><span class="line">&lt;<span class="title class_">Parent</span> children=&#123;<span class="title class_">Child</span>&#125; /&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params">&#123; children: Child &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;<span class="tag">&lt;<span class="name">Child</span> /&gt;</span>&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="什么是-React-element？"><a href="#什么是-React-element？" class="headerlink" title="什么是 React element？"></a>什么是 React element？</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这里 <Child /> 仅仅是一个 React.createElement 语法糖，它返回一个对象，这个对象是你想要在屏幕上看到的元素的描述</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// will just sit there idly</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// same as</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// exactly the same as &lt;Child /&gt;</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">Child</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// render of Child will be triggered when Parent re-renders</span></span><br><span class="line">  <span class="comment">// since it&#x27;s included in the return</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h3><p>元素是不可变的对象。更新元素并触发其相应组件重新渲染的唯一方法是重新创建对象本身。这正是重新渲染期间发生的事情</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// child definition object will be re-created.</span></span><br><span class="line">  <span class="comment">// so Child component will be re-rendered when Parent re-renders</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>而且仅仅会重新创建和更新存在的组件，我们可以使用 React.memo 或者 useMemo 记忆它：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildMemo</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Child</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> child = <span class="language-xml"><span class="tag">&lt;<span class="name">ChildMemo</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> child = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>定义对象不会被重新创建，React 会认为它不需要更新，Child 的重新渲染也不会发生。</p>
<h3 id="我们能够知道"><a href="#我们能够知道" class="headerlink" title="我们能够知道"></a>我们能够知道</h3><ol>
<li>当我们编写const child &#x3D; <Child />时，我们只是在创建一个Element，即组件定义，而不是渲染它。这个定义是一个<strong>不可变的对象</strong>。</li>
<li>此定义中的组件仅在它最终出现在实际渲染树中时才会被渲染。对于功能组件，它是您实际从组件中返回它的时候。</li>
<li>重新创建定义对象会触发对应组件的重新渲染。</li>
</ol>
<h4 id="为什么作为prop传递的组件不会重新渲染？"><a href="#为什么作为prop传递的组件不会重新渲染？" class="headerlink" title="为什么作为prop传递的组件不会重新渲染？"></a>为什么作为prop传递的组件不会重新渲染？</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MovingComponent</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// this will trigger re-render</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      // <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">left:</span> <span class="attr">state.x</span>, <span class="attr">top:</span> <span class="attr">state.y</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- those won&#x27;t re-render because of the state change --&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是因为 <ChildComponent /> 是在 SomeOutsideComponent 中创建的， MovingComponent 重新渲染时它的props并没有改变，child 不会重新创建，也不会重新渲染。</p>
<h4 id="为什么children-作为一个render-function-时会重新渲染呢？"><a href="#为什么children-作为一个render-function-时会重新渲染呢？" class="headerlink" title="为什么children 作为一个render function 时会重新渲染呢？"></a>为什么children 作为一个render function 时会重新渲染呢？</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MovingComponent</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// this will trigger re-render</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> ///<span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- those will re-render because of the state change --&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children()&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;() =&gt; <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种情况下， children 是一个函数， Element 是这个函数调用的结果，每次调用MovingComponent 时，都会重新创建函数返回定义对象 <ChildComponent />，从而触发重新渲染。</p>
<h4 id="为什么使用-React-memo-包裹父组件会重新渲染？而包裹子组件-（子组件）不会重新渲染呢？"><a href="#为什么使用-React-memo-包裹父组件会重新渲染？而包裹子组件-（子组件）不会重新渲染呢？" class="headerlink" title="为什么使用 React.memo 包裹父组件会重新渲染？而包裹子组件 （子组件）不会重新渲染呢？"></a>为什么使用 React.memo 包裹父组件会重新渲染？而包裹子组件 （子组件）不会重新渲染呢？</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapping MovingComponent in memo to prevent it from re-rendering</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MovingComponentMemo</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">MovingComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponentMemo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- ChildComponent will re-render when SomeOutsideComponent re-renders --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponentMemo</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// same as</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponentMemo</span> <span class="attr">children</span>=<span class="string">&#123;</span>&lt;<span class="attr">ChildComponent</span> /&gt;</span>&#125; /&gt;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>触发重新渲染时，被记忆的父组件会做 prop 检查，查看是否有prop 被改变了，因为 <ChildComponent /> 被重新创建了，所以prop改变了，子组件就重新渲染了。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapping ChildComponent in memo to prevent it from re-rendering</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildComponentMemo</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">ChildComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- ChildComponent won&#x27;t be re-rendered anymore --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponentMemo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子组件被记忆了， MovingComponent 触发重新渲染时，子组件没有改变，被跳过，不会重新渲染。</p>
<h4 id="为什么将-children-作为函数传递时，记忆这个函数不起作用呢？"><a href="#为什么将-children-作为函数传递时，记忆这个函数不起作用呢？" class="headerlink" title="为什么将 children 作为函数传递时，记忆这个函数不起作用呢？"></a>为什么将 children 作为函数传递时，记忆这个函数不起作用呢？</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this memoization doesn&#x27;t prevent re-renders of ChildComponent</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span>, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">MovingComponent</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// same as</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeOutsideComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// trigger re-renders here with state</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this memoization doesn&#x27;t prevent re-renders of ChildComponent</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span>, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MovingComponent</span> <span class="attr">children</span>=<span class="string">&#123;child&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里记忆的仅仅是这个函数，它的返回值并没有被记忆，所以每次都会重新创建一个新的对象，导致子组件重新渲染。<br />有两种方式可以解决：</p>
<ol>
<li>React.memo 包裹 MovingComponent</li>
<li>删掉 useCallback， 使用 React.memo 包裹 ChildComponent</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>React memo lazy</title>
    <url>/blog/React-memo-lazy/</url>
    <content><![CDATA[<h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><p>react.memo 有第二个参数，可以通过第二个参数来自定义组件的渲染时机。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Component</span>, compare)</span><br></pre></td></tr></table></figure>

<p>React.memo 接受两个参数，第一个参数 Component 原始组件本身，第二个参数 compare 是一个函数，可以根据一次更新中 props 是否相同决定原始组件是否重新渲染。</p>
<p>memo 的几个特点是：</p>
<ul>
<li><p>React.memo: 第二个参数 返回 true 组件不渲染 ， 返回 false 组件重新渲染。<br>和 shouldComponentUpdate 相反，shouldComponentUpdate : 返回 true 组件渲染 ， 返回 false 组件不渲染。</p>
</li>
<li><p>memo 当二个参数 compare 不存在时，会用浅比较原则处理 props ，相当于仅比较 props 版本的 pureComponent 。</p>
</li>
<li><p>memo 同样适合类组件和函数组件。<br>关于第二个参数你可以这样写：</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compare</span> = (<span class="params">prev, next</span>) =&gt;</span><br><span class="line">  prev.<span class="property">number</span> === next.<span class="property">number</span> ||</span><br><span class="line">  (prev.<span class="property">number</span> !== next.<span class="property">number</span> &amp;&amp; next.<span class="property">number</span> &gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>这里有两个意思：</p>
<ul>
<li>number 改变时 组件渲染</li>
<li>number 小于 1 时 组件渲染</li>
</ul>
<h2 id="关于-rander"><a href="#关于-rander" class="headerlink" title="关于 rander"></a>关于 rander</h2><h3 id="有没有必要在乎组件不必要渲染。"><a href="#有没有必要在乎组件不必要渲染。" class="headerlink" title="有没有必要在乎组件不必要渲染。"></a>有没有必要在乎组件不必要渲染。</h3><p>在正常情况下，无须过分在乎 React 没有必要的渲染，执行 render 不等于真正的浏览器渲染视图，render 阶段执行是在 js 当中，js 中运行代码远快于浏览器的 Rendering 和 Painting 的，更何况 React 还提供了 diff 算法等手段，去复用真实 DOM 。</p>
<h3 id="什么时候需要注意渲染节流。"><a href="#什么时候需要注意渲染节流。" class="headerlink" title="什么时候需要注意渲染节流。"></a>什么时候需要注意渲染节流。</h3><p>但是对于以下情况，值得开发者注意，需要采用渲染节流：</p>
<ul>
<li>第一种情况数据可视化的模块组件（展示了大量的数据），这种情况比较小心因为一次更新，可能伴随大量的 diff ，数据量越大也就越浪费性能，所以对于数据展示模块组件，有必要采取 memo ， shouldComponentUpdate 等方案控制自身组件渲染。</li>
<li>第二种情况含有大量表单的页面，React 一般会采用受控组件的模式去管理表单数据层，表单数据层完全托管于 props 或是 state ，而用户操作表单往往是频繁的，需要频繁改变数据层，所以很有可能让整个页面组件高频率 render 。</li>
<li>第三种情况就是越是靠近 app root 根组件越值得注意，根组件渲染会波及到整个组件树重新 render ，子组件 render ，一是浪费性能，二是可能执行 useEffect ，componentWillReceiveProps 等钩子，造成意想不到的情况发生。</li>
</ul>
<h2 id="使用-Suspense-和-React-lazy-模拟实现异步加载组件"><a href="#使用-Suspense-和-React-lazy-模拟实现异步加载组件" class="headerlink" title="使用 Suspense 和 React.lazy 模拟实现异步加载组件"></a>使用 Suspense 和 React.lazy 模拟实现异步加载组件</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><ul>
<li>异步请求数据，请求完数据挂载组件，请求过程中展示 loading 效果。</li>
<li>全程组件只渲染一次</li>
</ul>
<h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">AsyncComp</span>(<span class="params">Comp, asyncFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">AsyncCompPromise</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="title function_">async</span> (resolve) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">asyncFn</span>()</span><br><span class="line">      <span class="title function_">resolve</span>(&#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Comp</span> <span class="attr">value</span>=<span class="string">&#123;data&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="title class_">AsyncCompPromise</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;ranxiu&quot;</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;a lot of data&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">&#123; value, gender &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, msg &#125; = value</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>my name is &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>this is &#123;msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>my gender is &#123;gender&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">LzayTest</span> = <span class="title class_">AsyncComp</span>(<span class="title class_">Test</span>, fetchData)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LzayTest</span> <span class="attr">gender</span>=<span class="string">&#x27;男&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React.lazy 要求函数需要返回一个 Promise。大致流程是，react.lazy 第一次渲染时会向外抛个异常 Promise，这个异常会被 Suspense 捕获到，Suspense 处理 Promise，Promise 执行成功后 Susponse 发起渲染，返回真正需要渲染的组件。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React typescript cheatsheet</title>
    <url>/blog/React-typescript-cheatsheet/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC10eXBlc2NyaXB0LWNoZWF0c2hlZXQubmV0bGlmeS5hcHAvZG9jcy9iYXNpYy9nZXR0aW5nLXN0YXJ0ZWQvYmFzaWNfdHlwZV9leGFtcGxl">React Typescript Cheetsheet<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="JSX-Element-vs-React-ReactNode"><a href="#JSX-Element-vs-React-ReactNode" class="headerlink" title="JSX.Element vs React.ReactNode"></a>JSX.Element vs React.ReactNode</h3><ul>
<li>jsx.element -&gt; React.createElement 的返回值</li>
<li>React.ReactNode -&gt; ​ 组件返回值的集合 ​</li>
</ul>
<h3 id="interface-or-type"><a href="#interface-or-type" class="headerlink" title="interface or type?"></a>interface or type?</h3><p>使用 Interface 直到你需要 Type</p>
<ul>
<li>在编写库或第 3 方环境类型定义时，始终 interface 用于公共 API 的定义，因为这允许消费者在缺少某些定义时通过声明合并来扩展它们。</li>
<li>在你的 React 组件 Props 和 State 使用 Type，以保持一致性并且因为它受到更多限制。</li>
</ul>
<h3 id="custom-hooks"><a href="#custom-hooks" class="headerlink" title="custom hooks"></a>custom hooks</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setState] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">load</span> = (<span class="params">aPromise: <span class="built_in">Promise</span>&lt;any&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> aPromise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setState</span>(<span class="literal">false</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> [isLoading, load] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// infers [boolean, typeof load] instead of (boolean | typeof load)[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当你解构时，你会在解构的位置获取正确的类型<br />或者编写一个自动类型推断的函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个函数仅仅为了让TS自动推断参数类型</span></span><br><span class="line"><span class="keyword">function</span> tuplify&lt;T <span class="keyword">extends</span> any[]&gt;(...<span class="attr">elements</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numberValue = <span class="title function_">useRef</span>(<span class="number">3</span>).<span class="property">current</span>;</span><br><span class="line">  <span class="keyword">const</span> functionValue = <span class="title function_">useRef</span>(<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">current</span>;</span><br><span class="line">  <span class="keyword">return</span> [numberValue, functionValue]; <span class="comment">// type is (number | (() =&gt; void))[]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useTuple</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numberValue = <span class="title function_">useRef</span>(<span class="number">3</span>).<span class="property">current</span>;</span><br><span class="line">  <span class="keyword">const</span> functionValue = <span class="title function_">useRef</span>(<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">current</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">tuplify</span>(numberValue, functionValue); <span class="comment">// type is [number, () =&gt; void]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="class-Component"><a href="#class-Component" class="headerlink" title="class Component"></a>class Component</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">MyProps</span> = &#123;</span><br><span class="line">  <span class="comment">// using `interface` is also ok</span></span><br><span class="line">  <span class="attr">message</span>: string,</span><br><span class="line">&#125;;</span><br><span class="line">type <span class="title class_">MyState</span> = &#123;</span><br><span class="line">  <span class="attr">count</span>: number, <span class="comment">// like this</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">MyProps</span>, <span class="title class_">MyState</span>&gt; &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="title class_">MyState</span> = &#123;</span><br><span class="line">    <span class="comment">// optional second annotation for better type inference</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.message&#125; &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为什么要注释两次 state？</strong><br />对类属性进行注释不是必要的，但它允许在访问 this.state 和初始化状态时更好地进行类型推断。<br />注释以两种不同的方式工作，第二个泛型类型参数将允许 this.setState() 正常工作，因为该方法来自基类，但 state 在组件内部初始化时可能会覆盖基类的实现，因此您必须确保告诉编译器你实际上并没有做任何不同的事情。<br /><strong>不需要添加 readonly</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">MyProps</span> = &#123;</span><br><span class="line">  readonly <span class="attr">message</span>: string;</span><br><span class="line">&#125;;</span><br><span class="line">type <span class="title class_">MyState</span> = &#123;</span><br><span class="line">  readonly <span class="attr">count</span>: number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>React.Component&lt;P,S&gt; 已经默认标记它们为不可变。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React “Key”</title>
    <url>/blog/React-%E2%80%9CKey%E2%80%9D/</url>
    <content><![CDATA[<h3 id="什么是key属性以及为什么React需要它？"><a href="#什么是key属性以及为什么React需要它？" class="headerlink" title="什么是key属性以及为什么React需要它？"></a>什么是key属性以及为什么React需要它？</h3><p>如果存在“key”属性，React 使用它作为在重新渲染期间在其兄弟姐妹中识别相同类型元素的一种方式，也就是说，仅在重新渲染期间和相同类型的相邻元素才需要它。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Item</span> = (<span class="params">&#123; country &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;country-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;country.flagUrl&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;country.name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CountriesList</span> = (<span class="params">&#123; countries &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;countries.map((country) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">country</span>=<span class="string">&#123;country&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// same as </span></span><br><span class="line">countries.<span class="title function_">map</span>(<span class="function">(<span class="params">country, index</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">country</span>=<span class="string">&#123;country&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>

<p>React 会发现那里没有“键”，然后回退到使用countries数组的索引作为键</p>
<h3 id="什么情况下可以使用-index-作为-key呢？"><a href="#什么情况下可以使用-index-作为-key呢？" class="headerlink" title="什么情况下可以使用 index 作为 key呢？"></a>什么情况下可以使用 index 作为 key呢？</h3><p><strong>分页列表</strong><br />如果你希望在相同大小的列表中显示相同类型的不同项目。如果您采用key&#x3D;”id”方法，那么每次更改页面时，都会加载具有完全不同 ID 的全新项目集。这意味着 React 将无法找到任何“现有”项目，卸载整个列表，并安装全新的项目集。但！如果你采用key&#x3D;”index”这种方法，React 会认为新“页面”上的所有项目都已经存在，并且只会用新数据更新这些项目，而实际组件会被挂载。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React中海量数据加载</title>
    <url>/blog/React%E4%B8%AD%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="对于项目中大量数据通常存在两种情况："><a href="#对于项目中大量数据通常存在两种情况：" class="headerlink" title="对于项目中大量数据通常存在两种情况："></a>对于项目中大量数据通常存在两种情况：</h3><ul>
<li>第一种就是数据可视化，比如像热力图，地图，大量的数据点位的情况。</li>
<li>第二种情况是长列表渲染。</li>
</ul>
<h3 id="1-时间分片"><a href="#1-时间分片" class="headerlink" title="1.时间分片"></a>1.时间分片</h3><p>不使用分片</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>vm;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useMemo, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="comment">/* 获取随机颜色 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">const</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;rgba(&quot;</span> + r + <span class="string">&quot;,&quot;</span> + g + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;,0.8)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 获取随机位置 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPostion</span>(<span class="params">position</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = position;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * width) + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * height) + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">&#123; position &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">background</span>: <span class="title function_">getColor</span>(),</span><br><span class="line">      ...<span class="title function_">getPostion</span>(position),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [position]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> <span class="attr">className</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">dataList</span>: [],</span><br><span class="line">    <span class="attr">renderList</span>: [],</span><br><span class="line">    <span class="attr">position</span>: &#123; <span class="attr">width</span>: <span class="number">0</span>, <span class="attr">height</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> boxRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!boxRef.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; offsetHeight, offsetWidth &#125; = boxRef.<span class="property">current</span>;</span><br><span class="line">    <span class="keyword">const</span> originList = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">20000</span> &#125;);</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">position</span>: &#123; <span class="attr">height</span>: offsetHeight, <span class="attr">width</span>: offsetWidth &#125;,</span><br><span class="line">      <span class="attr">dataList</span>: originList,</span><br><span class="line">      <span class="attr">renderList</span>: originList,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;boxRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.renderList.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Circle</span> <span class="attr">position</span>=<span class="string">&#123;state.position&#125;</span> <span class="attr">key</span>=<span class="string">&#123;item</span> + <span class="attr">index</span> + &quot;&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width:</span> &quot;<span class="attr">100</span>%&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">height:</span> &quot;<span class="attr">100</span>%&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(true)&#125;&gt;show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;show &amp;&amp; <span class="tag">&lt;<span class="name">Box</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>​<img data-src="/blog/./React%E4%B8%AD%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/1-20230827094032-uxoczzd.webp" alt="1">​</p>
<h4 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改box文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">dataList</span>: [], <span class="comment">//数据源列表</span></span><br><span class="line">    <span class="attr">renderList</span>: [], <span class="comment">//渲染列表</span></span><br><span class="line">    <span class="attr">position</span>: &#123; <span class="attr">width</span>: <span class="number">0</span>, <span class="attr">height</span>: <span class="number">0</span> &#125;, <span class="comment">// 位置信息</span></span><br><span class="line">    <span class="attr">chunk</span>: <span class="number">500</span>, <span class="comment">// 每次渲染数量</span></span><br><span class="line">  &#125;;</span><br><span class="line">  box = <span class="title class_">React</span>.<span class="property">createRef</span>&lt;<span class="title class_">HTMLDivElement</span>&gt;();</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; offsetHeight, offsetWidth &#125; = <span class="variable language_">this</span>.<span class="property">box</span>.<span class="property">current</span>;</span><br><span class="line">    <span class="keyword">const</span> originList = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">20000</span> &#125;);</span><br><span class="line">    <span class="comment">/* 计算需要渲染此次数*/</span></span><br><span class="line">    <span class="keyword">const</span> times = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(</span><br><span class="line">      originList.<span class="property">length</span> / <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">chunk</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">dataList</span>: originList,</span><br><span class="line">        <span class="attr">position</span>: &#123; <span class="attr">height</span>: offsetHeight, <span class="attr">width</span>: offsetWidth &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">toRenderList</span>(index, times);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  toRenderList = <span class="function">(<span class="params">index, times</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; times) <span class="keyword">return</span>; <span class="comment">/* 如果渲染完成，那么退出 */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; renderList &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="comment">/* 通过缓存element把所有渲染完成的list缓存下来，下一次更新，直接跳过渲染 */</span></span><br><span class="line">    renderList.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">renderNewList</span>(index));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      renderList,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/* 用 requestIdleCallback 代替 setTimeout 浏览器空闲执行下一批渲染 */</span></span><br><span class="line">    <span class="title function_">requestIdleCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">toRenderList</span>(++index, times);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">renderNewList</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="comment">/* 得到最新的渲染列表 */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; dataList, position, chunk &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> list = dataList.<span class="title function_">slice</span>((index - <span class="number">1</span>) * chunk, index * chunk);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Circle</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">position</span>=<span class="string">&#123;position&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.box&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.renderList&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>​<img data-src="/blog/./React%E4%B8%AD%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/2-20230827094016-ksywa9a.webp" alt="2">​</p>
<h3 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h3><p>​<img data-src="/blog/./React%E4%B8%AD%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/image-20230827092148-12odl2l.png" alt="image">​</p>
<ul>
<li>视图区：视图区就是能够直观看到的列表区，此时的元素都是真实的 DOM 元素。</li>
<li>缓冲区：缓冲区是为了防止用户上滑或者下滑过程中，出现白屏等效果。（缓冲区和视图区为渲染真实的 DOM ）</li>
<li>虚拟区：对于用户看不见的区域（除了缓冲区），剩下的区域，不需要渲染真实的 DOM 元素。虚拟列表就是通过这个方式来减少页面上 DOM 元素的数量。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">VirtualList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [dataList, setDataList] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="comment">/* 截取缓冲区 + 视图区索引 */</span></span><br><span class="line">  <span class="keyword">const</span> [position, setPosition] = <span class="title function_">useState</span>([<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scroll = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> box = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">/* 用于移动视图区域，形成滑动效果。 */</span></span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scrollInfo = <span class="title function_">useRef</span>(&#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">500</span> <span class="comment">/* 容器高度 */</span>,</span><br><span class="line">    <span class="attr">bufferCount</span>: <span class="number">8</span> <span class="comment">/* 缓冲区个数 */</span>,</span><br><span class="line">    <span class="attr">itemHeight</span>: <span class="number">60</span> <span class="comment">/* 每一个item高度 */</span>,</span><br><span class="line">    <span class="attr">renderCount</span>: <span class="number">0</span> <span class="comment">/* 渲染区个数 */</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!box.<span class="property">current</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> height = box.<span class="property">current</span>.<span class="property">offsetHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; itemHeight, bufferCount &#125; = scrollInfo.<span class="property">current</span>;</span><br><span class="line">    <span class="keyword">const</span> renderCount = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(height / itemHeight) + bufferCount;</span><br><span class="line">    scrollInfo.<span class="property">current</span> = &#123; renderCount, height, bufferCount, itemHeight &#125;;</span><br><span class="line">    <span class="keyword">const</span> dataList = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">5000</span> &#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> index + <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">setDataList</span>(dataList);</span><br><span class="line">    <span class="title function_">setPosition</span>([<span class="number">0</span>, renderCount]);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleScroll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; scrollTop &#125; = scroll.<span class="property">current</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; itemHeight, renderCount &#125; = scrollInfo.<span class="property">current</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> currentOffset = scrollTop - (scrollTop % itemHeight);</span><br><span class="line">    <span class="keyword">const</span> start = <span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / itemHeight);</span><br><span class="line">    context.<span class="property">current</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate3d(0, <span class="subst">$&#123;currentOffset&#125;</span>px, 0)`</span>; <span class="comment">/* 偏移，造成下滑效果 */</span></span><br><span class="line">    <span class="keyword">const</span> end = <span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / itemHeight + renderCount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果render内容发生改变，那么截取  */</span></span><br><span class="line">    <span class="keyword">if</span> (end !== position[<span class="number">1</span>] || start !== position[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="title function_">setPosition</span>([start, end]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; itemHeight, height &#125; = scrollInfo.<span class="property">current</span>;</span><br><span class="line">  <span class="keyword">const</span> [start, end] = position;</span><br><span class="line">  <span class="comment">/* 渲染区间 */</span></span><br><span class="line">  <span class="keyword">const</span> renderList = dataList.<span class="title function_">slice</span>(start, end);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;渲染区间&quot;</span>, position);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list_box&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;box&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;scroll_box&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">height</span> + &quot;<span class="attr">px</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onScroll</span>=<span class="string">&#123;handleScroll&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;scroll&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;scroll_hold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> `$&#123;<span class="attr">dataList.length</span> * <span class="attr">itemHeight</span>&#125;<span class="attr">px</span>` &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;context&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;context&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;renderList.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;`$&#123;item&#125; Item`&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list_box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list_box</span> <span class="selector-class">.scroll_box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">23px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: salmon;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.context</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img data-src="/blog/./React%E4%B8%AD%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/3-20230827093946-fjzgsct.webp" alt="3">​</p>
<p>‍</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React的diff</title>
    <url>/blog/React%E7%9A%84diff/</url>
    <content><![CDATA[<h1 id="React-的-diff"><a href="#React-的-diff" class="headerlink" title="React 的 diff"></a>React 的 diff</h1><p>一个<code>DOM节点</code>在某一时刻最多会有 4 个节点和它相关。</p>
<ol>
<li><code>current Fiber</code>。如果该<code>DOM节点</code>已在页面中，<code>current Fiber</code>代表该<code>DOM节点</code>对应的<code>Fiber节点</code>。</li>
<li><code>workInProgress Fiber</code>。如果该<code>DOM节点</code>将在本次更新中渲染到页面中，<code>workInProgress Fiber</code>代表该<code>DOM节点</code>对应的<code>Fiber节点</code>。</li>
<li><code>DOM节点</code>本身。</li>
<li><code>JSX对象</code>。即<code>ClassComponent</code>的<code>render</code>方法的返回结果，或<code>FunctionComponent</code>的调用结果。<code>JSX对象</code>中包含描述<code>DOM节点</code>的信息。</li>
</ol>
<p><code>Diff算法</code>的本质是对比 1 和 4，生成 2</p>
<h2 id="diff-算法的优化"><a href="#diff-算法的优化" class="headerlink" title="diff 算法的优化"></a>diff 算法的优化</h2><p>由于 diff 算法本身会带来性能损耗，前后两颗树完全比对的算法复杂度为 O(n3)，其中 n 是树中元素的的数量。</p>
<p>为了降低算法复杂度，<code>React</code>的<code>diff</code>会预设三个限制：</p>
<ol>
<li>只对同级元素进行<code>Diff</code>。如果一个<code>DOM节点</code>在前后两次更新中跨越了层级，那么<code>React</code>不会尝试复用他。</li>
<li>两个不同类型的元素会产生出不同的树。如果元素由<code>div</code>变为<code>p</code>，React 会销毁<code>div</code>及其子孙节点，并新建<code>p</code>及其子孙节点。</li>
<li>开发者可以通过  <code>key prop</code>来暗示哪些子元素在不同的渲染下能保持稳定。</li>
</ol>
<p>考虑如下例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 更新前</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;ran&quot;</span>&gt;</span>ran<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">&quot;xiu&quot;</span>&gt;</span>xiu<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 更新后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">&quot;xiu&quot;</span>&gt;</span>xiu<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;ran&quot;</span>&gt;</span>ran<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有<code>key</code>，<code>React</code>会认为<code>div</code>的第一个子节点由<code>p</code>变为<code>h1</code>，第二个子节点由<code>h1</code>变为<code>p</code>。这符合限制 2 的设定，会销毁并新建。</p>
<p>但是当我们用<code>key</code>指明了节点前后对应关系后，<code>React</code>知道<code>key === &quot;ran&quot;</code>的<code>p</code>在更新后还存在，所以<code>DOM节点</code>可以复用，只是需要交换下顺序。</p>
<p>reconcileChildFibers 函数会根据不同的 newChild（JSX 对象）调用不同的处理函数。</p>
<h2 id="单节点-diff"><a href="#单节点-diff" class="headerlink" title="单节点 diff"></a>单节点 diff</h2><p>当 newChild 类型为 object、number、string，代表同级只有一个节点。</p>
<ol>
<li>先判断 key 是否相同，然后 type，都相同时 DOM 才能复用。</li>
<li>当 child !&#x3D;&#x3D; null 且 key 相同且 type 不同时，执行 deleteRemainingChildren 将 child 及其兄弟 fiber 都标记删除。</li>
<li>当 child !&#x3D;&#x3D; null 且 key 不同时，仅将 child 标记删除。</li>
</ol>
<p>关于 2，3 步，当 key 相同但 type 不同，说明已经完全无法复用了，都需要删除。但 key 不同只代表该 fiber 不能复用，后面的兄弟 fiber 还有复用的可能性。</p>
<h2 id="多节点-diff"><a href="#多节点-diff" class="headerlink" title="多节点 diff"></a>多节点 diff</h2><p>当 newChild 类型为 Array，同级有多个节点。</p>
<p>多节点 diff 有多种情况需要处理</p>
<h3 id="1-节点更新"><a href="#1-节点更新" class="headerlink" title="1. 节点更新"></a>1. 节点更新</h3><p>节点更新又包含两种情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 属性变化</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;p&quot;</span> <span class="attr">className</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 类型变化</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">&quot;p&quot;</span> <span class="attr">className</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-节点新增或删除"><a href="#2-节点新增或删除" class="headerlink" title="2. 节点新增或删除"></a>2. 节点新增或删除</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 新增</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//删除</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-节点位置变化"><a href="#3-节点位置变化" class="headerlink" title="3. 节点位置变化"></a>3. 节点位置变化</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同的情况执行不同的逻辑，React 团队发现更新比其他两种的频率更高，于是 diff 优先判断更新情况。又因为 fiber 是单链表结构的，所以无法使用双指针优化遍历。diff 会经过两轮遍历：</p>
<ul>
<li>第一轮：处理更新节点。</li>
<li>第二轮：处理不为更新的节点。</li>
</ul>
<h2 id="React-中触发更新"><a href="#React-中触发更新" class="headerlink" title="React 中触发更新"></a>React 中触发更新</h2><p>除了 SSR 相关，触发更新的方法：</p>
<ul>
<li>ReactDOM.render</li>
<li>this.setState</li>
<li>this.forceUpdate</li>
<li>useState</li>
<li>useReducer</li>
</ul>
<h3 id="调度更新"><a href="#调度更新" class="headerlink" title="调度更新"></a>调度更新</h3><p>render 阶段从 rootFiber 开始向下遍历，触发更新的 fiber 调用 markUpdateLaneFromFiberToRoot 一直向上遍历到 rootFiber 并返回 rootFiber。触发更新的 fiber 中保存了一个 Update 的对象。</p>
<p>之后通知 Scheduler 根据更新的优先级，决定以同步还是异步的方式调度本次更新。</p>
<p><code>高优更新</code>中断正在进行中的<code>低优更新</code>，先完成<code>render - commit流程</code>。</p>
<p>待<code>高优更新</code>完成后，<code>低优更新</code>基于<code>高优更新</code>的结果<code>重新更新</code>。</p>
]]></content>
      <categories>
        <category>进阶</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>better-scroll结合vue遇到图片引起的问题</title>
    <url>/blog/better-scroll%E7%BB%93%E5%90%88vue%E9%81%87%E5%88%B0%E5%9B%BE%E7%89%87%E5%BC%95%E8%B5%B7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="使用better-scroll遇到的问题"><a href="#使用better-scroll遇到的问题" class="headerlink" title="使用better-scroll遇到的问题"></a>使用better-scroll遇到的问题</h2><p>原来项目中只使用了better-scroll来做轮播图和滑动组件，但是头部和标签栏是固定的，只滑动下面部分，于是设置 scroll-warpper样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scroll-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是想要实现下部组件与上部标签的联动，仅仅靠better-scroll就不够了，于是项目中按需引入了vant的的标签组件，来实现移动端的左右滑动（不得不说，封装好的东西就是香）。紧接着就产生了问题，</p>
<ul>
<li>一是：下部组件无法滑动，</li>
<li>二是：better-scroll滑不到底部，只能滑一部分。刷新页面后可以滑动了</li>
</ul>
<p>分析问题：</p>
<ul>
<li>查看dom发现vant的content__wrap没有高度，而scroll-warpper和内容高度一致。这是由于content__wrap的定位是relative，而scroll-wrapper是相对于content__wrap而定位的，并不是相对整个页面定位，所有内容是被里面撑开的。</li>
<li>页面中有大量图片，当dom加载完成后图片并没有加载完成，scroll已经初始化了，所以滑不到底部。刷新页面可以滑动是因为图片已经被浏览器缓存了，刷新直接拿到图片不需要重新请求。</li>
</ul>
<p>解决问题：</p>
<ul>
<li>第一个问题是定位的原因，那我们把wrapper的高度写死就好了，<br>  但是由于头部和标签是自适应的，高度是不确定的，就没法写死了。使用动态获取设置wrapper的style：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setScrollWrapperHeight</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">scroll</span>.<span class="property">$el</span>.<span class="property">style</span>.<span class="property">height</span> =</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">innerHeight</span> - <span class="variable language_">this</span>.<span class="property">topHeight</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>由于多个页面都需要这个配置，放到mixin中，在mounted方法中调用此方法。<br>解决wrapper高度问题。</li>
<li>第二个问题是图片加载时content的高度设置错误问题，可以通过img的load方法判断图片是否加载完成。<br> 子组件：</li>
</ul>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">imgAllLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> mulitImg = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.suggest-item-img&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> promiseAll = []</span><br><span class="line">      <span class="keyword">const</span> imgTotal = mulitImg.<span class="property">length</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgTotal; i++) &#123;</span><br><span class="line">        promiseAll[i] = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          mulitImg[i].<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 第i张加载完成</span></span><br><span class="line">            <span class="title function_">resolve</span>(mulitImg[i])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> promiseAll</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>在子组件mounted中：派发一个imgLoad方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(<span class="variable language_">this</span>.<span class="title function_">imgAllLoad</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;imgLoad&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>在父组件监听此方法，并刷新scroll组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">imgLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">scroll</span>.<span class="title function_">refresh</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>这样体验就不错了。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>express三大概念</title>
    <url>/blog/express%E4%B8%89%E5%A4%A7%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="Express-三大基础概念"><a href="#Express-三大基础概念" class="headerlink" title="Express 三大基础概念"></a>Express 三大基础概念</h2><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件是一个函数，在请求和响应周期中被顺序调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLogger = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;myLogger&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(myLogger)</span><br></pre></td></tr></table></figure>
<p>提示：中间件需要在响应结束前被调用</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>应用如何响应请求的一种规则<br>响应 &#x2F; 路径的 get 请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello node&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>响应 &#x2F; 路径的 post 请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello node&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>规则主要分两部分：</p>
<ul>
<li>请求方法：get、post……</li>
<li>请求的路径：&#x2F;、&#x2F;user、&#x2F;.*fly$&#x2F;……</li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>通过自定义异常处理中间件处理请求中产生的异常</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;something has error...&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="keyword">function</span> (<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;errorHandler...&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">error</span>:<span class="string">&#x27;Error...&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(errorHandler)</span><br></pre></td></tr></table></figure>
<p>使用时需要注意两点：</p>
<ul>
<li>第一，参数一个不能少，否则会视为普通的中间件</li>
<li>第二，中间件需要在请求之后引用</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>js语法细节</title>
    <url>/blog/js%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h2 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h2><p>它们没有 this。在箭头函数内部访问到的 this 都是从外部获取的。</p>
<h2 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h2><ul>
<li>通常我们这样写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// user 没有 address</span></span><br><span class="line"><span class="title function_">alert</span>( user &amp;&amp; user.<span class="property">address</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">street</span> ); <span class="comment">// undefined（不报错）</span></span><br></pre></td></tr></table></figure>
<p>依次对整条路径上的属性使用与运算进行判断，以确保所有节点是存在的（如果不存在，则停止计算），但是写起来很麻烦。</p>
<ul>
<li>通过可选链可以这样</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>( user?.<span class="property">address</span> ); <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>( user?.<span class="property">address</span>.<span class="property">street</span> ); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不要过度使用可选链</p>
</blockquote>
<blockquote>
<p>我们应该只将 ?. 使用在一些东西可以不存在的地方。<br>例如，如果根据我们的代码逻辑，user 对象必须存在，但 address 是可选的，那么 user.address?.street 会更好。<br>所以，如果 user 恰巧因为失误变为 undefined，我们会看到一个编程错误并修复它。否则，代码中的错误在不恰当的地方被消除了，这会导致调试更加困难。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 总结</span><br><span class="line">可选链 ?. 语法有三种形式：</span><br><span class="line"></span><br><span class="line">- obj?.prop —— 如果 obj 存在则返回 obj.prop，否则返回 undefined。</span><br><span class="line">- obj?.[prop] —— 如果 obj 存在则返回 obj[prop]，否则返回 undefined。</span><br><span class="line">- obj.method?.() —— 如果 obj.method 存在则调用 obj.method()，否则返回 undefined。</span><br><span class="line">&gt;正如我们所看到的，这些语法形式用起来都很简单直接。?. 检查左边部分是否为 null/undefined，如果不是则继续运算。</span><br><span class="line">?. 链使我们能够安全地访问嵌套属性。</span><br><span class="line"></span><br><span class="line">&gt;但是，我们应该谨慎地使用 ?.，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。</span><br><span class="line"></span><br><span class="line">## Symbol</span><br><span class="line">如果我们要在对象字面量 &#123;...&#125; 中使用 Symbol，则需要使用方括号把它括起来。</span><br><span class="line">就像这样：</span><br><span class="line">```js</span><br><span class="line">let id = Symbol(&quot;id&quot;);</span><br><span class="line"></span><br><span class="line">let user = &#123;</span><br><span class="line">  name: &quot;John&quot;,</span><br><span class="line">  [id]: 123 // 而不是 &quot;id&quot;：123</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这是因为我们需要变量 id 的值作为键，而不是字符串 “id”。</p>
<blockquote>
<p>Symbol 属性不参与 for..in 循环。</p>
</blockquote>
<blockquote>
<p>Object.assign 会同时复制字符串和 symbol 属性</p>
</blockquote>
<blockquote>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly96aC5qYXZhc2NyaXB0LmluZm8vc3ltYm9sI2R1aS14aWFuZy16aS1taWFuLWxpYW5nLXpob25nLWRlLXN5bWJvbA==">symbol<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="对象原始值的转换"><a href="#对象原始值的转换" class="headerlink" title="对象原始值的转换"></a>对象原始值的转换</h2><p>如果没有 Symbol.toPrimitive，那么 JavaScript 将尝试找到它们，并且按照下面的顺序进行尝试：</p>
<ul>
<li>对于 “string” hint，toString -&gt; valueOf。</li>
<li>其他情况，valueOf -&gt; toString。</li>
</ul>
<p>默认情况下，普通对象具有 toString 和 valueOf 方法：</p>
<ul>
<li>toString 方法返回一个字符串 “[object Object]”。</li>
<li>valueOf 方法返回对象自身。</li>
<li>如果没有 Symbol.toPrimitive 和 valueOf，toString 将处理所有原始转换。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对象到原始值的转换，是由许多期望以原始值作为值的内建函数和运算符自动调用的。</p>
<p>这里有三种类型（hint）：</p>
<ul>
<li>“string”（对于 alert 和其他需要字符串的操作）</li>
<li>“number”（对于数学运算）</li>
<li>“default”（少数运算符）<br>规范明确描述了哪个运算符使用哪个 hint。很少有运算符“不知道期望什么”并使用 “default” hint。通常对于内建对象，”default” hint 的处理方式与 “number” 相同，因此在实践中，最后两个 hint 常常合并在一起。</li>
</ul>
<p>转换算法是：</p>
<p>1.调用 obj<a href="hint">Symbol.toPrimitive</a> 如果这个方法存在，</p>
<p>2.否则，如果 hint 是 “string”</p>
<ul>
<li>尝试 obj.toString() 和 obj.valueOf()，无论哪个存在。</li>
</ul>
<p>3.否则，如果 hint 是 “number” 或者 “default”</p>
<ul>
<li>尝试 obj.valueOf() 和 obj.toString()，无论哪个存在。<br>在实践中，为了便于进行日志记录或调试，对于所有能够返回一种“可读性好”的对象的表达形式的转换，只实现以 obj.toString() 作为全能转换的方法就够了。</li>
</ul>
<blockquote>
<p>参考 <span class="exturl" data-url="aHR0cHM6Ly96aC5qYXZhc2NyaXB0LmluZm8vb2JqZWN0LXRvcHJpbWl0aXZlI3N5bWJvbHRvcHJpbWl0aXZl">Symbol.toPrimitive<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="关于数组的length"><a href="#关于数组的length" class="headerlink" title="关于数组的length"></a>关于数组的length</h2><p>当我们修改数组的时候，length 属性会自动更新。准确来说，它实际上不是数组里元素的个数，而是最大的数字索引值加一。</p>
<p>例如，一个数组只有一个元素，但是这个元素的索引值很大，那么这个数组的 length 也会很大：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [];</span><br><span class="line">fruits[<span class="number">123</span>] = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( fruits.<span class="property">length</span> ); <span class="comment">// 124</span></span><br></pre></td></tr></table></figure>
<p>要知道的是我们通常不会这样使用数组。</p>
<p>length 属性的另一个有意思的点是它是可写的。</p>
<p>如果我们手动增加它，则不会发生任何有趣的事儿。但是如果我们减少它，数组就会被截断。该过程是不可逆的，下面是例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">2</span>; <span class="comment">// 截断到只剩 2 个元素</span></span><br><span class="line"><span class="title function_">alert</span>( arr ); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span>; <span class="comment">// 又把 length 加回来</span></span><br><span class="line"><span class="title function_">alert</span>( arr[<span class="number">3</span>] ); <span class="comment">// undefined：被截断的那些数值并没有回来</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所以，清空数组最简单的方法就是：arr.length &#x3D; 0;</p>
</blockquote>
<h2 id="关于JSON的转换"><a href="#关于JSON的转换" class="headerlink" title="关于JSON的转换"></a>关于JSON的转换</h2><p>JSON 是语言无关的纯数据规范，因此一些特定于 JavaScript 的对象属性会被 JSON.stringify 跳过。</p>
<p>即：</p>
<ul>
<li>函数属性（方法）。</li>
<li>Symbol 类型的属性。</li>
<li>存储 undefined 的属性。</li>
</ul>
<h2 id="js中函数就是对象"><a href="#js中函数就是对象" class="headerlink" title="js中函数就是对象"></a>js中函数就是对象</h2><blockquote>
<p>被赋值给函数的属性，比如 sayHi.counter &#x3D; 0，不会 在函数内定义一个局部变量 counter。换句话说，属性 counter 和变量 let counter 是毫不相关的两个东西。</p>
</blockquote>
<blockquote>
<p>我们可以把函数当作对象，在它里面存储属性，但是这对它的执行没有任何影响。变量不是函数属性，反之亦然。它们之间是平行的。</p>
</blockquote>
<h2 id="关于this和箭头函数"><a href="#关于this和箭头函数" class="headerlink" title="关于this和箭头函数"></a>关于this和箭头函数</h2><p>箭头函数</p>
<ul>
<li>没有 this</li>
<li>没有 arguments</li>
<li>不能使用 new 进行调用</li>
<li>它们也没有 super</li>
</ul>
<p>所以箭头函数里的 <code>this</code> 的查找与常规变量的搜索方式完全相同：在外部词法环境中查找。</p>
<h2 id="关于-proto-和prototype"><a href="#关于-proto-和prototype" class="headerlink" title="关于__proto__和prototype"></a>关于__proto__和prototype</h2><blockquote>
<p>初学者常犯一个普遍的错误，就是不知道 <code>__proto__</code> 和 [[Prototype]] 的区别。<br>请注意，<code>__proto__</code> 与内部的 [[Prototype]] 不一样。<code>__proto__</code> 是 [[Prototype]] 的 getter&#x2F;setter。稍后，我们将看到在什么情况下理解它们很重要，在建立对 JavaScript 语言的理解时，让我们牢记这一点。</p>
</blockquote>
<figure class="highlight plaintext"><figcaption><span>属性有点过时了。它的存在是出于历史的原因，现代编程语言建议我们应该使用函数 Object.getPrototypeOf/Object.setPrototypeOf 来取代 ```__proto__``` 去 get/set 原型。稍后我们将介绍这些函数。</span></figcaption><table><tr><td class="code"><pre><span class="line">根据规范，```__proto__``` 必须仅受浏览器环境的支持。但实际上，包括服务端在内的所有环境都支持它，因此我们使用它是非常安全的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重要：[this的值](https://zh.javascript.info/prototype-inheritance#this-de-zhi)</span><br><span class="line"></span><br><span class="line">### 设置和直接访问原型的现代方法</span><br><span class="line">设置和直接访问原型的现代方法有：</span><br><span class="line"></span><br><span class="line">- Object.create(proto, [descriptors]) —— 利用给定的 proto 作为 [[Prototype]]（可以是 null）和可选的属性描述来创建一个空对象。</span><br><span class="line">- Object.getPrototypeOf(obj) —— 返回对象 obj 的 [[Prototype]]（与 ```__proto__``` 的 getter 相同）。</span><br><span class="line">- Object.setPrototypeOf(obj, proto) —— 将对象 obj 的 [[Prototype]] 设置为 proto（与 ```__proto__``` 的 setter 相同）。</span><br><span class="line"></span><br><span class="line">如果要将一个用户生成的键放入一个对象，那么内建的 ```__proto__``` getter/setter 是不安全的。因为用户可能会输入 &quot;```__proto__```&quot; 作为键，这会导致一个 error，虽然我们希望这个问题不会造成什么大影响，但通常会造成不可预料的后果。</span><br><span class="line"></span><br><span class="line">因此，我们可以使用 Object.create(null) 创建一个没有 ```__proto__``` 的 “very plain” 对象，或者对此类场景坚持使用 Map 对象就可以了。</span><br><span class="line"></span><br><span class="line">此外，Object.create 提供了一种简单的方式来浅拷贝一个对象的所有描述符：</span><br><span class="line">```js</span><br><span class="line">let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));</span><br></pre></td></tr></table></figure>

<p>此外，我们还明确了 <code>__proto__</code> 是 [[Prototype]] 的 getter&#x2F;setter，就像其他方法一样，它位于 Object.prototype。</p>
<p>我们可以通过 Object.create(null) 来创建没有原型的对象。这样的对象被用作 “pure dictionaries”，对于它们而言，使用 “<code>__proto__</code>“ 作为键是没有问题的。</p>
<p>其他方法：</p>
<ul>
<li>Object.keys(obj) &#x2F; Object.values(obj) &#x2F; Object.entries(obj) —— 返回一个可枚举的由自身的字符串属性名&#x2F;值&#x2F;键值对组成的数组。</li>
<li>Object.getOwnPropertySymbols(obj) —— 返回一个由自身所有的 symbol 类型的键组成的数组。</li>
<li>Object.getOwnPropertyNames(obj) —— 返回一个由自身所有的字符串键组成的数组。</li>
<li>Reflect.ownKeys(obj) —— 返回一个由自身所有键组成的数组。</li>
<li>obj.hasOwnProperty(key)：如果 obj 拥有名为 key 的自身的属性（非继承而来的），则返回 true。</li>
</ul>
<p>所有返回对象属性的方法（如Object.keys 及其他）—— 都返回“自身”的属性。如果我们想继承它们，我们可以使用 for…in。</p>
<h2 id="关于类继承"><a href="#关于类继承" class="headerlink" title="关于类继承"></a>关于类继承</h2><p>1.想要扩展一个类：class Child extends Parent：</p>
<ul>
<li>这意味着 Child.prototype.<strong>proto</strong> 将是 Parent.prototype，所以方法会被继承。</li>
</ul>
<p>2.重写一个 constructor：</p>
<ul>
<li>在使用 this 之前，我们必须在 Child 的 constructor 中将父 constructor 调用为 super()。</li>
</ul>
<p>3.重写一个方法：</p>
<ul>
<li>我们可以在一个 Child 方法中使用 super.method() 来调用 Parent 方法。</li>
</ul>
<p>4.内部：</p>
<ul>
<li>方法在内部的 [[HomeObject]] 属性中记住了它们的类&#x2F;对象。这就是 super 如何解析父方法的。</li>
<li>因此，将一个带有 super 的方法从一个对象复制到另一个对象是不安全的。</li>
</ul>
<p>补充：</p>
<p>箭头函数没有自己的 this 或 super，所以它们能融入到就近的上下文中，像透明似的。</p>
<h2 id="类检查”instanceof”"><a href="#类检查”instanceof”" class="headerlink" title="类检查”instanceof”"></a>类检查”instanceof”</h2><table>
<thead>
<tr>
<th></th>
<th>用于</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>原始数据类型</td>
<td>string</td>
</tr>
<tr>
<td>{}.toString.call</td>
<td>原始数据类型，内建对象，包含Symbol.toStringTag属性的对象</td>
<td>string</td>
</tr>
<tr>
<td>instanceof</td>
<td>对象</td>
<td>true&#x2F;false</td>
</tr>
</tbody></table>
<p>如表所示：{}.toString.call (Object.prototype.toString) 可以检查对象的类型并返回字符串，而不是像toString仅仅返回 <code>[Object,Object]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( s.<span class="title function_">call</span>(<span class="number">123</span>) ); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title function_">alert</span>( s.<span class="title function_">call</span>(<span class="literal">null</span>) ); <span class="comment">// [object Null]</span></span><br><span class="line"><span class="title function_">alert</span>( s.<span class="title function_">call</span>(alert) ); <span class="comment">// [object Function]</span></span><br></pre></td></tr></table></figure>

<h2 id="模块的导入和导出"><a href="#模块的导入和导出" class="headerlink" title="模块的导入和导出"></a>模块的导入和导出</h2><ul>
<li>在声明一个 class&#x2F;function&#x2F;… 之前：<ul>
<li>export [default] class&#x2F;function&#x2F;variable …</li>
</ul>
</li>
<li>独立的导出：<ul>
<li>export {x [as y], …}.</li>
</ul>
</li>
<li>重新导出：<ul>
<li>export {x [as y], …} from “module”</li>
<li>export * from “module”（不会重新导出默认的导出）。</li>
<li>export {default [as y]} from “module”（重新导出默认的导出）。</li>
</ul>
</li>
</ul>
<p>导入：</p>
<ul>
<li>模块中命名的导入：<ul>
<li>import {x [as y], …} from “module”</li>
</ul>
</li>
<li>默认的导入：<ul>
<li>import x from “module”</li>
<li>import {default as x} from “module”</li>
</ul>
</li>
<li>所有：<ul>
<li>import * as obj from “module”</li>
</ul>
</li>
<li>导入模块（它的代码，并运行），但不要将其赋值给变量：<ul>
<li>import “module”</li>
</ul>
</li>
</ul>
<p>我们把 import&#x2F;export 语句放在脚本的顶部或底部，都没关系。</p>
<h2 id="处理程序选项-“passive”"><a href="#处理程序选项-“passive”" class="headerlink" title="处理程序选项 “passive”"></a>处理程序选项 “passive”</h2><p>addEventListener 的可选项 passive: true 向浏览器发出信号，表明处理程序将不会调用 preventDefault()。</p>
<p>为什么需要这样做？</p>
<p>移动设备上会发生一些事件，例如 touchmove（当用户在屏幕上移动手指时），默认情况下会导致滚动，但是可以使用处理程序的 preventDefault() 来阻止滚动。</p>
<p>因此，当浏览器检测到此类事件时，它必须首先处理所有处理程序，然后如果没有任何地方调用 preventDefault，则页面可以继续滚动。但这可能会导致 UI 中不必要的延迟和“抖动”。</p>
<p>passive: true 选项告诉浏览器，处理程序不会取消滚动。然后浏览器立即滚动页面以提供最大程度的流畅体验，并通过某种方式处理事件。</p>
<p>对于某些浏览器（Firefox，Chrome），默认情况下，touchstart 和 touchmove 事件的 passive 为 true。</p>
<h2 id="async和defer"><a href="#async和defer" class="headerlink" title="async和defer"></a>async和defer</h2><table>
<thead>
<tr>
<th></th>
<th>顺序</th>
<th>DOMContentLoaded</th>
</tr>
</thead>
<tbody><tr>
<td>async</td>
<td>加载优先顺序。脚本在文档中的顺序不重要 —— 先加载完成的先执行</td>
<td>不相关。可能在文档加载完成前加载并执行完毕。如果脚本很小或者来自于缓存，同时文档足够长，就会发生这种情况。</td>
</tr>
<tr>
<td>defer</td>
<td>文档顺序（它们在文档中的顺序）</td>
<td>在文档加载和解析完成之后（如果需要，则会等待），即在 DOMContentLoaded 之前执行。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>requestAnimationFrame思考</title>
    <url>/blog/requestAnimationFrame%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="关于setTimeout"><a href="#关于setTimeout" class="headerlink" title="关于setTimeout"></a>关于setTimeout</h2><p>首先要明白，setTimeout 的执行只是在内存中对元素属性进行改变，这个变化必须要等到屏幕下次绘制时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素。假设屏幕每隔16.7ms刷新一次，而setTimeout 每隔10ms设置图像向左移动1px， 就会出现如下绘制过程（表格）：</p>
<ul>
<li>第    0  ms：屏幕未绘制，  等待中，setTimeout 也未执行，等待中；</li>
<li>第   10 ms：屏幕未绘制，等待中，setTimeout 开始执行并设置元素属性 left&#x3D;1px；</li>
<li>第 16.7 ms：屏幕开始绘制，屏幕上的元素向左移动了 1px， setTimeout 未执行，继续等待中；</li>
<li>第   20 ms：屏幕未绘制，等待中，setTimeout 开始执行并设置 left&#x3D;2px;</li>
<li>第   30 ms：屏幕未绘制，等待中，setTimeout 开始执行并设置 left&#x3D;3px;</li>
<li>第33.4 ms：屏幕开始绘制，屏幕上的元素向左移动了 3px， setTimeout 未执行，继续等待中；<br>…</li>
</ul>
<p>从上面的绘制过程中可以看出，屏幕没有更新 left&#x3D;2px 的那一帧画面，元素直接从left&#x3D;1px 的位置跳到了 left&#x3D;3px 的的位置，这就是丢帧现象，这种现象就会引起动画卡顿。</p>
<h2 id="关于requestAnimationFrame"><a href="#关于requestAnimationFrame" class="headerlink" title="关于requestAnimationFrame"></a>关于requestAnimationFrame</h2><p>与 setTimeout 相比，rAF 最大的优势是 由系统来决定回调函数的执行时机。具体一点讲就是，<code>系统每次绘制之前会主动调用 rAF 中的回调函数</code>，如果系统绘制率是 60Hz，那么回调函数就每16.7ms 被执行一次，如果绘制频率是75Hz，那么这个间隔时间就变成了 1000&#x2F;75&#x3D;13.3ms。换句话说就是，rAF 的执行步伐跟着系统的绘制频率走。<code>它能保证回调函数在屏幕每一次的绘制间隔中只被执行一次</code>，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p>
<p><em><strong>但是rAF并不能保证每次绘制都会执行,如果有个计算任务执行了  20ms，那么再一次回调会在 16.7 * 3 ms时执行，跳过了一次绘制。16.7+20 &#x3D; 36.7，36.7+16.7 &#x3D; 53.4， 16.7 * 3 &#x3D; 50.1, 50.1&lt;53.4</strong></em></p>
<h2 id="rAF的优势"><a href="#rAF的优势" class="headerlink" title="rAF的优势"></a>rAF的优势</h2><ul>
<li><p>CPU节能：使用 setTimeout 实现的动画，当页面被隐藏或最小化时，setTimeout 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，而且还浪费 CPU 资源。而 rAF 则完全不同，当页面处理未激活的状态下，该页面的屏幕绘制任务也会被系统暂停，因此跟着系统步伐走的 rAF 也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了 CPU 开销。像是埋点也可以使用这个特性，当页面不可见时，不需要上报埋点，等页面可见时再上报。</p>
</li>
<li><p>函数节流：在高频率事件(resize,scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，使用 rAF 可保证每个绘制间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销。一个绘制间隔内函数执行多次时没有意义的，因为显示器每16.7ms 绘制一次，多次绘制并不会在屏幕上体现出来。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>一些Vue小技巧</title>
    <url>/blog/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="关于-vue-filters"><a href="#关于-vue-filters" class="headerlink" title="关于 vue.filters"></a>关于 vue.filters</h2><p>可以写在单个组件内，也可以单独写全局的然后加到 main.js 中，像是日期格式，数字格式就可以写在全局</p>
<h2 id="和！！"><a href="#和！！" class="headerlink" title="~~和！！"></a>~~和！！</h2><p>&#126;是按位取反运算，&#126;&#126;是取反两次。<br>&#126;&#126;的作用是去掉小数部分，因为位运算的操作值要求是整数，其结果也是整数，所以经过位运算的都会自动变成整数。<br>！一个！是取反，！！两个再取反，就是强制转换成 Boolen 类型</p>
<h2 id="关于-markdown-语法"><a href="#关于-markdown-语法" class="headerlink" title="关于 markdown 语法"></a>关于 markdown 语法</h2><p>如果要使用 Markdown 保留字，可以使用 Unicode 字符。如上面的&#126;&#126;,两边加&#126;&#126;会导致形成文字之间产生删除线，把&#126;&#126;换成<code>&amp;#126;&amp;#126;</code>就可以了。<span class="exturl" data-url="aHR0cDovL3Rvb2wub3NjaGluYS5uZXQvZW5jb2Rl">Unicode 在线转义<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="js-和-css-两用样式"><a href="#js-和-css-两用样式" class="headerlink" title="js 和 css 两用样式"></a>js 和 css 两用样式</h2><p>template 中需要动态定义样式，通常做法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: textColor &#125;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">textColor</span>: <span class="string">&quot;#ff5000&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高端做法：</p>
<ul>
<li>定义 scss 文件</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$menuActiveText</span>: <span class="number">#409eff</span>;</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  menuActiveText: <span class="variable">$menuActiveText</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 js 中引用：<ul>
<li>使用 import 引用 scss 文件</li>
<li>定义 computed 将 styles 对象变成响应式对象</li>
<li>在 template 中使用 styles 对象</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: styles.menuActiveText &#125;&quot;</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;@/styles/variables.scss&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">styles</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> styles</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="连续解构"><a href="#连续解构" class="headerlink" title="连续解构"></a>连续解构</h2><p>从数组第一个对象元素中提取某个属性，比如：err 对象中包含一个 errors 数组，errors 数组每一个对象都包含一个 msg 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">err = &#123;</span><br><span class="line">  <span class="attr">errors</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;this is a message&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快速的提取方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [&#123; msg &#125;] = err.<span class="property">errors</span></span><br></pre></td></tr></table></figure>

<p>如果不用解构写法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = err.<span class="property">errors</span>[<span class="number">0</span>].<span class="property">msg</span></span><br></pre></td></tr></table></figure>

<p>真不错！</p>
<h2 id="vm-nextTick"><a href="#vm-nextTick" class="headerlink" title="vm.$nextTick"></a>vm.$nextTick</h2><p>vue 更新 DOM 是异步的，如果你想基于更新后的 DOM 状态来做点什么，为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。详情参见:<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sIyVFNSVCQyU4MiVFNiVBRCVBNSVFNiU5QiVCNCVFNiU5NiVCMCVFOSU5OCU5RiVFNSU4OCU5Nw==">异步更新队列<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="columns-分页"><a href="#columns-分页" class="headerlink" title="columns 分页"></a>columns 分页</h2><p>利用 columns 实现小说分页效果，每一列的高度与父元素相同</p>
<h2 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使页面的左右边距相同"><a href="#使页面的左右边距相同" class="headerlink" title="使页面的左右边距相同"></a>使页面的左右边距相同</h2><p>可以父元素加 padding：15px, 子元素加 margin：15px， 这样所有间隙都是 30px。</p>
<h2 id="math-floor-和-0"><a href="#math-floor-和-0" class="headerlink" title="math.floor 和 | 0"></a>math.floor 和 <code>| 0</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">10</span> / <span class="number">3</span>) === <span class="number">10</span> / <span class="number">3</span>) | <span class="number">0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>三次握手和四次挥手</title>
    <url>/blog/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>• 第一次握手([SYN], Seq &#x3D; x)<br>客户端发送一个SYN标记的包，Seq初始序列号x，发送完成后客户端进入SYN_SEND状态。<br>• 第二次握手([SYN,ACK], Seq &#x3D; y, ACK &#x3D; x + 1)<br>服务器返回确认包(ACK)应答，同时还要发送一个SYN包回去。ACK &#x3D; x + 1,表示确认收到(客户端发来的Seq值 + 1)，Seq &#x3D; y, 表示让客户端确认是否能收到。发送完成后服务端进入SYN_RCVD状态。<br>• 第三次握手([ACK], ACK &#x3D; y + 1)<br>客户端再次发送确认包(ACK),ACK &#x3D; y + 1, 表示确认收到服务器的包（服务端发来的Seq值 + 1）。客户端发送完毕后，进入ESTABLISHED状态，服务端接收到这个包，也进入ESTABLISHED状态, TCP握手结束。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>• 第一次挥手（[FIN], Seq &#x3D; x）<br>客户端发送一个FIN标记的包，告诉服务器需要关闭连接，表示自己不用发送数据了，但是还可以接收数据。发送完成后，客户端进入FIN_WAIT_1状态。<br>• 第二次挥手 ([ACK], ACK &#x3D; x + 1)<br>服务端发送一个ACK的确认包，告诉客户端接收到关闭的请求，但是还没有准备好。发送完成后，服务端进入CLOSE_WAIT状态，客户端收到这个包后，进入FIN_WAIT_2，等待服务器关闭连接。<br>• 第三次挥手 ([FIN], Seq &#x3D; y)<br>服务端准备好关闭连接时，发送FIN标记的包，告诉客户端准备关闭了。发送完成后，服务端进入LAST_ACK状态，等待客户端确认。<br>• 第四次挥手 ([ACK], ACK &#x3D; y + 1)<br>客户端接收到服务端的关闭请求，再发送ACK标记的确认包，进入TIME_WAIT状态，等待服务端可能请求重传的ACK包。<br>服务端接收到ACK包后，关闭连接，进入CLOSED状态。<br>客户端在等待固定时间(两个最大段生命周期)后，没有接收到服务的ACK包，认为服务器已关闭连接，自己也关闭连接，进入CLOSED状态。</p>
<h3 id="为什么三次握手"><a href="#为什么三次握手" class="headerlink" title="为什么三次握手"></a>为什么三次握手</h3><p>“3次握手”的作用就是双方都能明确自己和对方的收、发能力是正常的。<br>第一次握手：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。<br>第二次握手：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。 从客户端的视角来看，我接到了服务端发送过来的响应数据包，说明服务端接收到了我在第一次握手时发送的网络包，并且成功发送了响应数据包，这就说明，服务端的接收、发送能力正常。而另一方面，我收到了服务端的响应数据包，说明我第一次发送的网络包成功到达服务端，这样，我自己的发送和接收能力也是正常的。<br>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力，服务端的发送、接收能力是正常的。 第一、二次握手后，服务端并不知道客户端的接收能力以及自己的发送能力是否正常。而在第三次握手时，服务端收到了客户端对第二次握手作的回应。从服务端的角度，我在第二次握手时的响应数据发送出去了，客户端接收到了。所以，我的发送能力是正常的。而客户端的接收能力也是正常的。</p>
<h3 id="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"><a href="#为什么建立连接是三次握手，而关闭连接却是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"></a>为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</h3><p>这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方ACK和FIN一般都会分开发送。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
  </entry>
  <entry>
    <title>createObjectURL</title>
    <url>/blog/%E5%85%B3%E4%BA%8EcreateObjectURL/</url>
    <content><![CDATA[<h2 id="createObjectURL-是什么"><a href="#createObjectURL-是什么" class="headerlink" title="createObjectURL 是什么"></a>createObjectURL 是什么</h2><blockquote>
<p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。 — MDN</p>
</blockquote>
<span id="more"></span>

<h2 id="Blob-URL-Object-URL"><a href="#Blob-URL-Object-URL" class="headerlink" title="Blob URL&#x2F;Object URL"></a>Blob URL&#x2F;Object URL</h2><p>Blob URL&#x2F;Object URL 是⼀种伪协议，允许 Blob 和 File 对象⽤作图像，下载⼆进制数据链接等的 URL<br>源。在浏览器中，我们使⽤ URL.createObjectURL ⽅法来创建 Blob URL，该⽅法接收⼀个 Blob 对<br>象，并为其创建⼀个唯⼀的 URL，其形式为 <code>blob:&lt;origin&gt;/&lt;uuid&gt;</code> ，对应的示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">blob</span>:<span class="attr">https</span>:<span class="comment">//example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641</span></span><br></pre></td></tr></table></figure>

<p>浏览器内部为每个通过 URL.createObjectURL ⽣成的 URL 存储了⼀个 URL → Blob 映射。因此，此<br>类 URL 较短，但可以访问 Blob 。⽣成的 URL 仅在当前⽂档打开的状态下才有效。它允许引⽤<br><code>&lt;img&gt; 、 &lt;a&gt;</code> 中的 Blob ，但如果你访问的 Blob URL 不再存在，则会从浏览器中收到 404 错误。</p>
<p>上述的 Blob URL 看似很不错，但实际上它也有副作⽤。虽然存储了 URL → Blob 的映射，但 Blob 本<br>身仍驻留在内存中，浏览器⽆法释放它。映射在⽂档卸载时⾃动清除，因此 Blob 对象随后被释放。但<br>是，如果应⽤程序寿命很⻓，那不会很快发⽣。因此，如果我们创建⼀个 Blob URL，即使不再需要该<br>Blob，它也会存在内存中。</p>
<p>针对这个问题，我们可以调⽤ URL.revokeObjectURL(url) ⽅法，从内部映射中删除引⽤，从⽽允许<br>删除 Blob（如果没有其他引⽤），并释放内存。</p>
<h2 id="createObjectURL-可以用来做什么"><a href="#createObjectURL-可以用来做什么" class="headerlink" title="createObjectURL 可以用来做什么"></a>createObjectURL 可以用来做什么</h2><p>比如显示上传的预览图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onchange</span>=<span class="string">&quot;previewFiles(this.files)&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;preview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>) <span class="keyword">const</span> ulEle =</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;preview&#x27;</span>) <span class="keyword">function</span> <span class="title function_">previewFiles</span>(<span class="params">files</span>)&#123;<span class="string">&quot; &quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#123;<span class="title class_">Array</span>.<span class="title function_">from</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      ulEle.<span class="title function_">appendChild</span>(li)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(file)</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">height</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">width</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当图片加载完成之后对象URL就不再需要了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(<span class="variable language_">this</span>.<span class="property">src</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      li.<span class="title function_">appendChild</span>(img)</span></span><br><span class="line"><span class="language-javascript">    &#125;)&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>来看看效果：</p>
<p><img data-src="/blog/./%E5%85%B3%E4%BA%8EcreateObjectURL/1.png" alt="效果"></p>
<blockquote>
<p>在每次调用  <code>createObjectURL()</code>  方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用  <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1VSTC9yZXZva2VPYmplY3RVUkw=">URL.revokeObjectURL()<i class="fa fa-external-link-alt"></i></span> 方法来释放。</p>
</blockquote>
<p>浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p>
<h2 id="FileReader-的-readAsDataURL"><a href="#FileReader-的-readAsDataURL" class="headerlink" title="FileReader 的 readAsDataURL"></a>FileReader 的 readAsDataURL</h2><blockquote>
<p>readAsDataURL 方法会读取指定的 Blob 或 File 对象。读取操作完成的时候，readyState 会变成已完成 DONE，并触发 loadend 事件，同时 result 属性将包含一个 data:URL 格式的字符串（base64 编码）以表示所读取文件的内容。</p>
</blockquote>
<p>还是上一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useFileReaderPreivewFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">from</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    ulEle.<span class="title function_">appendChild</span>(li)</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">      img.<span class="property">height</span> = <span class="number">100</span></span><br><span class="line">      img.<span class="property">width</span> = <span class="number">100</span></span><br><span class="line">      img.<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">      li.<span class="title function_">appendChild</span>(img)</span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的效果:</p>
<p><img data-src="/blog/./%E5%85%B3%E4%BA%8EcreateObjectURL/2.png" alt="效果图"></p>
<p>来一张终极图：</p>
<p><img data-src="/blog/./%E5%85%B3%E4%BA%8EcreateObjectURL/3.jpg" alt="data_url.jpg"></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>关于vue的mixin</title>
    <url>/blog/%E5%85%B3%E4%BA%8Evue%E7%9A%84mixin/</url>
    <content><![CDATA[<h2 id="vue的mixin"><a href="#vue的mixin" class="headerlink" title="vue的mixin"></a>vue的mixin</h2><p>当有多个组件写了多个同样的语句时，可以使用vue的mixin机制<br>创建一个utils&#x2F;mixin.js文件，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  mapGetters,</span><br><span class="line">  mapActions</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bookMixin = &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bookName&#x27;</span>, <span class="string">&#x27;bookCover&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;setBookName&#x27;</span>, <span class="string">&#x27;setBookCover&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>接下来就可以在组件内这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; bookMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;utils/mixin&#x27;</span></span><br><span class="line">  <span class="attr">mixins</span>:[bookMixin]</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这样可以将vuex的内容在一处增加，多处复用。</p>
<p>mapActions是写到methods里的，这样就可以替换这种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原来写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;setBookName&#x27;</span>,<span class="variable language_">this</span>.<span class="property">bookName</span>)</span><br><span class="line"><span class="comment">// 优雅写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setBookName</span>(<span class="variable language_">this</span>.<span class="property">bookName</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>关于中间件</title>
    <url>/blog/%E5%85%B3%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<p>使用 node 构建 web 应用时，并不单单响应一个简单的 hello world，在一个实际的业务中，我们也许会做这些：</p>
<ul>
<li>请求方法的判断。</li>
<li>URL 的路径解析。</li>
<li>URL 中查询字符串解析。</li>
<li>Cookie 的解析。</li>
<li>Basic 认证。</li>
<li>表单数据的解析。</li>
<li>任意格式文件的上传处理。</li>
</ul>
<span id="more"></span>
<p>这样一个完整的项目中需要处理很多的细节，当然你也可以都写在一起，但这样代码的耦合程度太高了，而且以后维护起来也令人头大。</p>
<p>为此引入**中间件（middleware）**来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。</p>
<p>理解中间件的最简单的方式是实现一个基础的中间件模式，一个中间件其实就是一个函数。</p>
<p>一个简单的中间件模式需要一个 use 方法来进行中间件的注册，需要一个 run 来执行这些注册的中间件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="attr">fns</span>: [],</span><br><span class="line">  <span class="title function_">callback</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === idx) <span class="title function_">fn</span>(ctx, next)</span><br><span class="line">    &#125;)</span><br><span class="line">    index === <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="property">length</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">callback</span>(ctx)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用一下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">name</span> = <span class="string">&quot;ranxiu&quot;</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">gender</span> = <span class="string">&quot;girl&quot;</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">run</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">// 打印：&#123;name:&quot;ranxiu&quot;,gender:&quot;girl&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>关于 run 函数还有更加优雅的写法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">ctx, stack</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> middleware = stack.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">if</span> (middleware) &#123;</span><br><span class="line">      <span class="title function_">middleware</span>(ctx, next) <span class="comment">// 递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看看 koa-compose 的中间件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="comment">// 提前判断中间件类型,防止后续错误</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(middleware))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Middleware stack must be an array!&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="comment">// 中间件必须为函数类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Middleware must be composed of functions!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 采用闭包将索引缓存,来实现调用计数</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="comment">// 防止next()方法重复调用</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;next() called multiple times&quot;</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 包装next()返回值为Promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个字：优雅。有时不得不感慨人和人的差距有时比人和狗的差距还大。</p>
<p>拿这个 🌰 来说：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms || <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">const</span> stack = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Middleware&lt;T&gt; = (context: T, next: Koa.Next) =&gt; any;</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="title function_">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="title function_">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="title function_">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">compose</span>(stack)(&#123;&#125;)</span><br><span class="line"><span class="comment">// arr = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>

<p>当 i 为 3 时，</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = middleware[i] <span class="comment">//fn=undefined</span></span><br><span class="line"><span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line"><span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>() <span class="comment">//!fn为true</span></span><br></pre></td></tr></table></figure>

<p>直接返回 resolve，之后就执行 next()后面的函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">stack.<span class="title function_">push</span>(<span class="title function_">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>执行完后返回第二个 next() 后面继续往下执行，知道所有的中间件执行完毕。</p>
<p>这便是众人皆知的“洋葱模型”。你也可以选择只添加前置的处理，就是 await next()前面的操作</p>
<p>，或者后面的处理。</p>
<p>每个中间件足够的小而美，职责单一，同时多个中间件又具备良好的逻辑拓展性和可组合性，并且易于测试。这个设计模式真是太“漂亮”了。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化方法</title>
    <url>/blog/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="按需做事-不提前做"><a href="#按需做事-不提前做" class="headerlink" title="按需做事-不提前做"></a>按需做事-不提前做</h2><p>按需做事，即在代码中计算和取值应该在需要的地方进行，而不是提前进行。这是因为如果在逻辑判断之前就进行计算，而后面的逻辑判断没有进入，那么这段代码就会白白消耗时间，从而降低了代码的效率。因此，按需做事是一种更加高效的编程方式。</p>
<p>在函数中，有时我们会提前获取或计算所有属性，但是如果后面的逻辑判断没有用到这些属性，那么这部分计算就是无效的，浪费了时间和资源。因此，我们应该尽可能地按需获取和计算属性，以提高代码的效率和性能。此外，我们还可以通过使用缓存等技术来避免重复计算，从而进一步提高代码的效率。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = obj.<span class="property">a</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="title function_">slowFn</span>();</span><br><span class="line"><span class="keyword">if</span> (xxxx) &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (xxx) &#123;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="V8-优化机制"><a href="#V8-优化机制" class="headerlink" title="V8 优化机制"></a>V8 优化机制</h3><ol>
<li>脚本流 边加载边解析</li>
<li>字节码缓存 多个页面使用相同解析后的字节码会缓存</li>
<li>懒解析 函数不用会先不解析</li>
</ol>
<h3 id="函数解析优化"><a href="#函数解析优化" class="headerlink" title="函数解析优化"></a>函数解析优化</h3><p>懒解析 vs 饥饿解析</p>
<p>饥饿解析 使用 一对 ‘()’ .</p>
<h3 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h3><ol>
<li>以相同顺序初始化对象成员，避免隐藏类的调整</li>
<li>实例化后避免添加新的属性 像这样 person.age &#x3D; 17</li>
<li>尽量使用 Array 代替 array-like 对象</li>
<li>避免读取超过数组的长度</li>
<li>避免元素类型的转换</li>
</ol>
<h3 id="HTML-优化"><a href="#HTML-优化" class="headerlink" title="HTML 优化"></a>HTML 优化</h3><ol>
<li>减少 iframes 的使用</li>
<li>压缩空白符</li>
<li>避免节点深层级嵌套</li>
<li>CSS&amp;Javascript 尽量使用外链</li>
<li>删除元素默认属性</li>
</ol>
<p>ul &gt; li 可以不写闭合</p>
<h3 id="CSS-优化"><a href="#CSS-优化" class="headerlink" title="CSS 优化"></a>CSS 优化</h3><ol>
<li>降低 CSS 对渲染的阻塞</li>
<li>利用 GPU 完成动画</li>
<li>contain：layout 开发者和浏览器沟通的一个属性，告诉浏览器只影响当前盒子</li>
<li>使用 font-display 属性</li>
</ol>
<h2 id="webpack-构建优化"><a href="#webpack-构建优化" class="headerlink" title="webpack 构建优化"></a>webpack 构建优化</h2><h3 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h3><ul>
<li>上下文未用到的代码（dead code）</li>
<li>基于 ES6 import export</li>
<li>package.json 中配置 sideEffects ：有些代码有副作用可能不想打包时去掉，可以配置这个属性</li>
<li>注意 Babel 默认配置的影响 会转换 ES6 的语法，可能导致上面基于 ES6 的 shaking 失效，可以配置 modules: false</li>
</ul>
<h3 id="JS-压缩"><a href="#JS-压缩" class="headerlink" title="JS 压缩"></a>JS 压缩</h3><ul>
<li>webpack4 引入的 uglifyjs-webpack-plugin</li>
<li>支持 ES6 的 terser-webpack-plugin</li>
</ul>
<h3 id="作用域提升（scope-hoisting）"><a href="#作用域提升（scope-hoisting）" class="headerlink" title="作用域提升（scope hoisting）"></a>作用域提升（scope hoisting）</h3><p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/image.png" alt="image">​</p>
<p>默认是开启的</p>
<ul>
<li>代码体积减小</li>
<li>提高执行效率</li>
<li>Babel 的 modules 也要设置成 hoist</li>
</ul>
<h3 id="Babel7-优化配置"><a href="#Babel7-优化配置" class="headerlink" title="Babel7 优化配置"></a>Babel7 优化配置</h3><ul>
<li>在需要的地方引入 polyfill</li>
<li>辅助函数按需引入 useBuiltIns: usage</li>
<li>根据目标浏览器按需转换代码</li>
</ul>
<h3 id="Webpack-依赖优化"><a href="#Webpack-依赖优化" class="headerlink" title="Webpack 依赖优化"></a>Webpack 依赖优化</h3><h4 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS9jb25maWd1cmF0aW9uL21vZHVsZS8jbW9kdWxlbm9wYXJzZQ==">noParse<i class="fa fa-external-link-alt"></i></span></h4><ul>
<li>提高构建速度</li>
<li>直接通知 webpack 忽略较大的库</li>
<li>被忽略的库不能有 import、require、define 的引入方式，就是不能是模块化的</li>
</ul>
<h4 id="DllPlugin-动态链接库"><a href="#DllPlugin-动态链接库" class="headerlink" title="DllPlugin- 动态链接库"></a>DllPlugin- 动态链接库</h4><ul>
<li>避免打包时对不变的库重复构建</li>
<li>提高构建速度</li>
<li>针对开发环境</li>
</ul>
<p>‍</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.config.js</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].dll.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dll&quot;</span>),</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&quot;[name]&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugin</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;[name]&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dll/[name].manifest.json&quot;</span>) <span class="comment">// 描述文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在 config 文件直接引用描述文件</p>
<h3 id="代码拆分-（code-splitting"><a href="#代码拆分-（code-splitting" class="headerlink" title="代码拆分 （code splitting)"></a>代码拆分 （code splitting)</h3><ul>
<li>把单个 bundle 文件拆分成几个小的 bundles&#x2F;chunks</li>
<li>缩短首屏加载时间</li>
<li>手工定义入口</li>
<li>splitChunks 提取公共代码，拆分业务代码和第三方库</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">            <span class="attr">vendor</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">common</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/[\\/]src[\\/]/</span>,</span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>动态加载</li>
</ul>
<h3 id="基于-webpack-的资源压缩（minification）"><a href="#基于-webpack-的资源压缩（minification）" class="headerlink" title="基于 webpack 的资源压缩（minification）"></a>基于 webpack 的资源压缩（minification）</h3><ul>
<li>Terser</li>
<li>mini-css-extract-plugin 压缩 css</li>
<li>HtmlWebpackPlugin- 压缩 html</li>
</ul>
<h3 id="基于-webpack-的资源持久化缓存"><a href="#基于-webpack-的资源持久化缓存" class="headerlink" title="基于 webpack 的资源持久化缓存"></a>基于 webpack 的资源持久化缓存</h3><ul>
<li>每个打包的资源文件有唯一的 hash 值</li>
<li>修改后只有受影响的文件 hash 变化</li>
<li>充分利用浏览器缓存</li>
</ul>
<h3 id="基于-webpack-应用大小监测与分析"><a href="#基于-webpack-应用大小监测与分析" class="headerlink" title="基于 webpack 应用大小监测与分析"></a>基于 webpack 应用大小监测与分析</h3><ul>
<li>stats 分析与可视化图</li>
<li>webpack-bundle-analyzer 体积分析 或者 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc291cmNlLW1hcC1leHBsb3Jlcg==">source-map-explorer<i class="fa fa-external-link-alt"></i></span> 可以直接显示大小和占比，需要生成 sourcemap</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3BlZWQtbWVhc3VyZS13ZWJwYWNrLXBsdWdpbg==">speed-measure-webpack-plugin<i class="fa fa-external-link-alt"></i></span> 速度分析，可以检测使用的插件效率如何</li>
</ul>
<h3 id="React-按需加载"><a href="#React-按需加载" class="headerlink" title="React 按需加载"></a>React 按需加载</h3><ul>
<li>React Router 基于 webpack 动态引入</li>
<li>使用 Reloadable 高级组件</li>
</ul>
<h2 id="传输优化"><a href="#传输优化" class="headerlink" title="传输优化"></a>传输优化</h2><h3 id="Gzip"><a href="#Gzip" class="headerlink" title="Gzip"></a>Gzip</h3><ul>
<li><p>gzip_comp_level 压缩级别，越高压缩比越大也越耗性能</p>
</li>
<li><p>gzip_min_length 当返回内容大于此值时才会使用 gzip 进行压缩</p>
</li>
<li><p>gzip_types 设置需要压缩的 MIME 类型,如果不在设置类型范围内的请求不进行压缩</p>
</li>
<li><p>对传输资源进行体积压缩，可达 90%</p>
</li>
</ul>
<h3 id="Keep-Alive"><a href="#Keep-Alive" class="headerlink" title="Keep Alive"></a>Keep Alive</h3><ul>
<li>keeplive_timeout 0 不启用</li>
<li>keepalive_requests 设置一个 keep-alive 连接上可以服务的请求的最大数量，当最大请求数量达到时，连接被关闭。默认是 100</li>
</ul>
<h3 id="Http-缓存"><a href="#Http-缓存" class="headerlink" title="Http 缓存"></a>Http 缓存</h3><ul>
<li>Cache-Control&#x2F;Expires</li>
<li>Last-Modified + If-Modified-Since</li>
<li>Etag+ If-None-Match</li>
</ul>
<h3 id="Service-Workers"><a href="#Service-Workers" class="headerlink" title="Service Workers"></a>Service Workers</h3><ul>
<li>加速重复访问</li>
<li>离线支持</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/image2.png" alt="image">​</p>
<p>离线的时候是从 service worker 拿资源</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>延长了首屏时间，但是页面总加载时间减少</li>
<li>兼容性</li>
<li>只能在 localhost 或 https 下使用</li>
</ul>
<h3 id="Http2"><a href="#Http2" class="headerlink" title="Http2"></a>Http2</h3><ul>
<li>二进制传输</li>
<li>请求响应多路复用</li>
<li>Server push</li>
<li>适合较高请求量</li>
</ul>
<p>本地开发时，如果提示不安全网站，可以直接键盘输入 “thisisunsafe”</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/image3.png" alt="image">​​</p>
<h2 id="服务端渲染-SSR"><a href="#服务端渲染-SSR" class="headerlink" title="服务端渲染 SSR"></a>服务端渲染 SSR</h2><ul>
<li>加速首屏加载</li>
<li>更好的 SEO</li>
</ul>
<h4 id="什么时候用-SSR"><a href="#什么时候用-SSR" class="headerlink" title="什么时候用 SSR"></a>什么时候用 SSR</h4><ul>
<li>架构- 大型、动态页面、面向公众</li>
<li>搜索引擎排名很重要</li>
</ul>
<p>‍</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>前端路由</title>
    <url>/blog/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<p>URL 是由几个部分组成：</p>
<p>​<code>protocol: // hostname:port / pathname ? query # hash</code>​</p>
<p>路由模块需要实现的功能就是 —— 解析 URL 中的 pathname，根据不同的路径将请求分配给相应的模块去处理。</p>
<p>一个简单的路由是一个类，它的方法能够返回不同的拦截切面，这样的类叫做 HTTP <strong>服务中间件</strong>​**（Middleware）**。具体实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Router类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@rule：路径规则</span></span><br><span class="line"><span class="comment">@pathname：路径名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">rule, pathname</span>) &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  解析规则，比如：/test/:course/:lecture</span></span><br><span class="line"><span class="comment">  paraMatched = [&#x27;/test/:course/:lecture&#x27;, &#x27;:course&#x27;, &#x27;:lecture&#x27;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">const</span> paraMatched = rule.<span class="title function_">match</span>(<span class="regexp">/:[^/]+/g</span>);</span><br><span class="line">  <span class="keyword">const</span> ruleExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;rule.replace(/:[^/]+/g, <span class="string">&quot;([^/]+)&quot;</span>)&#125;</span>$`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  解析真正的路径，比如：/test/123/abc</span></span><br><span class="line"><span class="comment">  ruleMatched = [&#x27;/test/123/abs&#x27;, &#x27;123&#x27;, &#x27;abs&#x27;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">const</span> ruleMatched = pathname.<span class="title function_">match</span>(ruleExp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  将规则和路径拼接为对象：</span></span><br><span class="line"><span class="comment">  ret = &#123;course: 123, lecture: abc&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (ruleMatched) &#123;</span><br><span class="line">    <span class="keyword">const</span> ret = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (paraMatched) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paraMatched.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        ret[paraMatched[i].<span class="title function_">slice</span>(<span class="number">1</span>)] = ruleMatched[i + <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@method: GET/POST/PUT/DELETE</span></span><br><span class="line"><span class="comment">@rule: 路径规则，比如：test/:course/:lecture</span></span><br><span class="line"><span class="comment">@aspect: 拦截函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">route</span>(<span class="params">method, rule, aspect</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> req = ctx.<span class="property">req</span>;</span><br><span class="line">    <span class="keyword">if</span> (!ctx.<span class="property">url</span>) ctx.<span class="property">url</span> = url.<span class="title function_">parse</span>(<span class="string">`http://<span class="subst">$&#123;req.headers.host&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> checked = <span class="title function_">check</span>(rule, ctx.<span class="property">url</span>.<span class="property">pathname</span>); <span class="comment">// 根据路径规则解析路径</span></span><br><span class="line">    <span class="keyword">if</span> (!ctx.<span class="property">route</span> &amp;&amp; (method === <span class="string">&quot;*&quot;</span> || req.<span class="property">method</span> === method) &amp;&amp; !!checked) &#123;</span><br><span class="line">      ctx.<span class="property">route</span> = checked;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">aspect</span>(ctx, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果路径与路由规则不匹配，则跳过当前拦截切面，执行下一个拦截切面</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">base = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">baseURL</span> = base;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">rule, aspect</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">route</span>(<span class="string">&quot;GET&quot;</span>, path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">baseURL</span>, rule), aspect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">post</span>(<span class="params">rule, aspect</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">route</span>(<span class="string">&quot;POST&quot;</span>, path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">baseURL</span>, rule), aspect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">rule, aspect</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">route</span>(<span class="string">&quot;PUT&quot;</span>, path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">baseURL</span>, rule), aspect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">rule, aspect</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">route</span>(<span class="string">&quot;DELETE&quot;</span>, path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">baseURL</span>, rule), aspect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">all</span>(<span class="params">rule, aspect</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">route</span>(<span class="string">&quot;*&quot;</span>, path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">baseURL</span>, rule), aspect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Router</span>;</span><br></pre></td></tr></table></figure>

<p>可以这样使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Server</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/server&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/middleware/router&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(&#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">9090</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  router.<span class="title function_">all</span>(<span class="string">&quot;/test/:course/:lecture&quot;</span>, <span class="title function_">async</span> (&#123; route, res &#125;, next) =&gt; &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    res.<span class="property">body</span> = route;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  router.<span class="title function_">all</span>(<span class="string">&quot;.*&quot;</span>, <span class="title function_">async</span> (&#123; req, res &#125;, next) =&gt; &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    res.<span class="property">body</span> = <span class="string">&quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>前端调试通关</title>
    <url>/blog/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/</url>
    <content><![CDATA[<h2 id="各类调试工具原理"><a href="#各类调试工具原理" class="headerlink" title="各类调试工具原理"></a>各类调试工具原理</h2><h3 id="Chrome-DevTools-原理"><a href="#Chrome-DevTools-原理" class="headerlink" title="Chrome DevTools 原理"></a>Chrome DevTools 原理</h3><p>Chrome DevTools 分为两部分，backend 和 frontend：</p>
<ul>
<li>backend 和 Chrome 集成，负责把 Chrome 的网页运行时状态通过调试协议暴露出来。</li>
<li>frontend 是独立的，负责对接调试协议，做 UI 的展示和交互。</li>
</ul>
<p>两者之间的调试协议叫做 Chrome DevTools Protocol，简称 CDP。</p>
<p>传输协议数据的方式叫做信道（message channel）。</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221128081629-khjm1ho.png" alt="image">​</p>
<h3 id="VSCode-Debugger-原理"><a href="#VSCode-Debugger-原理" class="headerlink" title="VSCode Debugger 原理"></a>VSCode Debugger 原理</h3><p>VSCode Debugger 的原理和 Chrome DevTools 差不多，也是分为 frontend、backend、调试协议这几部分，只不过它多了一层适配器协议。</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221128081659-j79jxzk.png" alt="image">​</p>
<p>因为 VSCode 不是 JS 专用编辑器呀，它可能用来调试 Python 代码、Rust 代码等等，自然不能和某一种语言的调试协议深度耦合，所以多了一个适配器层。</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221128081713-aj7ngpn.png" alt="image">​</p>
<h3 id="Vue-React-DevTools"><a href="#Vue-React-DevTools" class="headerlink" title="Vue&#x2F;React DevTools"></a>Vue&#x2F;React DevTools</h3><p>Chrome 插件中可以访问网页的 DOM 的部分叫做 Content Script，随页面启动而生效，可以写一些操作 DOM 的逻辑。还有一部分是后台运行的，叫做 Background，浏览器启动就生效了，生命周期比较长，可以做一些常驻的逻辑。如果是扩展 DevTools 的 Chrome 插件，那还有一部分 DevTools Page，是在 DevTools 里显示的页面。</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221128081929-s9wfwba.png" alt="image">​</p>
<p>Content Script 部分可以操作 DOM，可以监听 DOM Event。</p>
<p>Backgroud 部分可以访问 extension api，可以和 Content Script 还有 DevTools Page 通信。</p>
<p>DevTools Page 部分可以访问 devtools api，可以向当前 window 注入 JS 执行。</p>
<p><strong>frontend、backend、调试协议、信道，这是调试工具的四要素。</strong></p>
<p>不过，不同的调试工具都会有不同的设计，比如 VSCode Debugger 为了跨语言复用，多了一层 Debugger Adapter，React DevTools 有独立的 electron 应用，用自定义调试协议，可以调试 React Native 代码。</p>
<p>‍</p>
<h3 id="使用-vscode-调试-chrome"><a href="#使用-vscode-调试-chrome" class="headerlink" title="使用 vscode 调试 chrome"></a>使用 vscode 调试 chrome</h3><ol>
<li><p>打开项目目录，创建 .vscode&#x2F;launch.json 文件：<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075017-vwleyz3.png" alt="image">​</p>
</li>
<li><p>点击右下角的 Add Configuration… 按钮，选择 Chrome: Launch<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075037-46nz4a3.png" alt="image">​</p>
</li>
<li><p>把访问的 url 改为开发服务器启动的地址：<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075051-9q3k4vd.png" alt="image">​</p>
</li>
<li><p>然后进入 Debug 窗口，点击启动：<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075112-qt6kf7w.png" alt="image">​</p>
</li>
<li><p>在代码打个断点，然后点击 <img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/net-img-437daa8d0a9d44fca3e3041ca0581725~tplv-k3u1fbpfcp-zoom-in-crop-ma-20221129075142-zv8q8sx.awebp">刷新：<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075159-qvcbj6q.png" alt="image"></p>
</li>
<li><p><img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075215-72053ta.png" alt="image">​</p>
</li>
<li><p>想访问 this 的某个属性，可以在 Debug Console 里输入 this 看下它的值，然后再来写代码：<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20221129075245-wsumjko.png" alt="image">​</p>
</li>
</ol>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<h3 id="Vscode-Snippets"><a href="#Vscode-Snippets" class="headerlink" title="Vscode Snippets"></a>Vscode Snippets</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li>指定光标位置：$x</li>
<li>多光标编辑：$x $x</li>
<li>指定 placeholder 文本：${x:placeholder}</li>
<li>指定多选值：${x|aaa,bbb|}</li>
<li>取变量：$VariableName <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvdXNlcmRlZmluZWRzbmlwcGV0cyNfdmFyaWFibGVz">vscode 变量<i class="fa fa-external-link-alt"></i></span></li>
<li>对变量做转换：${VariableName&#x2F;正则&#x2F;替换的文本&#x2F;}</li>
</ul>
<p>‍</p>
<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jbGF1ZGlvcHJvLmdpdGh1Yi5pby9yZWFjdC1maWJlci12cy1zdGFjay1kZW1vL2ZpYmVyLmh0bWw=" title="fiber测试">fiber 测试页面<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Main-主线程"><a href="#Main-主线程" class="headerlink" title="Main 主线程"></a>Main 主线程</h3><p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212091321-e22i48e.png" alt="image">​</p>
<p>灰色的是宏任务，橙色的是浏览器内部的 js，紫色的是 reflow、repaint， 绿色的是渲染。</p>
<p>其它的是用户执行的 js。</p>
<p>放大后可以看到先执行的 requestAnimationFrame 的回调，然后是回流重绘，最后是渲染。</p>
<p>​​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212092433-jf3bjj2.png" alt="image">​​</p>
<p>而且这种任务是每 13.3ms 执行一次，因为我的电脑是 75hz 的刷新率，1000 &#x2F; 75 &#x3D; 13.3 ms。如果一个任务执行时间超长，比如 50 多 ms，那它就相当于垮了好几帧，就会发生卡顿掉帧，因为阻塞了渲染的宏任务执行。</p>
<p><strong>性能优化就是为了优化长的宏任务</strong></p>
<p>长任务会标红</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212095258-35r8acm.png" alt="image">​</p>
<ol>
<li><p>requestIdleCallback 回调是宏任务</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212093440-xhgyi0m.png" alt="image">​</p>
</li>
<li><p>垃圾回收也是</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212093544-2xaapy4.png" alt="image"></p>
</li>
<li><p>定时器也是</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212094337-eh1rw1p.png" alt="image"></p>
</li>
<li><p>执行 script</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212094940-ihui8n2.png" alt="image">​</p>
</li>
<li><p>parse Html</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212095153-wxunefm.png" alt="image"></p>
</li>
<li><p>micro tasks 是 task 的一部分</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212095824-nq6fa83.png" alt="image">​</p>
</li>
</ol>
<p>rAF 调用栈末尾还有个 requestAnimationFrame 的调用，是浏览器把下次 rAF 回调加入 Event Loop。</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212093742-uxv12uk.png" alt="image"></p>
<p>在一帧里面，先执行 rAF，然后再执行 rIC。</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212094054-b0dlr1z.png" alt="image">​</p>
<p>这种很长的看着像是递归</p>
<p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212100346-sasr3ti.png" alt="image">​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212100525-ad0cpqt.png" alt="image">​​</p>
<h3 id="Frames"><a href="#Frames" class="headerlink" title="Frames"></a>Frames</h3><p>​<img data-src="/blog/./%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3/image-20230212100947-x5qyfdv.png" alt="image">​</p>
<ul>
<li>白色：没有变化</li>
<li>绿色：按预期及时渲染</li>
<li>黄色：浏览器尽最大努力及时呈现至少一些视觉更新，比如滚动了但主线程没空</li>
<li>红色：掉帧，无法在合理的时间内渲染帧，比如：<code>scroll</code>​，<code>resize</code> ​ 事件触发过于频繁,浏览器来不及处理导致在下一个事件被触发之前无法完成</li>
</ul>
<p>‍</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>前端错误监控</title>
    <url>/blog/%E5%89%8D%E7%AB%AF%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="常见错误类型"><a href="#常见错误类型" class="headerlink" title="常见错误类型"></a>常见错误类型</h2><table>
<thead>
<tr>
<th>错误</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>SyntaxError</td>
<td>解析时发生语法错误</td>
<td>const x</td>
</tr>
<tr>
<td>TypeError</td>
<td>值不是所期待的类型</td>
<td>const person &#x3D; 1; person.name</td>
</tr>
<tr>
<td>ReferenceError</td>
<td>引用未声明的变量</td>
<td>x</td>
</tr>
<tr>
<td>RangeError</td>
<td>一个值不在其所允许的范围中</td>
<td>new Array(-1)</td>
</tr>
<tr>
<td>ResourceError</td>
<td>资源加载错误</td>
<td>new Image().src &#x3D; ‘&#x2F;remote&#x2F;null.jpg’</td>
</tr>
<tr>
<td>HttpError</td>
<td>http 请求错误</td>
<td>fetch(‘&#x2F;remote&#x2F;null’)</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="如何捕获错误"><a href="#如何捕获错误" class="headerlink" title="如何捕获错误"></a>如何捕获错误</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try&#x2F;catch"></a>try&#x2F;catch</h3><p>能够捕获常规运行时错误，语法错误和异步错误无法捕获</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规运行时错误，可以捕获 ✅</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法错误，不能捕获 ❌</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> notdefined,</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步错误，不能捕获 ❌</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a>window.onerror</h3><blockquote>
<p>混合事件 GlobalEventHandlers 的 onerror 属性是用于处理 error 的事件<br>Error 事件的事件处理程序，在各种目标对象的不同类型错误被触发：</p>
</blockquote>
<blockquote>
<ul>
<li>当 JavaScript 运行时错误（包括语法错误）发生时，window 会触发一个 ErrorEvent 接口的 error 事件，并执行 window.onerror()。</li>
<li>当一项资源（如&lt;img&gt;或&lt;script&gt;）加载失败，加载资源的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 onerror() 处理函数。这些 error 事件不会向上冒泡到 window，不过（至少在 Firefox 中）能被单一的 window.addEventListener 捕获。</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>函数参数：</p>
<ul>
<li>message：错误信息（字符串）。可用于 HTML onerror&#x3D;””处理程序中的 event。</li>
<li>source：发生错误的脚本 URL（字符串）</li>
<li>lineno：发生错误的行号（数字）</li>
<li>colno：发生错误的列号（数字）</li>
<li>error：Error 对象（对象）</li>
</ul>
<p>若该函数返回 true，则阻止执行默认事件处理函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规运行时错误，可以捕获 ✅</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法错误，不能捕获 ❌</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> notdefined,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步错误，可以捕获 ✅</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源错误，不能捕获 ❌</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://unknown/image/null.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<h3 id="window-addEventListener"><a href="#window-addEventListener" class="headerlink" title="window.addEventListener"></a>window.addEventListener</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 图片、script、css加载错误，都能被捕获 ✅</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;error&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://unknown/image/null.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unknown/foundnull.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unknown/foundnull.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// new Image错误，不能捕获 ❌</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;error&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span> = <span class="string">&quot;https://unknown/image/null.png&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// fetch错误，不能捕获 ❌</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;error&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(<span class="string">&quot;https://unknown/test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="异步错误"><a href="#异步错误" class="headerlink" title="异步错误"></a>异步错误</h3><p>如果使用 try&#x2F;catch 能捕获 await 的错误<br>普通 Promise 错误 使用 catch</p>
<h3 id="全局捕获错误-unhandledrejection"><a href="#全局捕获错误-unhandledrejection" class="headerlink" title="全局捕获错误 - unhandledrejection"></a>全局捕获错误 - unhandledrejection</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局统一处理Promise</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;unhandledrejection&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, e)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://unknown/test&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-的错误"><a href="#Vue-的错误" class="headerlink" title="Vue 的错误"></a>Vue 的错误</h3><p>vue 的错误会被 vue 自动捕获，并且抛给 Vue.config.errorHandler。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局捕获Vue错误，直接扔出给onerror处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React-错误"><a href="#React-错误" class="headerlink" title="React 错误"></a>React 错误</h3><p>react 通过 componentDidCatch，声明一个错误边界的组件</p>
<h2 id="数据上报接口"><a href="#数据上报接口" class="headerlink" title="数据上报接口"></a>数据上报接口</h2><p>使用 1*1 像素的 gif 图片进行上报，有以下几点好处</p>
<ul>
<li>不会阻塞页面渲染</li>
<li>图片天然跨域</li>
<li>不会携带 Cookie</li>
<li>不需等待服务器返回数据</li>
<li>gif 图片所需流量最小</li>
</ul>
<p>但数据太大，最好还是用 post</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>四种移除事件监听的方式</title>
    <url>/blog/%E5%9B%9B%E7%A7%8D%E7%A7%BB%E9%99%A4%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在运行时清理代码是构建高效、可预测应用程序的必不可少的部分。在 JavaScript 中，合理管理事件监听器，在不再需要监听事件的时候将它们移除是必要的。</p>
<p>用下面代码进行实验 ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;button&quot;</span>&gt;<span class="title class_">Do</span> <span class="title class_">Something</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>使用 Chrome getEventListeners() 函数，您将看到只有一个监听器附加到该元素：</p>
<p>​<img data-src="/blog/./%E5%9B%9B%E7%A7%8D%E7%A7%BB%E9%99%A4%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E7%9A%84%E6%96%B9%E5%BC%8F/image-20230829073526-tmciycl.png" alt="image">​</p>
<h3 id="使用-removeEventListener"><a href="#使用-removeEventListener" class="headerlink" title="使用 removeEventListener"></a>使用 removeEventListener</h3><p>​<code>removeEventListener</code>​ 方法接受三个参数：要移除的监听器类型、该监听器的回调函数以及一个选项对象。</p>
<p>但是棘手之处在于：这些参数必须和设置监听器时使用的参数完全匹配，包括相同的回调引用。否则<code>removeEventListener()</code>​ 将不起作用。<br>鉴于此，以下操作将是完全无效的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>尽管移除监听的回调看起来与最初绑定的回调完全相同，但它们并不是相同的引用。解决此问题的方法是将回调函数设置为变量，并在<code>.addEventListener()</code>​ 和 <code>.removeEventListener()</code>​ 中使用它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myCallback</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, myCallback);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, myCallback);</span><br></pre></td></tr></table></figure>

<p>或者，对于特定的场景，您还可以使用在函数内部使用函数名来删除监听器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> <span class="title function_">myCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, myCallback);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用-addEventListener-的-once-选项"><a href="#使用-addEventListener-的-once-选项" class="headerlink" title="使用 addEventListener 的 once 选项"></a>使用 addEventListener 的 once 选项</h3><p>​<code>addEventListener()</code>​ 方法的第二个对象参数有一个选项：<code>once</code>​ 选项，可以用来设置在仅打算使用一次的情况下自行清除事件绑定。它的使用和听起来一样简单，如果将其设置为 <code>true</code>​，则监听器在第一次被调用后会自动被移除：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;clicked!&#x27;</span></span><br><span class="line">button.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// No more listeners!</span></span><br><span class="line"><span class="title function_">getEventListeners</span>(button); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>即使使用匿名函数，这种方法也是有效的，你的监听器只会被调用一次。</p>
<h3 id="克隆和替换节点"><a href="#克隆和替换节点" class="headerlink" title="克隆和替换节点"></a>克隆和替换节点</h3><p>有时，你可能不知道给定节点上的所有活动监听器，但你想要将它们全部移除。在这种情况下，可以克隆整个节点并用该克隆节点替换自身。使用 .cloneNode() 方法，通过 <code>.addEventListener()</code>​ 附加的任何监听器都不会被保留，从而获得一个干净的节点。</p>
<p>在客户端 JavaScript 的石器时代，您会看到通过查询父节点，并替换特定子节点以进行此操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">button.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(button.<span class="title function_">cloneNode</span>(<span class="literal">true</span>), button);</span><br></pre></td></tr></table></figure>

<p>但在现代浏览器中，可以使用 <code>.replaceWith()</code>​ 进行简化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">button.<span class="title function_">replaceWith</span>(button.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<p>这里唯一可能让你困扰的是，行内监听器会被保留，这意味着 <code>onclick</code>​ 事件仍会被触发：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;console.log(&#x27;clicked!&#x27;)&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Do</span> <span class="title class_">Something</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>总的来说，如果你需要删除任何类型的监听器，这是一个不错的选择。它的缺点是目的不明显，有些讨巧。</p>
<h3 id="使用-AbortController"><a href="#使用-AbortController" class="headerlink" title="使用 AbortController()"></a>使用 AbortController()</h3><p>​<code>.addEventListener()</code>​ 可以配置一个信号，用于命令式地中止&#x2F;删除监听器。当相应的控制器调用 <code>.abort()</code>​ 时，监听器会被移除：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; signal &#125; = controller;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>), &#123; signal &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove the listener!</span></span><br><span class="line">controller.<span class="title function_">abort</span>();</span><br></pre></td></tr></table></figure>

<p>上面的方法是一种更明了的方式，可以在不需要处理 <code>.removeEventListener()</code>​ 的潜在陷阱的情况下移除监听器。还有一个更大的优势：您可以使用一个信号一次性删除多个监听器，使用匿名函数也可以：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; signal &#125; = controller;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>), &#123; signal &#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resized!&quot;</span>), &#123; signal &#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pressed!&quot;</span>), &#123; signal &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove all listeners at once:</span></span><br><span class="line">controller.<span class="title function_">abort</span>();</span><br></pre></td></tr></table></figure>

<p>唯一需要考虑的是浏览器支持。</p>
<p>​<img data-src="/blog/./%E5%9B%9B%E7%A7%8D%E7%A7%BB%E9%99%A4%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E7%9A%84%E6%96%B9%E5%BC%8F/image-20230829074246-jjh16nz.png" alt="image">​</p>
<h3 id="我应该选择哪种方法？"><a href="#我应该选择哪种方法？" class="headerlink" title="我应该选择哪种方法？"></a>我应该选择哪种方法？</h3><p>一般来说，“视情况而定”。不过我可能会这样选择：</p>
<ul>
<li>如果回调函数分配给变量，并且在添加监听器的地方容易访问，请使用 <code>.removeEventListener()</code>​。</li>
<li>如果只需要触发一次回调，请在 <code>.addEventListener()</code>​ 中使用 <code>once</code>​ 选项。</li>
<li>如果需要在一次操作中无差别地删除所有的监听器，请使用克隆替换方法。</li>
<li>如果有一系列监听器希望命令式地一次性删除，请使用 <code>AbortController()</code>​</li>
</ul>
<p>原文地址：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFjYXJ0aHVyLm1lL3Bvc3RzL29wdGlvbnMtZm9yLXJlbW92aW5nLWV2ZW50LWxpc3RlbmVycw==" title="You’ve Got Options for Removing Event Listeners">You’ve Got Options for Removing Event Listeners<i class="fa fa-external-link-alt"></i></span></p>
<p>‍</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>原型与原型链</title>
    <url>/blog/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p><strong>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</strong></p>
<p>每个函数都有一个属性，就是 prototype，函数的 prototype 指向了一个对象，这个对象就是调用该构造函数创建的<strong>实例</strong>的原型。</p>
<p>可以这么理解：每一个 JavaScript 对象(null 除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型“继承”属性。实例 person 与 Person.prototype 之间的关系通过 <strong>proto</strong> 连接这是每一个 JavaScript 对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p>
<p><img data-src="/blog/./%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/image1.png" alt="原型"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/blog/./%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/image2.png" alt="原型"></p>
<p>每个原型都有一个 <strong>constructor</strong> 属性指向关联的构造函数。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/blog/./%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/image3.png" alt="原型"></p>
<p>原型也是一个对象，那就可以通过 Object 构造函数生成，所以</p>
<p><img data-src="/blog/./%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/image4.png" alt="原型"></p>
<p>Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。</p>
<h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><p><img data-src="/blog/./%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/image5.png" alt="原型"></p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">constructor</span> === <span class="title class_">Person</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">person.<span class="property">constructor</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span></span><br></pre></td></tr></table></figure>

<h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter&#x2F;setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>
<h3 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h3><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的 JavaScript》中的话，就是：</p>
<p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>
<h3 id="Function-proto-Function-prototype"><a href="#Function-proto-Function-prototype" class="headerlink" title="Function.proto &#x3D;&#x3D;&#x3D; Function.prototype"></a>Function.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Function.prototype</h3><p>Function 作为一个内置对象，是运行前就已经存在的东西，所以根本就不会根据自己生成自己，就是先有的 Function，然后实现上把原型指向了 Function.prototype，但是我们不能倒过来推测因为 Function.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Function.prototype，所以 Function 调用了自己生成了自己。</p>
<h3 id="完整的原型链"><a href="#完整的原型链" class="headerlink" title="完整的原型链"></a>完整的原型链</h3><p><img data-src="/blog/./%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/image6.png" alt="原型"></p>
<p><strong>什么是原型链？</strong></p>
<p>当对象查找一个属性的时候，如果没有在自身找到，那么就会查找自身的原型，如果原型还没有找到，那么会继续查找原型的原型，直到找到 Object.prototype 的原型时，此时原型为 null，查找停止。 这种通过<strong>原型链接的逐级向上的查找链</strong>被称为原型链</p>
<p><strong>什么是原型继承？</strong></p>
<p>一个对象可以使用另外一个对象的属性或者方法，就称之为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。</p>
<p>使用 <strong>Object.prototype.toString.call()</strong> 判断数据类型</p>
<p><strong>proto</strong> 与内部的 <strong>[[Prototype]] 不一样</strong>。</p>
<p><strong>proto</strong> 是 <strong>[[Prototype]]</strong> 的 getter&#x2F;setter。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>如何实现全局图片监控</title>
    <url>/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%9B%BE%E7%89%87%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h3 id="为什么要做这个？"><a href="#为什么要做这个？" class="headerlink" title="为什么要做这个？"></a>为什么要做这个？</h3><ol>
<li>图片过大占用 CDN 资源</li>
<li>拖慢加载速度，体验不好</li>
</ol>
<h3 id="要怎么做？"><a href="#要怎么做？" class="headerlink" title="要怎么做？"></a>要怎么做？</h3><span id="more"></span>

<p>PerformanceObserver 可以获取已缓存图片的 entry 信息，多个相同请求 entry 只会报告一次，能够拿到 decodedBodySize。但在跨域且未使用 <code>Timing-Allow-Origin</code> ​HTTP 相应标头情况下，这个值为 0 。</p>
<p>主要拿到图片的原始宽高和图片显示的实际宽高，超出一定比例，图片大小超过一定阈值（比如 1M），基本可以判断图片不太符合规范，上报该数据。上报的数据可以是图片的 DOM 路径，用于定位排查。</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>针对不同情况，有不同的监控手段</p>
<p>一些工具函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getNodeKey</span> = (<span class="params"><span class="attr">src</span>: <span class="built_in">string</span>, <span class="attr">path</span>: <span class="built_in">string</span>[]</span>) =&gt; <span class="string">`<span class="subst">$&#123;src&#125;</span>::<span class="subst">$&#123;path.join(<span class="string">&#x27;/&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNodeName</span> = (<span class="params"><span class="attr">node</span>: <span class="title class_">Node</span></span>) =&gt; node.<span class="property">nodeName</span>?.<span class="title function_">toLowerCase</span>() ?? <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isElement = (<span class="attr">node</span>: <span class="built_in">any</span>): node is <span class="title class_">Element</span> =&gt; !!(node.<span class="property">tagName</span> &amp;&amp; node.<span class="property">classList</span>);</span><br><span class="line"><span class="keyword">const</span> isHTMLImageElement = (<span class="attr">node</span>: <span class="title class_">Node</span>): node is <span class="title class_">HTMLImageElement</span> =&gt; <span class="title function_">getNodeName</span>(node) === <span class="string">&#x27;img&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getNodePath = (<span class="attr">node</span>: <span class="title class_">Node</span>, <span class="attr">path</span>: <span class="built_in">string</span>[] = []): <span class="built_in">string</span>[] =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isElement</span>(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> nodeName = <span class="title function_">getNodeName</span>(node);</span><br><span class="line">        <span class="keyword">const</span> &#123; id &#125; = node;</span><br><span class="line">        <span class="keyword">const</span> &#123; className &#125; = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;nodeName&#125;</span><span class="subst">$&#123;id ? <span class="string">`#<span class="subst">$&#123;id&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span><span class="subst">$&#123;className ? <span class="string">`.<span class="subst">$&#123;className&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>;</span><br><span class="line">        path.<span class="title function_">push</span>(key);</span><br><span class="line">        <span class="keyword">return</span> node.<span class="property">parentElement</span> ? <span class="title function_">getNodePath</span>(node.<span class="property">parentElement</span>, path) : path;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>利用 PerformanceObserver 获取图片大小</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> perfWatchSet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;body&#x27;</span>]);</span><br><span class="line"><span class="keyword">const</span> perfObserver = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(</span><br><span class="line">    <span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> entries = list.<span class="title function_">getEntries</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>, len = entries.<span class="property">length</span>; index &lt; len; index++) &#123;</span><br><span class="line">           <span class="keyword">const</span> entry = entries[index] <span class="keyword">as</span> <span class="title class_">PerformanceResourceTiming</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123; initiatorType, encodedBodySize, decodedBodySize, transferSize, name &#125; = entry;</span><br><span class="line">        <span class="keyword">const</span> src = <span class="title function_">filterImgSrc</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (perfWatchSet.<span class="title function_">has</span>(initiatorType) &amp;&amp; src &amp;&amp; decodedBodySize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        perfEntries.<span class="title function_">set</span>(src, entry);</span><br><span class="line">        <span class="keyword">if</span> (transferSize === <span class="number">0</span> &amp;&amp; encodedBodySize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器默认是250，不设置大点前面的会被丢弃，监听不到</span></span><br><span class="line">performance.<span class="title function_">setResourceTimingBufferSize</span>(<span class="number">2000</span>);</span><br><span class="line">perfObserver.<span class="title function_">observe</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;resource&#x27;</span>, <span class="attr">buffered</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="场景一：在-HTML-DOM-上的-标签"><a href="#场景一：在-HTML-DOM-上的-标签" class="headerlink" title="场景一：在 HTML DOM 上的 &lt;img&gt; 标签"></a>场景一：在 HTML DOM 上的 <code>&lt;img&gt;</code> 标签</h4><p>分为初始处理和增量处理</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 工具函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getImgSrc</span> = (<span class="params"><span class="attr">node</span>: <span class="title class_">HTMLImageElement</span></span>) =&gt; node.<span class="property">src</span>;</span><br><span class="line"><span class="keyword">const</span> getBgSrc = (<span class="attr">node</span>: <span class="title class_">Element</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; backgroundImage &#125; = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(node);</span><br><span class="line">     <span class="keyword">return</span> ((backgroundImage &amp;&amp; regex4BgImage.<span class="title function_">exec</span>(backgroundImage)) || [])[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleNode</span> = (<span class="params"><span class="attr">node</span>: <span class="title class_">Node</span></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 处理 img.src</span></span><br><span class="line">      <span class="title function_">handleImageElements</span>(node);</span><br><span class="line">      <span class="comment">// 处理backgorundimg style</span></span><br><span class="line">      <span class="title function_">handleBgImageElements</span>(node);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitedNodeSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>&lt;<span class="title class_">Node</span>&gt;();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleNodes</span> = (<span class="params"><span class="attr">nodeList</span>: <span class="title class_">ArrayLike</span>&lt;<span class="title class_">Node</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>, len = nodeList.<span class="property">length</span>; index &lt; len; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = nodeList[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visitedNodeSet.<span class="title function_">has</span>(node)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visitedNodeSet.<span class="title function_">add</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isElement</span>(node)) &#123;</span><br><span class="line">            <span class="title function_">handleNodes</span>(node.<span class="property">children</span>);</span><br><span class="line">            <span class="title function_">handleNode</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、初始处理</span></span><br><span class="line"><span class="title function_">handleNodes</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、增量处理</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(</span><br><span class="line"><span class="function">(<span class="params"><span class="attr">mutations</span>: <span class="title class_">MutationRecord</span>[]</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>, len = mutations.<span class="property">length</span>; index &lt; len; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> mutation = mutations[index];</span><br><span class="line">        <span class="title function_">handleNodes</span>(mutation.<span class="property">addedNodes</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>, &#123; <span class="attr">attributes</span>: <span class="literal">false</span>, <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>还有 img.src 属性变化的情况，也需要用 MutationObserver 监听处理一下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略处理流程</span></span><br><span class="line"><span class="keyword">const</span> imgSrcObserver = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleImageElements</span> = (<span class="params"><span class="attr">node</span>: <span class="title class_">Node</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isHTMLImageElement</span>(node)) &#123;</span><br><span class="line">            <span class="keyword">const</span> src = <span class="title function_">filterImgSrc</span>(<span class="title function_">getImgSrc</span>(node));</span><br><span class="line">            <span class="keyword">if</span> (src) &#123;</span><br><span class="line">                imgByImageElement.<span class="title function_">push</span>(&#123; node, src &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            imgSrcObserver.<span class="title function_">observe</span>(node, &#123; <span class="attr">attributeFilter</span>: [<span class="string">&#x27;src&#x27;</span>] &#125;);</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="场景二：添加到-HTML-DOM-上的有-backgroundImage-的标签"><a href="#场景二：添加到-HTML-DOM-上的有-backgroundImage-的标签" class="headerlink" title="场景二：添加到 HTML DOM 上的有 backgroundImage 的标签"></a>场景二：添加到 HTML DOM 上的有 backgroundImage 的标签</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleBgImageElements</span> = (<span class="params"><span class="attr">node</span>: <span class="title class_">Node</span></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isElement</span>(node)) &#123;</span><br><span class="line">         <span class="keyword">const</span> src = <span class="title function_">filterImgSrc</span>(<span class="title function_">getBgSrc</span>(node));</span><br><span class="line">         <span class="keyword">if</span> (src) &#123;</span><br><span class="line">            imgByBgImageElement.<span class="title function_">push</span>(&#123; src, node &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码参考上面场景一</span></span><br></pre></td></tr></table></figure>

<h4 id="场景三-使用-API-动态创建"><a href="#场景三-使用-API-动态创建" class="headerlink" title="场景三: 使用 API 动态创建"></a>场景三: 使用 API 动态创建</h4><p>拦截并重写 原生方法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oCreateElement = <span class="variable language_">document</span>.<span class="property">createElement</span>.<span class="title function_">bind</span>(<span class="variable language_">document</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">createElement</span> = <span class="keyword">function</span> (<span class="params"><span class="attr">tagName</span>: <span class="built_in">string</span>, <span class="attr">options</span>?: <span class="title class_">ElementCreationOptions</span></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newElement = <span class="title function_">oCreateElement</span>(tagName, options);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isHTMLImageElement</span>(newElement)) &#123;</span><br><span class="line">                <span class="title function_">handleLoaded</span>(newElement, <span class="string">&#x27;createElement&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> newElement;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oCreateElementNS = <span class="variable language_">document</span>.<span class="property">createElementNS</span>.<span class="title function_">bind</span>(<span class="variable language_">document</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">createElementNS</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">            <span class="attr">namespaceURI</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">            <span class="attr">qualifiedName</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">            <span class="attr">options</span>?: <span class="title class_">ElementCreationOptions</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newElement = <span class="title function_">oCreateElementNS</span>(namespaceURI, qualifiedName, options);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isHTMLImageElement</span>(newElement)) &#123;</span><br><span class="line">                <span class="title function_">handleLoaded</span>(newElement, <span class="string">&#x27;createElementNS&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> newElement;</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="variable language_">document</span>.<span class="property">createElementNS</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oImage = <span class="variable language_">window</span>.<span class="property">Image</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Image</span> = <span class="keyword">function</span> (<span class="params"><span class="attr">width</span>?: <span class="built_in">number</span>, <span class="attr">height</span>?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">newImage</span>: <span class="title class_">HTMLImageElement</span> = <span class="keyword">new</span> <span class="title function_">oImage</span>(width, height);</span><br><span class="line">            <span class="title function_">handleLoaded</span>(newImage, <span class="string">&#x27;Image&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> newImage;</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">Image</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Preserve static properties</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">window</span>.<span class="property">Image</span>, oImage);</span><br></pre></td></tr></table></figure>

<p>handleLoaded</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">handleLoaded</span>(<span class="params"><span class="attr">node</span>: <span class="title class_">HTMLImageElement</span>, <span class="attr">sourceFrom</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">loadListener</span> = (<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) =&gt; &#123;</span><br><span class="line">          <span class="title function_">onLoaded</span>(event, sourceFrom);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">errorListener</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, loadListener, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, errorListener, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是基本框架，还有一些上报逻辑，缓存清理逻辑需要补充，完成后便可以得到一个全局的图片监控。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>因为全局的监听图片的使用，拿图片的 width、height 还有 backgroundImage 等信息时会强制触发重排重绘，会影响到加载和操作性能，所以不能大批量的全部监控，可以每天挑选部分高性能用户开启，降低影响面。</p>
<p>‍</p>
<p>‍</p>
]]></content>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>如何缩小js代码</title>
    <url>/blog/%E5%A6%82%E4%BD%95%E7%BC%A9%E5%B0%8Fjs%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>相较于简写形式带来的代码体积减小，易于理解的代码书写方式能显著提升可维护性，因此在选择简写方案时需谨慎。</p>
<h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">&#125;, <span class="number">100</span>); <span class="comment">// before</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&#x27;console.log(&quot;z&quot;)&#x27;</span>, <span class="number">100</span>); <span class="comment">// after</span></span><br></pre></td></tr></table></figure>

<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;; <span class="comment">// Object literal</span></span><br><span class="line"><span class="keyword">var</span> a = []; <span class="comment">// New Array</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/.*/</span>; <span class="comment">// New Regex</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;&quot;</span> + <span class="number">0</span>; <span class="comment">// Convert to string</span></span><br><span class="line"><span class="keyword">var</span> n = +<span class="string">&quot;7&quot;</span>; <span class="comment">// Convert to number (7)</span></span><br><span class="line"><span class="keyword">var</span> b = !!b; <span class="comment">// Converts to a boolean</span></span><br><span class="line"><span class="keyword">var</span> f = ~~<span class="number">3.434</span>; <span class="comment">// Same as Math.floor(3.434)</span></span><br><span class="line"><span class="keyword">var</span> g = -~<span class="number">3.434</span>; <span class="comment">// Same as Math.ceil(3.434)</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5e3</span>; <span class="comment">// Same as 5000</span></span><br><span class="line"><span class="keyword">var</span> c = c || z; <span class="comment">// Coalesce, if c is null then set it to z.</span></span><br><span class="line"><span class="string">&quot;abcde&quot;</span>[<span class="number">1</span>]; <span class="comment">// charAt shorthand, results in &#x27;b&#x27;.</span></span><br><span class="line">+<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// Shorthand for (new Date()).getTime();</span></span><br><span class="line"><span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// Even shorter shorthand for the above</span></span><br><span class="line"><span class="keyword">var</span> a = x ? y : z; <span class="comment">// Ternary operator, short for: var a;if(x)&#123;a=y;&#125;else&#123;a=z;&#125;</span></span><br><span class="line">!<span class="number">0</span>; <span class="comment">// Shorthand for true</span></span><br><span class="line">!<span class="number">1</span>; <span class="comment">// Shorthand for false</span></span><br><span class="line"><span class="keyword">void</span> <span class="number">0</span>; <span class="comment">// Shorthand for undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;30&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;10&quot;</span>;</span><br><span class="line">c = a + b; <span class="comment">// failure</span></span><br><span class="line">c = <span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b); <span class="comment">// too long</span></span><br><span class="line"></span><br><span class="line">c = -(-a - b); <span class="comment">// try these</span></span><br><span class="line">c = ~~a + ~~b;</span><br><span class="line">c = +a + +b;</span><br><span class="line">c = a - -b;</span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hasAnF = <span class="string">&quot;This sentence has an f.&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;f&quot;</span>) &gt;= <span class="number">0</span>; <span class="comment">// before</span></span><br><span class="line">hasAnF = ~<span class="string">&quot;This sentence has an f.&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;f&quot;</span>); <span class="comment">// after</span></span><br><span class="line"><span class="comment">// ==================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(ndx) == -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Char not found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line"><span class="keyword">if</span> (~str.<span class="title function_">indexOf</span>(ndx)) &#123;</span><br><span class="line">  <span class="comment">// Char not found.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"></span><br><span class="line">rand10 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>); <span class="comment">// before</span></span><br><span class="line">rand10 = <span class="number">0</span> | (<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>); <span class="comment">// after</span></span><br><span class="line"><span class="comment">// ~ 优先级低于|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(a / <span class="number">2</span>); <span class="comment">// before</span></span><br><span class="line">a &gt;&gt; <span class="number">1</span>; <span class="comment">// after</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(a / <span class="number">4</span>); <span class="comment">// before</span></span><br><span class="line">a &gt;&gt; <span class="number">2</span>; <span class="comment">// after</span></span><br><span class="line"><span class="comment">//==========================================</span></span><br><span class="line"></span><br><span class="line">million = <span class="number">1000000</span>; <span class="comment">// before</span></span><br><span class="line">million = (<span class="number">1e6</span>)[ <span class="comment">// after</span></span><br><span class="line">  <span class="comment">//==========================================</span></span><br><span class="line"></span><br><span class="line">  (<span class="title class_">Infinity</span>, -<span class="title class_">Infinity</span>)</span><br><span class="line">][(<span class="number">1</span> / <span class="number">0</span>, -<span class="number">1</span> / <span class="number">0</span>)]; <span class="comment">// before // after</span></span><br><span class="line"><span class="comment">//=============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isFinite</span>(a))</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> / a)</span><br><span class="line">    <span class="comment">// before</span></span><br><span class="line">    <span class="comment">// after</span></span><br><span class="line">    <span class="comment">//==========================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用当前日期生成随机整数</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Date</span>() &amp; <span class="number">1</span>; <span class="comment">// Equivalent to Math.random()&lt;0.5</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>() % <span class="number">1337</span>; <span class="comment">// Equivalent to Math.floor(Math.random()*1337))</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span> | (<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>); <span class="comment">// before</span></span><br><span class="line">i = <span class="keyword">new</span> <span class="title class_">Date</span>() % <span class="number">100</span>; <span class="comment">// after</span></span><br><span class="line"><span class="comment">//=============================================</span></span><br></pre></td></tr></table></figure>

<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">html = <span class="string">&quot;&lt;a href=&#x27;&quot;</span> + url + <span class="string">&quot;&#x27;&gt;&quot;</span> + text + <span class="string">&quot;&lt;/a&gt;&quot;</span>; <span class="comment">// before</span></span><br><span class="line">html = text.<span class="title function_">link</span>(url); <span class="comment">// after</span></span><br><span class="line"><span class="comment">//&#x27;abc&#x27;.link(&#x27;www.baidu.com&#x27;) -&gt; &#x27;&lt;a href=&quot;www.baidu.com&quot;&gt;abc&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="comment">//==================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="string">&quot;myString&quot;</span>.<span class="title function_">charAt</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line"><span class="string">&quot;myString&quot;</span>[<span class="number">0</span>]; <span class="comment">// returns &#x27;m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Pretty useful for RGB declarations.</span></span><br><span class="line"><span class="string">&quot;rgb(&quot;</span> + (x + <span class="number">8</span>) + <span class="string">&quot;,&quot;</span> + (y - <span class="number">20</span>) + <span class="string">&quot;,&quot;</span> + z + <span class="string">&quot;)&quot;</span>; <span class="comment">// before</span></span><br><span class="line"><span class="string">&quot;rgb(&quot;</span> + [x + <span class="number">8</span>, y - <span class="number">20</span>, z] + <span class="string">&quot;)&quot;</span>; <span class="comment">// after</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;rgb(255,&quot;</span> + (y - <span class="number">20</span>) + <span class="string">&quot;,0)&quot;</span>; <span class="comment">// before</span></span><br><span class="line"><span class="string">&quot;rgb(255,&quot;</span> + [y - <span class="number">20</span>, <span class="string">&quot;0)&quot;</span>]; <span class="comment">// after</span></span><br></pre></td></tr></table></figure>

<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="keyword">var</span> big;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  big = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  big = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line"><span class="keyword">var</span> big = (x &gt; <span class="number">10</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> big = (x &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//further nested examples</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>,</span><br><span class="line">big = (x &gt; <span class="number">10</span>) ? <span class="string">&#x27;greater 10&#x27;</span> : (x &lt; <span class="number">5</span>) ? <span class="string">&#x27;less 5&#x27;</span> : <span class="string">&#x27;between 5 and 10&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(big); <span class="comment">// &quot;less 5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>,</span><br><span class="line">big = &#123; <span class="attr">true</span>: x &gt; <span class="number">10</span>, <span class="literal">false</span> : x&lt; =<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(big); <span class="comment">// &quot;Object &#123;true=true, false=false&#125;&quot;</span></span><br><span class="line"><span class="comment">//==================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="keyword">if</span>(myvar == <span class="number">1</span> || myvar == <span class="number">5</span> || myvar == <span class="number">7</span> || myvar == <span class="number">22</span>)  &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ya&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line">([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">22</span>].<span class="title function_">indexOf</span>(myvar) !=- <span class="number">1</span>) &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;yeah baby!&#x27;</span>);</span><br><span class="line"><span class="comment">//=====================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">&#x27;aligator&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">aligatorBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;parrot&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">parrotBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;dolphin&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">dolphinBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;bulldog&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">bulldogBehavior</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid animal &#x27;</span> + type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line"><span class="keyword">var</span> types = &#123;</span><br><span class="line">  <span class="attr">aligator</span>: aligatorBehavior,</span><br><span class="line">  <span class="attr">parrot</span>: parrotBehavior,</span><br><span class="line">  <span class="attr">dolphin</span>: dolphinBehavior,</span><br><span class="line">  <span class="attr">bulldog</span>: bulldogBehavior</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = types[type];</span><br><span class="line">(!func) &amp;&amp; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid animal &#x27;</span> + type); <span class="title function_">func</span>();</span><br><span class="line"><span class="comment">//========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Longhand</span></span><br><span class="line"><span class="keyword">if</span> (x == a) &#123;</span><br><span class="line"> x = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == b) &#123;</span><br><span class="line"> x = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x = 1, a = 1, b = 2</span></span><br><span class="line"><span class="comment">// 1st run: x = 2</span></span><br><span class="line"><span class="comment">// 2nd run: x = 1</span></span><br><span class="line"><span class="comment">// 3rd run: x = 2</span></span><br><span class="line"><span class="comment">// 4th run: x = 1</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line">x = a ^ b ^ x;</span><br><span class="line"><span class="comment">//====================================================</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>如果一个npm包不满足需求，如何修改其部分功能</title>
    <url>/blog/%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E4%B8%8D%E6%BB%A1%E8%B6%B3%E9%9C%80%E6%B1%82%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%85%B6%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="一、使用-Fork"><a href="#一、使用-Fork" class="headerlink" title="一、使用 Fork"></a>一、使用 Fork</h3><p>Fork 源代码，通过在 GitHub 上或其他托管平台上 Fork 第三方包的源代码库。对其源代码进行修改，修改完成后将修改后的包发布到 npm 上。如果你不希望它是公开的，那么你可以搭建一个 npm 的私有包。直接将项目中的包切换我们自己发布的包。</p>
<span id="more"></span>

<h3 id="二、提交-PR"><a href="#二、提交-PR" class="headerlink" title="二、提交 PR"></a>二、提交 PR</h3><p>如果你认为你的修改对其他用户也有帮助，可以向原始包的维护者提交 Pull Request（PR）。如果 PR 被接受并合并，那么你就可以直接使用未来版本的官方包。</p>
<h3 id="三、本地修改和补丁"><a href="#三、本地修改和补丁" class="headerlink" title="三、本地修改和补丁"></a>三、本地修改和补丁</h3><p>这种方式可以避免直接修改 node_modules 目录下的代码，也确保了项目的其他成员或在其他环境中部署时能够应用同样的修改。</p>
<ol>
<li><p>在本地对包进行修改：直接在项目的 node_modules 目录下找到并修改对应的第三方包文件。</p>
</li>
<li><p>创建补丁文件：一旦完成了必要的修改，你可以使用 git diff 或其他差异比较工具来生成一个补丁文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &gt; patches/third-party-package.patch</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用补丁：为了自动化地在每次安装依赖时应用这个补丁，你可以使用如 patch-package 这样的工具。patch-package 允许在 node_modules 中的包上应用补丁，并且这些补丁可以和你的项目代码一起被版本控制。</p>
</li>
</ol>
<p>安装 patch-pacakge ，然后，将应用补丁的步骤添加到 package.json 中的 scripts 字段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;postinstall&quot;</span>: <span class="string">&quot;patch-package&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，每次运行 npm install 时，postinstall 脚本都会执行，自动应用保存在 patches&#x2F;目录下的所有补丁。</p>
<h4 id="生成补丁"><a href="#生成补丁" class="headerlink" title="生成补丁"></a>生成补丁</h4><p>假设我们要要修改 axios 包，那么我们可以直接在项目的 node_modules&#x2F;axios 目录下对 axios 进行必要的修改。这些修改可以是任何东西，从简单的配置更改到函数逻辑的更新。</p>
<p>使用 patch-package 生成一个补丁文件。这个命令会比较你对 node_modules 中 axios 的修改，并将这些修改保存为一个补丁文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx patch-package axios</span><br></pre></td></tr></table></figure>

<p>执行这个命令后，patch-package 会在项目的根目录下创建一个 patches 目录（如果还没有的话），并在里面生成一个名为 axios+ 版本号.patch 的文件，其中版本号是你项目中使用的 axios 的版本。</p>
<h3 id="四、包装三方包"><a href="#四、包装三方包" class="headerlink" title="四、包装三方包"></a>四、包装三方包</h3><p>创建一个新的文件（如 third-party-wrapper.js），在这个文件中导入第三方包，并实现需要修改或扩展的功能。</p>
<p>在项目中的其他部分，你可以直接引入并使用这个封装模块，而不是直接使用第三方包。这样，你就可以利用修改后的功能，同时避免了对第三方包的直接修改。</p>
<p>这种方法的好处是，它提供了一个清晰的隔离层，使得第三方包的任何更新不会直接影响到你对功能的定制。同时，这也使得维护和升级第三方包变得更加容易，因为你只需要在封装层中做出相应的调整。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上 4 种方式，通常提交 PR 和使用 Fork 是最推荐的，因为它们可以避免维护自定义修改所带来的长期负担。但是由于业务的紧急性，我们也可以选择后两种方式。</p>
<p>‍</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>性能优化的一般性原则</title>
    <url>/blog/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E8%88%AC%E6%80%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="一般性原则"><a href="#一般性原则" class="headerlink" title="一般性原则"></a>一般性原则</h2><h3 id="依据数据而不是凭空猜测"><a href="#依据数据而不是凭空猜测" class="headerlink" title="依据数据而不是凭空猜测"></a>依据数据而不是凭空猜测</h3><p>这是前端性能优化的第一原则，当我们怀疑前端性能有问题的时候，应该通过测试、浏览器开发者工具、性能分析工具来分析出哪里有问题，有的放矢，而不是凭感觉、撞运气。一个前端页面有了性能问题，瓶颈有可能是 JavaScript 执行时间过长，有可能是网络请求过多或请求资源过大，有可能是 DOM 操作频繁导致重排重绘，大方向的定位可以使用浏览器开发者工具的 Performance 面板来定位，针对具体的代码块，可以使用 console.time 和 console.timeEnd 来分析执行时间。</p>
<h3 id="忌过早优化"><a href="#忌过早优化" class="headerlink" title="忌过早优化"></a>忌过早优化</h3><blockquote>
<p>The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.</p>
</blockquote>
<p>我并不十分清楚 Donald Knuth 说出这句名言的上下文环境，但我自己是十分认同这个观念的。在我的工作环境（以及典型的互联网应用开发）与编程模式下，追求的是快速的迭代与试错，过早的优化往往是无用功。而且，过早的优化很容易拍脑袋，优化的点往往不是真正的性能瓶颈。</p>
<h3 id="忌过度优化"><a href="#忌过度优化" class="headerlink" title="忌过度优化"></a>忌过度优化</h3><blockquote>
<p>As performance is part of the specification of a program – a program that is unusably slow is not fit for purpose</p>
</blockquote>
<p>性能优化的目标是追求合适的性价比。</p>
<p>在不同的阶段，我们对系统的性能会有一定的要求，比如吞吐量要达到多少多少。如果达不到这个指标，就需要去优化。如果能满足预期，那么就无需花费时间精力去优化，比如只有几十个人使用的内部系统，就不用按照十万在线的目标去优化。</p>
<p>而且，一些优化方法是“有损”的，可能会对代码的可读性、可维护性有副作用。这个时候，就更不能过度优化。</p>
<h3 id="深入理解业务"><a href="#深入理解业务" class="headerlink" title="深入理解业务"></a>深入理解业务</h3><p>代码是服务于业务的，也许是服务于最终用户，也许是服务于其他程序员。不了解业务，很难理解系统的流程，很难找出系统设计的不足之处。</p>
<h3 id="性能优化是持久战"><a href="#性能优化是持久战" class="headerlink" title="性能优化是持久战"></a>性能优化是持久战</h3><p>当核心业务方向明确之后，就应该开始关注性能问题，当项目上线之后，更应该持续的进行性能检测与优化。</p>
<p>现在的互联网产品，不再是一锤子买卖，在上线之后还需要持续的开发，用户的涌入也会带来性能问题。因此需要自动化的检测性能问题，保持稳定的测试环境，持续的发现并解决性能问题，而不是被动地等到用户的投诉。</p>
<h3 id="选择合适的衡量指标、测试用例、测试环境"><a href="#选择合适的衡量指标、测试用例、测试环境" class="headerlink" title="选择合适的衡量指标、测试用例、测试环境"></a>选择合适的衡量指标、测试用例、测试环境</h3><p>正因为性能优化是一个长期的行为，所以需要固定衡量指标、测试用例、测试环境，这样才能客观反映性能的实际情况，也能展现出优化的效果。</p>
<p>衡量性能有很多指标，比如系统响应时间、系统吞吐量、系统并发量。不同的系统核心指标是不一样的，首先要明确本系统的核心性能诉求，固定测试用例；其次也要兼顾其他指标，不能顾此失彼。</p>
<p>测试环境也很重要，有一次突然发现我们的 QPS 高了许多，但是程序压根儿没优化，查了半天，才发现是换了一个更牛逼的物理机做测试服务器。</p>
<h2 id="性能优化的层次"><a href="#性能优化的层次" class="headerlink" title="性能优化的层次"></a>性能优化的层次</h2><p>可以分为需求阶段，设计阶段，实现阶段；越上层的阶段优化效果越明显，同时也更需要对业务、需求的深入理解。</p>
<h3 id="需求阶段"><a href="#需求阶段" class="headerlink" title="需求阶段"></a>需求阶段</h3><p>程序员的需求可能来自 PM、UI 的业务需求（或者说是功能性需求），也可能来自 Team Leader 的需求。当我们拿到一个需求的时候，首先需要的是思考、讨论需求的合理性，而不是立刻去设计、去编码。</p>
<p>需求是为了解决某个问题，<strong>问题是本质，需求是解决问题的手段</strong>。那么需求是否能否真正的解决问题，程序员也得自己去思考，产品经理（特别是知道一点技术的产品经理）的某个需求可能只是某个问题的解决方案，他认为这个方法可以解决他的问题，于是把解决方案当成了需求，而不是真正的问题。</p>
<p>需求讨论的前提对业务的深入了解，如果不了解业务，根本没法讨论。即使需求已经实现了，当我们发现有性能问题的时候，首先也可以从需求出发。</p>
<p>需求分析对性能优化有什么帮助呢，第一，为了达到同样的目的，解决同样问题，也许可以有性能更优（消耗更小）的办法。这种优化是无损的，即不改变需求本质的同时，又能达到性能优化的效果；第二种情况，有损的优化，即在不明显影响用户的体验，稍微修改需求、放宽条件，就能大大解决性能问题。PM 退步一小步，程序前进一大步。</p>
<p>需求讨论也有助于设计时更具扩展性，应对未来的需求变化。</p>
<h3 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h3><p>高手都是花 80% 时间思考，20% 时间实现；新手写起代码来很快，但后面是无穷无尽的修 bug</p>
<p>设计的概念很宽泛，包括架构设计、技术选型、接口设计等等。架构设计约束了系统的扩展、技术选型决定了代码实现。编程语言、框架都是工具，不同的系统、业务需要选择适当的工具集。如果设计的时候做的不够好，那么后面就很难优化，甚至需要推到重来。</p>
<h3 id="实现阶段"><a href="#实现阶段" class="headerlink" title="实现阶段"></a>实现阶段</h3><p>实现是把功能翻译成代码的过程，这个层面的优化，主要是针对一个调用流程，一个函数，一段代码的优化。各种 profile 工具也主要是在这个阶段生效。除了静态的代码的优化，还有编译时优化，运行时优化。后二者要求就很高了，程序员可控性较弱。</p>
<p>代码层面，造成性能瓶颈的原因通常是高频调用的函数、或者单次消耗非常高的函数、或者二者的结合。</p>
<h2 id="一般性方法"><a href="#一般性方法" class="headerlink" title="一般性方法"></a>一般性方法</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><blockquote>
<p>没有什么性能问题是缓存解决不了的，如果有，那就再加一级缓存</p>
</blockquote>
<p>缓存的本质是加速访问，访问的数据要么是其他数据的副本 – 让数据离用户更近；要么是之前的计算结果 – 避免重复计算.</p>
<p>缓存需要用空间换时间，在缓存空间有限的情况下，需要优秀的置换换算来保证缓存有较高的命中率。</p>
<h3 id="数据的缓存"><a href="#数据的缓存" class="headerlink" title="数据的缓存"></a>数据的缓存</h3><p>这是我们最常见的缓存形式，将数据缓存在离使用者更近的地方。比如操作系统中的 CPU cache、disk cache。对于一个 web 应用，前端会有浏览器缓存，有 CDN，有反向代理提供的静态内容缓存；后端则有本地缓存、分布式缓存。</p>
<p>数据的缓存，很多时候是设计层面的考虑。</p>
<p>对于数据缓存，需要考虑的是缓存一致性问题。对于分布式系统中有强一致性要求的场景，可行的解决办法有 lease，版本号。</p>
<h3 id="计算结果的缓存"><a href="#计算结果的缓存" class="headerlink" title="计算结果的缓存"></a>计算结果的缓存</h3><p>对于消耗较大的计算，可以将计算结果缓存起来，下次直接使用。</p>
<p>我们知道，对递归代码的一个有效优化手段就是缓存中间结果，lookup table，避免了重复计算。python 中的 method cache 就是这种思想.</p>
<p>对于可能重复创建、销毁，且创建销毁代价很大的对象，比如进程、线程，也可以缓存，对应的缓存形式如单例、资源池（连接池、线程池）。</p>
<p>对于计算结果的缓存，也需要考虑缓存失效的情况，对于 pure function，固定的输入有固定的输出，缓存是不会失效的。</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>一个人干不完的活，那就找两个人干。并发既增加了系统的吞吐，又减少了用户的平均等待时间。</p>
<h3 id="惰性"><a href="#惰性" class="headerlink" title="惰性"></a>惰性</h3><p>将计算推迟到必需的时刻，这样很可能避免了多余的计算，甚至根本不用计算。</p>
<p>CopyOnWrite、Dirty flag</p>
<h3 id="批量，合并"><a href="#批量，合并" class="headerlink" title="批量，合并"></a>批量，合并</h3><p>前端开发中经常会有资源的压缩和合并。</p>
<p>当涉及到网络请求的时候，网络传输的时间可能远大于请求的处理时间，因此合并网络请求就很有必要。</p>
<h3 id="更高效的实现"><a href="#更高效的实现" class="headerlink" title="更高效的实现"></a>更高效的实现</h3><p>同一个算法，肯定会有不同的实现，那么就会有不同的性能；有的实现可能是时间换空间，有的实现可能是空间换时间，那么就需要根据自己的实际情况权衡。</p>
<p>程序员都喜欢早轮子，用于练手无可厚非，但在项目中，使用成熟的、经过验证的轮子往往比自己造的轮子性能更好。当然不管使用别人的轮子，还是自己的工具，当出现性能的问题的时候，要么优化它，要么替换掉他。</p>
<h3 id="缩小解空间"><a href="#缩小解空间" class="headerlink" title="缩小解空间"></a>缩小解空间</h3><p>缩小解空间的意思是说，在一个更小的数据范围内进行计算，而不是遍历全部数据。最常见的就是索引，通过索引，能够很快定位数据，对数据库的优化绝大多数时候都是对索引的优化。</p>
<p>如果有本地缓存，那么使用索引也会大大加快访问速度。不过，索引比较适合读多写少的情况，毕竟索引的构建也是需有消耗的。</p>
<h2 id="性能优化与代码质量"><a href="#性能优化与代码质量" class="headerlink" title="性能优化与代码质量"></a>性能优化与代码质量</h2><p>衡量代码质量的标准是可读性、可维护性、可扩展性，但性能优化有可能会违背这些特性，比如为了屏蔽实现细节与使用方式，我们会可能会加入接口层（虚拟层），这样可读性、可维护性、可扩展性会好很多，但是额外增加了一层函数调用，如果这个地方调用频繁，那么也是一笔开销；又如前面提到的 C 扩展，也是会降低可维护性、</p>
<p>这种有损代码质量的优化，应该放到最后，不得已而为之，同时写清楚注释与文档。</p>
<p>为了追求可扩展性，我们经常会引入一些设计模式，如状态模式、策略模式、模板方法、装饰器模式等，但这些模式不一定是性能友好的。所以，为了性能，我们可能写出一些反模式的、定制化的、不那么优雅的代码，这些代码其实是脆弱的，需求的一点点变动，对代码逻辑可能有至关重要的影响，所以还是回到前面所说，不要过早优化，不要过度优化。<br>​</p>
<p>‍</p>
]]></content>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>材质贴图属性介绍</title>
    <url>/blog/%E6%9D%90%E8%B4%A8%E8%B4%B4%E5%9B%BE%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>​<img data-src="/blog/./%E6%9D%90%E8%B4%A8%E8%B4%B4%E5%9B%BE%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/image-20230312140945-ere8b2a.png" alt="image">diffuse&#x2F;base colos&#x2F;albedo颜色贴图： 漫反射可以简单理解成物体表面固有的颜色</p>
<p>reflection&#x2F;specular反射贴图：白色全反射黑色不反射（排除金银铜等金属）</p>
<p>metalness金属度： 纯白金属 黑色电解质</p>
<p>glossiness光泽度： 材质的粗糙程度 白色光滑，黑色粗糙</p>
<p>roughness粗糙度： 与上面相反</p>
<p>normal蓝色法线 用rgb代表xyz三个方向上的位移值，本质改变了光线在材质表面的传播方式，没有产生模型形变， OpenGl（+X, +Y, +Z), DirectX（+X， -Y，+Z）</p>
<p>displacement&#x2F;height置换贴图： 黑色不变，白色凸起</p>
<p>bump凹凸： 与置换相同但只改变光线效果，没有改变模型，使之产生形变</p>
<p>AO环境光遮蔽： 物体相交或者靠近时遮挡附近漫反射光线，前提是发生了置换效果</p>
<ol>
<li>颜色信息（漫反射）</li>
<li>反射信息（反射、光泽度）</li>
<li>高度信息（法线、凹凸、置换）</li>
</ol>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>浅谈SOLID原则在前端的使用</title>
    <url>/blog/%E6%B5%85%E8%B0%88SOLID%E5%8E%9F%E5%88%99%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​<code>SOLID</code>​ 原则是由 <code>Robert C. Martin</code>​ 在 2000 年提出的一套软件开发准则，最初用于面向对象编程（OOP），旨在解决软件开发中的复杂性和维护问题。随着时间推移，它不仅在传统 OOP 语言中广泛应用，也被引入到 JavaScript 和 TypeScript 等现代编程语言和框架中，如 <code>React</code>​ 和 <code>Angular</code>​。</p>
<span id="more"></span>
<p>SOLID 原则包括以下五个方面：</p>
<ol>
<li>单一职责原则（<code>Single Responsibility Principle - SRP</code>​）</li>
<li>开闭原则（<code>Open/Closed Principle - OCP</code>​）</li>
<li>里氏替换原则（<code>Liskov Substitution Principle - LSP</code>​）</li>
<li>接口隔离原则（<code>Interface Segregation Principle - ISP</code>​）</li>
<li>依赖倒置原则（<code>Dependency Inversion Principle - DIP</code>​）</li>
</ol>
<p>在 <code>JavaScript</code>​ 和 <code>TypeScript</code>​ 中，尽管它们是动态语言且不以类为核心，但这些原则可融入组件化和模块化架构，开发者能借此确保代码简洁、可扩展、易维护和测试</p>
<h2 id="一、-单一职责原则-SRP"><a href="#一、-单一职责原则-SRP" class="headerlink" title="一、 单一职责原则 (SRP)"></a>一、 单一职责原则 (SRP)</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>一个类或模块应只有一个发生变化的原因，仅负责一项特定功能。在前端开发中，尤其是在 <code>React</code>​ 等组件化框架中，我们经常会看到组件承担了太多职责——不仅负责 <code>UI</code>​ 渲染，还处理业务逻辑和数据请求。这种情况很容易导致代码难以维护和测试，违反了 <code>SRP</code>​ 原则。</p>
<h3 id="反例-js-react"><a href="#反例-js-react" class="headerlink" title="反例(js-react)"></a>反例(js-react)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfile</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUserData</span>();</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="title function_">setUser</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user?.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此例中，<code>UserProfile</code>​ 组件既负责 <code>UI</code>​ 渲染又负责数据获取，违反 <code>SRP</code>​ 原则，当修改数据获取或界面渲染逻辑时，可能影响组件其他部分，增加维护复杂性。</p>
<h3 id="重构后代码"><a href="#重构后代码" class="headerlink" title="重构后代码"></a>重构后代码</h3><p>为了遵循 <code>SRP</code>​ 原则，我们可以将数据获取逻辑提取到一个自定义的 <code>Hook</code>​ 中，让组件 <code>UserProfile</code>​ 只关注 <code>UI</code>​ 渲染。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义 Hook 用于获取用户数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">      <span class="title function_">setUser</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fetchUserData</span>();</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// UI 组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfile</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useUserData</span>(userId); <span class="comment">// 将数据获取逻辑移到了 Hook 中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user?.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过自定义 <code>Hook</code>​（<code>useUserData</code>​）将数据获取逻辑与 <code>UI</code>​ 逻辑分离，符合 <code>SRP</code>​ 原则，提升了代码的可维护性和复用性。</p>
<h3 id="反例-ts-angular"><a href="#反例-ts-angular" class="headerlink" title="反例(ts-angular)"></a>反例(ts-angular)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUser</span>(<span class="params">userId: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateUserProfile</span>(<span class="params">userId: string, data: any</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新用户信息并处理通知</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">put</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>, data).<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User updated&#x27;</span>);</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Profile updated successfully&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​<code>UserService</code>​ 类承担多个职责，包括获取和更新用户信息以及处理通知，违背 <code>SRP</code>​ 原则，导致维护困难。</p>
<h3 id="重构后代码-1"><a href="#重构后代码-1" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUser</span>(<span class="params">userId: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateUserProfile</span>(<span class="params">userId: string, data: any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">put</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立的通知服务</span></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将通知逻辑分离到一个独立的 <code>NotificationService</code>​ 中，我们遵循了 <code>单一职责原则（SRP）</code>​，将通知逻辑分离到 <code>NotificationService</code>​ 中，遵循 <code>SRP</code>​ 原则，每个类职责明确，带来诸多好处：</p>
<ol>
<li>职责明确，增强可维护性。修改通知方式只需更改 <code>NotificationService</code>​，不影响用户服务其他功能。</li>
<li>提高复用性。<code>NotificationService</code>​ 可在其他服务或组件中复用。</li>
<li>测试更加方便。可单独为 <code>UserService</code>​ 和 <code>NotificationService</code>​ 编写测试。</li>
<li>代码扩展更加灵活。如需更改通知方式，只需修改或扩展 <code>NotificationService</code>​。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// **职责明确，增强可维护性：**修改通知为弹出窗口通知</span></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="title function_">showModal</span>(message);  <span class="comment">// 假设我们有一个 showModal 函数用于展示弹窗</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提高复用性。NotificationService 可在其他服务或组件中复用</span></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private notificationService: NotificationService</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">placeOrder</span>(<span class="params">orderData: any</span>) &#123;</span><br><span class="line">    <span class="comment">// 订单处理逻辑</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">notificationService</span>.<span class="title function_">notify</span>(<span class="string">&#x27;Order placed successfully&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试更加方便。可单独为 UserService 和 NotificationService 编写测试。</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should fetch user data&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> userService = <span class="keyword">new</span> <span class="title class_">UserService</span>(httpClientMock);</span><br><span class="line">  userService.<span class="title function_">getUser</span>(<span class="string">&#x27;1&#x27;</span>).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(data).<span class="title function_">toEqual</span>(mockUserData);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// NotificationService 测试</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should notify the user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> notificationService = <span class="keyword">new</span> <span class="title class_">NotificationService</span>();</span><br><span class="line">  <span class="title function_">spyOn</span>(<span class="variable language_">window</span>, <span class="string">&#x27;alert&#x27;</span>);</span><br><span class="line">  notificationService.<span class="title function_">notify</span>(<span class="string">&#x27;Test message&#x27;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(<span class="variable language_">window</span>.<span class="property">alert</span>).<span class="title function_">toHaveBeenCalledWith</span>(<span class="string">&#x27;Test message&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码扩展更加灵活。如需更改通知方式，只需修改或扩展 NotificationService</span></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailNotificationService</span> <span class="keyword">extends</span> <span class="title class_ inherited__">NotificationService</span> &#123;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="title function_">sendEmail</span>(message);  <span class="comment">// 假设我们有一个 sendEmail 函数发送邮件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、开闭原则（OCP）"><a href="#二、开闭原则（OCP）" class="headerlink" title="二、开闭原则（OCP）"></a>二、开闭原则（OCP）</h2><h3 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h3><p>软件实体应能在不修改模块源代码的情况下扩展其行为，即对扩展开放，对修改封闭。</p>
<h3 id="反例-js-react-1"><a href="#反例-js-react-1" class="headerlink" title="反例(js-react)"></a>反例(js-react)</h3><p>假设我们有一个表单验证函数，它目前工作正常，但未来可能需要添加更多的验证逻辑。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params">values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> errors = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!values.<span class="property">name</span>) &#123;</span><br><span class="line">    errors.<span class="property">name</span> = <span class="string">&quot;Name is required&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!values.<span class="property">email</span>) &#123;</span><br><span class="line">    errors.<span class="property">email</span> = <span class="string">&quot;Email is required&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="regexp">/\S+@\S+\.\S+/</span>.<span class="title function_">test</span>(values.<span class="property">email</span>)) &#123;</span><br><span class="line">    errors.<span class="property">email</span> = <span class="string">&quot;Email is invalid&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​<code>validateForm</code>​ 函数包含所有验证逻辑，添加新验证规则需修改现有代码，违背 <code>OCP</code>​ 原则，增加维护难度和出错风险。</p>
<h3 id="重构后代码-2"><a href="#重构后代码-2" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础验证器接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line">  <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;validate method must be implemented&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体的验证器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequiredValidator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Validator</span> &#123;</span><br><span class="line">  <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value ? <span class="literal">null</span> : <span class="string">&quot;This field is required&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailValidator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Validator</span> &#123;</span><br><span class="line">  <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/\S+@\S+\.\S+/</span>.<span class="title function_">test</span>(value) ? <span class="literal">null</span> : <span class="string">&quot;Email is invalid&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证表单函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params">values, validators</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> errors = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> field <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="keyword">const</span> error = validators[field].<span class="title function_">validate</span>(values[field]);</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      errors[field] = error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> validators = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="keyword">new</span> <span class="title class_">RequiredValidator</span>(),</span><br><span class="line">  <span class="attr">email</span>: <span class="keyword">new</span> <span class="title class_">EmailValidator</span>(),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> errors = <span class="title function_">validateForm</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;invalid email&quot;</span> &#125;, validators);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(errors);</span><br></pre></td></tr></table></figure>

<p>通过将验证逻辑封装到独立的类（如 <code>RequiredValidator</code>​ 和 <code>EmailValidator</code>​）中，我们使得验证器符合 ​**开放&#x2F;封闭原则（OCP）**​。现在，如果需要添加新的验证规则（例如电话号码验证），只需创建一个新的验证器类，而无需修改现有的验证逻辑；换句话说，应该允许在不修改现有核心代码的情况下添加新功能。</p>
<h3 id="反例-ts-angular-1"><a href="#反例-ts-angular-1" class="headerlink" title="反例(ts-angular)"></a>反例(ts-angular)</h3><p>在 <code>Angular</code>​ 中，服务和组件的设计应允许添加新功能，而无需修改核心逻辑。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line">  <span class="title function_">send</span>(<span class="params">type: <span class="string">&#x27;email&#x27;</span> | <span class="string">&#x27;sms&#x27;</span>, message: string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;email&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 发送电子邮件</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;sms&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 发送短信</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>NotificationService</code>​ 类违反了 ​**开放&#x2F;封闭原则（OCP）**​，因为每次需要支持新类型的通知（例如推送通知）时，必须修改 <code>send</code>​ 方法。这不仅会增加维护成本，还容易引发错误，尤其是当代码变得越来越复杂时。</p>
<h3 id="重构后代码-3"><a href="#重构后代码-3" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Notification</span> &#123;</span><br><span class="line">  <span class="title function_">send</span>(<span class="attr">message</span>: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailNotification</span> implements <span class="title class_">Notification</span> &#123;</span><br><span class="line">  <span class="title function_">send</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送电子邮件的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SMSNotification</span> implements <span class="title class_">Notification</span> &#123;</span><br><span class="line">  <span class="title function_">send</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送短信的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private notifications: Notification[]</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">notifications</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">n</span> =&gt;</span> n.<span class="title function_">send</span>(message));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将通知发送逻辑封装到各自独立的类（<code>EmailNotification</code>​ 和 <code>SMSNotification</code>​）中，我们实现了符合 <strong>开放&#x2F;封闭原则（OCP）</strong> 的设计。这个设计的核心思想是，所有新功能（例如新的通知类型）都可以通过创建新的类来扩展，而不需要修改现有的 <code>NotificationService</code>​ 类。好处：对扩展开放，对修改封闭、提高复用性、测试更加简单、增强代码的灵活性与维护性。</p>
<hr>
<h2 id="三、-里氏替换原则-LSP"><a href="#三、-里氏替换原则-LSP" class="headerlink" title="三、 里氏替换原则 (LSP)"></a>三、 里氏替换原则 (LSP)</h2><h3 id="原则-2"><a href="#原则-2" class="headerlink" title="原则"></a>原则</h3><p>子类型必须可以替换其基类型。派生类或组件应该能够替换基类，而不会影响程序的正确性。</p>
<h3 id="反例-js-react-2"><a href="#反例-js-react-2" class="headerlink" title="反例(js-react)"></a>反例(js-react)</h3><p>当使用高阶组件 (<code>HOC</code>​) 或有条件地渲染不同组件时，<code>LSP</code>​ 有助于确保所有组件的行为都可预测。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">&#123; onClick &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LinkButton</span>(<span class="params">&#123; href &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;href&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">Button</span> onClick=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125; /&gt;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">LinkButton</span> <span class="attr">href</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>这里 <code>Button</code> ​和 <code>LinkButton</code> ​不一致，一个用 <code>onClick</code>​，一个用 <code>href</code>​，替换起来比较困难。</p>
<h3 id="重构后代码-4"><a href="#重构后代码-4" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Clickable</span>(<span class="params">&#123; children, onClick &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">&#123; onClick &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Clickable</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Clickable</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LinkButton</span>(<span class="params">&#123; href &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Clickable</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> window.location.href = href&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;href&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Clickable</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，<code>Button</code>​ 和 <code>LinkButton</code>​ 的行为类似，均遵循 <code>LSP</code>​。</p>
<h3 id="反例-ts-angular-2"><a href="#反例-ts-angular-2" class="headerlink" title="反例(ts-angular)"></a>反例(ts-angular)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">protected width: number, protected height: number</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">area</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rectangle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(size, size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setWidth</span>(<span class="params">width: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = width; <span class="comment">// Breaks LSP</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>Square</code>​ 中的 <code>setWidth</code>​ 违反了 <code>LSP</code>​，因为 <code>Square</code>​ 的行为与 <code>Rectangle</code>​ 不同。</p>
<h3 id="重构后代码-5"><a href="#重构后代码-5" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">area</span>(): number &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Method not implemented&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private width: number, private height: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">area</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private size: number</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">area</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span> * <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，<code>Square</code> ​和 <code>Rectangle</code> ​可以相互替代而不违反 LSP。</p>
<hr>
<h2 id="四、接口隔离原则-ISP"><a href="#四、接口隔离原则-ISP" class="headerlink" title="四、接口隔离原则 (ISP)"></a>四、接口隔离原则 (ISP)</h2><h3 id="原则-3"><a href="#原则-3" class="headerlink" title="原则"></a>原则</h3><p>客户端不应被迫依赖他们不使用的接口</p>
<h3 id="反例-js-react-3"><a href="#反例-js-react-3" class="headerlink" title="反例(js-react)"></a>反例(js-react)</h3><p>​<code>React</code>​ 组件有时会收到不必要的 <code>props</code>​，导致代码紧密耦合且庞大。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MultiPurposeComponent</span>(<span class="params">&#123; user, posts, comments &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserProfile</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserPosts</span> <span class="attr">posts</span>=<span class="string">&#123;posts&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserComments</span> <span class="attr">comments</span>=<span class="string">&#123;comments&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，组件依赖于多个 <code>props</code>​，即使它可能并不总是使用它们。</p>
<h3 id="重构后代码-6"><a href="#重构后代码-6" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfileComponent</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">UserProfile</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserPostsComponent</span>(<span class="params">&#123; posts &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">UserPosts</span> <span class="attr">posts</span>=<span class="string">&#123;posts&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserCommentsComponent</span>(<span class="params">&#123; comments &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">UserComments</span> <span class="attr">comments</span>=<span class="string">&#123;comments&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将组件拆分成更小的组件，每个组件仅依赖于它实际使用的数据。</p>
<h3 id="反例-ts-angular-3"><a href="#反例-ts-angular-3" class="headerlink" title="反例(ts-angular)"></a>反例(ts-angular)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Worker</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(): <span class="keyword">void</span>;</span><br><span class="line">  <span class="title function_">eat</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HumanWorker</span> implements <span class="title class_">Worker</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Working&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Eating&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RobotWorker</span> implements <span class="title class_">Worker</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Working&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Robots do not eat&#x27;</span>); <span class="comment">// Violates ISP</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<code>RobotWorker</code> ​被迫实现了不相关的 <code>eat</code> ​方法。</p>
<h3 id="重构后代码-7"><a href="#重构后代码-7" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Worker</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line">interface <span class="title class_">Eater</span> &#123;</span><br><span class="line">  <span class="title function_">eat</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HumanWorker</span> implements <span class="title class_">Worker</span>, <span class="title class_">Eater</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Working&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Eating&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RobotWorker</span> implements <span class="title class_">Worker</span> &#123;</span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Working&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过分离 <code>Worker</code>​ 和 <code>Eater</code>​ 接口，我们确保客户端只依赖于它们所需要的。</p>
<hr>
<h2 id="五、依赖倒置原则-DIP"><a href="#五、依赖倒置原则-DIP" class="headerlink" title="五、依赖倒置原则 (DIP)"></a>五、依赖倒置原则 (DIP)</h2><h3 id="原则-4"><a href="#原则-4" class="headerlink" title="原则"></a>原则</h3><p>高级模块不应依赖于低级模块。两者都应依赖于抽象（例如接口）。</p>
<h3 id="反例-js-react-4"><a href="#反例-js-react-4" class="headerlink" title="反例(js-react)"></a>反例(js-react)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserComponent</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUser</span>(userId).<span class="title function_">then</span>(setUser);</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user?.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<code>UserComponent</code>​ 与 <code>fetchUser</code>​ 函数紧密耦合。</p>
<h3 id="重构后代码-8"><a href="#重构后代码-8" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserComponent</span>(<span class="params">&#123; userId, fetchUserData &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUserData</span>(userId).<span class="title function_">then</span>(setUser);</span><br><span class="line">  &#125;, [userId, fetchUserData]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user?.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line">&lt;<span class="title class_">UserComponent</span> userId=&#123;<span class="number">1</span>&#125; fetchUserData=&#123;fetchUser&#125; /&gt;;</span><br></pre></td></tr></table></figure>

<p>通过将 <code>fetchUserData</code>​ 注入组件，我们可以轻松地交换实现以进行测试或用于不同的用例。</p>
<h3 id="反例-ts-angular-4"><a href="#反例-ts-angular-4" class="headerlink" title="反例(ts-angular)"></a>反例(ts-angular)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUser</span>(<span class="params">userId: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private userService: UserService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loadUser</span>(<span class="params">userId: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">getUser</span>(userId).<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(user));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​<code>UserComponent</code>​ 与 <code>UserService</code>​ 紧密耦合，因此很难替换掉 <code>UserService</code>​。</p>
<h3 id="重构后代码-9"><a href="#重构后代码-9" class="headerlink" title="重构后代码"></a>重构后代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">getUser</span>(<span class="attr">userId</span>: string): <span class="title class_">Observable</span>&lt;<span class="title class_">User</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ApiUserService</span> implements <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUser</span>(<span class="params">userId: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">User</span>&gt;(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private userService: UserService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loadUser</span>(<span class="params">userId: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">getUser</span>(userId).<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(user));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过依赖接口（<code>UserService</code>​），<code>UserComponent</code>​ 现在与 <code>ApiUserService</code>​ 的具体实现分离。</p>
<hr>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>无论是前端的 <code>React</code>​、<code>Angular</code>​ 等框架，还是后端的 <code>Node.js</code>​，<code>SOLID</code>​ 原则都能作为指南，让软件架构更加稳固。<code>SOLID</code>​ 原则能非常有效地确保代码干净、可维护且可扩展，在 <code>JavaScript</code>​ 和 <code>TypeScript</code>​ 框架（如 <code>React</code>​ 和 <code>Angular</code>​）中同样如此。应用这些原则，开发人员能编写灵活且可重复使用的代码，随着需求的发展，这些代码也能轻松扩展和重构。遵循 <code>SOLID</code>​ 原则，能让代码库变得强大，为未来的增长做好准备。</p>
<p>‍</p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器底层运行原理</title>
    <url>/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>垃圾回收算法被分为两种，一个是 Major GC，主要使用了 Mark-Sweep &amp; Mark-Compact 算法，针对的是堆内存中的老生代进行垃圾回收；另外一个是 Minor GC，主要使用了 Scavenger 算法，针对于堆内存中的新生代进行垃圾回收。V8 引擎的新生代内存大小^（ 网传主流说法，没有找到具体的源码，仅做参考。）^ <del>32MB(64 位)、16MB(32 位)</del> ；老生代初始内存大小为 512MB(64 位)、256MB(32 位)，默认配置下最大可以增加到 4GB。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> int kSystemPointerSize = <span class="title function_">sizeof</span>(<span class="keyword">void</span>*); <span class="comment">// 32位 -&gt; 4；64位 -&gt; 8</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> int kHeapLimitMultiplier = kSystemPointerSize / <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老生代初始极值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> size_t kMaxInitialOldGenerationSize = <span class="number">256</span> * <span class="variable constant_">MB</span> * kHeapLimitMultiplier;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> size_t kOldGenerationLowMemory = <span class="number">128</span> * <span class="variable constant_">MB</span> * kHeapLimitMultiplier;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>新生代</strong>(new space)，大多数的对象开始都会被分配在这里，这个区域相对较小但是垃圾回收特别频繁，该区域被分为两半，一半用来分配内存，另一半用于在垃圾回收时将需要保留的对象复制过来。</p>
<ul>
<li>Semi Space，<strong>from space</strong> 和 <strong>to space</strong> 动态更换。</li>
<li>采用<code>Scavenge</code>​ 算法(复制算法)进行垃圾回收。</li>
<li>对象晋升：对象是否经历过一次 Scavenge 算法；To 空间的内存占比是否已经超过 25%。</li>
</ul>
</li>
</ul>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822201830-rf2mxww.png" alt="image">​</p>
<ul>
<li><strong>老生代</strong>(old space)，新生代中的对象在存活一段时间后就会被转移到老生代内存区，相对于新生代该内存区域的垃圾回收频率较低。老生代又分为老生代指针区和老生代数据区，前者包含大多数可能存在指向其他对象的指针的对象，后者只保存原始数据对象，这些对象没有指向其他对象的指针。</li>
<li><strong>大对象区</strong>(large object space)：存放体积超越其他区域大小的对象，每个对象都会有自己的内存，垃圾回收不会移动大对象区。</li>
<li><strong>代码区</strong>(code space)：代码对象，会被分配在这里，唯一拥有执行权限的内存区域。</li>
<li><strong>Map 区</strong>(map space)：存放 Cell 和 Map，每个区域都是存放相同大小的元素，结构简单，可以理解为<strong>隐藏类</strong>。</li>
</ul>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822201842-3eq7iel.png" alt="image">​</p>
<p>JavaScript 在运行时，对象的属性是可以被修改的，这对于 V8 是存在不确定性的。像 C++ 这类静态语言，在编译阶段就确定对象的结构，可以直接通过偏移量来查询目标对象的各项属性值，因此运行效率非常高。V8 对每个对象做出两个假设：</p>
<ul>
<li>对象创建完成后不会添加新的属性。</li>
<li>对象创建完成后不会删除属性。</li>
</ul>
<p>基于上述假设，V8 会给每个对象创建<strong>隐藏类</strong>(Hideen Class)，用于记录该对象的基础布局信息，具体包括：</p>
<ul>
<li>对象的所有属性。</li>
<li>所有属性的相对偏移值。</li>
</ul>
<p>那么当 V8 访问某个对象的某个属性时，就会先去隐藏类中查找该属性相对于该对象的偏移量，也就能去内存中直接取值，从而跳过一系列的查找过程，大大提升 V8 查找对象的属性值的效率。</p>
<p>V8 的每个对象都有 map 属性，该字段指向该对象的隐藏类。当两个对象的结构相同^（ 相同的属性名称；相等的属性个数；一致的属性顺序。）^时，就会复用同一个隐藏类，这样可以减少隐藏类的创建次数以及减少存储空间。而当结构发生变更时，就会重新创建隐藏类。因此在开发过程中，为提高 V8 引擎性能，需要注意以下几点：</p>
<ul>
<li>尽量使用字面量一次性初始化完整的对象属性。</li>
<li>尽量保证初始化时属性的顺序一致。</li>
<li>尽量避免使用 delete 方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --allow-natives-synta 指向同一地址，故复用同一个隐藏类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JnQ</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;JnQ&#x27;</span>, <span class="attr">owner</span>: <span class="string">&#x27;Qi Huang&#x27;</span>, <span class="attr">TL</span>: <span class="string">&#x27;Sijie Cai&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TCSplus</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;TCS&#x27;</span>, <span class="attr">owner</span>: <span class="string">&#x27;Guangyu Song&#x27;</span>, <span class="attr">TL</span>: <span class="string">&#x27;Sijie Cai&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新创建隐藏类 Case 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JnQInfo</span> = &#123;&#125;; <span class="comment">// 新建隐藏类第 1 次</span></span><br><span class="line"><span class="title class_">JnQInfo</span>.<span class="property">platform</span> = [<span class="string">&#x27;Jimu&#x27;</span>, <span class="string">&#x27;Juren&#x27;</span>, <span class="string">&#x27;Rock&#x27;</span>]; <span class="comment">// 新建隐藏类第 2 次</span></span><br><span class="line"><span class="title class_">JnQInfo</span>.<span class="property">member</span> = <span class="number">13</span>; <span class="comment">// 新建隐藏类第 3 次</span></span><br><span class="line"><span class="title class_">JnQInfo</span>.<span class="property">meeting</span> = <span class="string">&#x27;Firday&#x27;</span>; <span class="comment">// 新建隐藏类第 4 次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新创建隐藏类 Case 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JnQInfo</span> = &#123; <span class="attr">platform</span>: [<span class="string">&#x27;Jimu&#x27;</span>, <span class="string">&#x27;Juren&#x27;</span>, <span class="string">&#x27;Rock&#x27;</span>], <span class="attr">member</span>: <span class="number">13</span>, <span class="attr">meeting</span>: <span class="string">&#x27;Firday&#x27;</span> &#125;; <span class="comment">// 新建隐藏类第 1 次</span></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">JnQInfo</span>.<span class="property">meeting</span>; <span class="comment">// 新建隐藏类第 2 次</span></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">JnQInfo</span>.<span class="property">platform</span>; <span class="comment">// 新建隐藏类第 3 次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新创建隐藏类 Case 3</span></span><br><span class="line"><span class="keyword">const</span> jimu = &#123; <span class="attr">member</span>: <span class="number">8</span>, <span class="attr">owner</span>: <span class="string">&#x27;Zhihao Cao&#x27;</span> &#125;; <span class="comment">// 新建隐藏类第 1 次</span></span><br><span class="line"><span class="keyword">const</span> quality = &#123; <span class="attr">owner</span>: <span class="string">&#x27;Xue Zhang&#x27;</span>, <span class="attr">member</span>: <span class="number">4</span> &#125;; <span class="comment">// 新建隐藏类第 2 次</span></span><br></pre></td></tr></table></figure>

<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ul>
<li><p>根节点认定：全局对象；本地函数的局部变量和参数；当前嵌套调用链上的其他函数的变量和参数。</p>
</li>
<li><p>标记-整理</p>
<ul>
<li>经历一次标记-清除后，内存空间可能会出现不连续的状态，即内存碎片；</li>
<li>假设在老生代中有 A、B、C、D 四个对象；</li>
<li>在垃圾回收的标记阶段，将对象 A 和对象 C 标记为活动的；</li>
<li>在垃圾回收的整理阶段，将活动的对象往堆内存的一端移动；</li>
<li>在垃圾回收的清除阶段，将活动对象左侧的内存全部回收。</li>
</ul>
</li>
</ul>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822202530-p84h1dv.png" alt="image">​</p>
<ul>
<li><p>增量标记</p>
<ul>
<li>由于 JS 的单线程机制，垃圾回收的过程会阻碍主线程同步任务的执行，待执行完垃圾回收后才会再次恢复执行主任务的逻辑，这种行为被称为<strong>全停顿</strong>(stop-the-world)。在标记阶段同样会阻碍主线程的执行，一般来说，老生代会保存大量存活的对象，如果在标记阶段将整个堆内存遍历一遍，那么势必会造成严重的卡顿。</li>
<li>因此，为了减少垃圾回收带来的停顿时间，V8 引擎又引入了<code>Incremental Marking</code>​(增量标记)的概念，即将原本需要一次性遍历堆内存的操作改为增量标记的方式，先标记堆内存中的一部分对象，然后暂停，将执行权重新交给 JS 主线程，待主线程任务执行完毕后再从原来暂停标记的地方继续标记，直到标记完整个堆内存。这个理念其实有点像 React 框架中的 Fiber 架构，只有在浏览器的空闲时间才会去遍历<code>Fiber Tree</code>​ 执行对应的任务，否则延迟执行，尽可能少地影响主线程的任务，避免应用卡顿，提升应用性能。</li>
<li>得益于增量标记的好处，V8 引擎后续继续引入了延迟清理(<code>lazy sweeping</code>​)和增量式整理(<code>incremental compaction</code>​)，让清理和整理的过程也变成增量式的。同时为了充分利用多核 CPU 的性能，也将引入<strong>并行标记</strong>和<strong>并行清理</strong>，进一步地减少垃圾回收对主线程的影响，为应用提升更多的性能。</li>
</ul>
</li>
</ul>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822202540-7bf6us2.png" alt="image">​</p>
<h2 id="编译解析"><a href="#编译解析" class="headerlink" title="编译解析"></a>编译解析</h2><p><strong>编译型语言</strong>在程序执行之前，需要经过<strong>编译器</strong>的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C&#x2F;C++、GO 等都是编译型语言。而由<strong>解释型语言</strong>编写的程序，在每次运行时都需要通过<strong>解释器</strong>对程序进行动态解释和执行。比如 JavaScript、Python 等都属于解释型语言。</p>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822202639-01u8go0.png" alt="image">V8 在执行过程中既有解释器 Ignition，又有编译器 TurboFan，此外较新版本的 Chrome 增加了一种中间层编译器 Maglev，V8 可以使用 jsvu 进行本地调试。</p>
<p>解释编译具体步骤包括：</p>
<ul>
<li><p>生成抽象语法树和执行上下文</p>
<ul>
<li>词法分析，即分词(tokenize)，根据预设规则将每一行代码拆分成不可再分的 tokens。</li>
<li>语法分析，即解析(parse)，根据语法规则将 tokens 组合转化为抽象语法树。</li>
<li>执行上下文，代码执行过程中的环境信息。</li>
</ul>
</li>
<li><p>生成字节码</p>
<ul>
<li>字节码介于 AST 和机器码之间。字节码需要通过解析器将其转换为机器码后才能执行。</li>
<li>解释器 Ignition 会根据 AST 生成字节码，并解释执行字节码。</li>
<li>V8 最早并没有字节码，直接将 AST 转换为机器码效率更加高效，但机器码的内存占用远远大于字节码，这在移动端的问题更加突出。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript Code - 8 lines of code</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params">day</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> department = <span class="string">&#x27;Data-TnS-FE&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> team = <span class="string">&#x27;JnQ&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> day % <span class="number">2</span> === <span class="number">0</span> ? department : team;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> day=<span class="number">0</span>; day &lt; <span class="number">0x20227</span>; day++) &#123;</span><br><span class="line">  <span class="title function_">foo</span>(day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// V8 bytecode - 19 lines of code</span></span><br><span class="line"><span class="comment">// --print-bytecode</span></span><br><span class="line"><span class="title class_">CreateClosure</span> [<span class="number">0</span>], [<span class="number">0</span>], #<span class="number">0</span></span><br><span class="line"><span class="title class_">StaCurrentContextSlot</span> [<span class="number">2</span>]</span><br><span class="line"><span class="title class_">LdaZero</span></span><br><span class="line"><span class="title class_">Star11</span></span><br><span class="line"><span class="title class_">LdaUndefined</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Machine Code - 140 lines of code</span></span><br><span class="line"><span class="comment">// --print-code</span></span><br><span class="line"><span class="variable constant_">REX</span>.<span class="property">W</span> leaq rbx,[rip+<span class="number">0xfffffff9</span>]</span><br><span class="line"><span class="variable constant_">REX</span>.<span class="property">W</span> cmpq rbx,rcx</span><br><span class="line">jz <span class="number">0x174944159</span>  &lt;+<span class="number">0x19</span>&gt;</span><br><span class="line">movl rdx,<span class="number">0x84</span></span><br><span class="line">call [r13+<span class="number">0x50a0</span>]</span><br><span class="line">int3l</span><br><span class="line">movl rbx,[rcx-<span class="number">0xc</span>]</span><br><span class="line"><span class="variable constant_">REX</span>.<span class="property">W</span> addq rbx,r14</span><br><span class="line">testb [rbx+<span class="number">0x16</span>],<span class="number">0x20</span></span><br><span class="line">jnz <span class="number">0x1149c5a00</span>  (<span class="title class_">CompileLazyDeoptimizedCode</span>)    ;; near builtin entry</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822202924-2pwair0.png" alt="image">​</p>
<ul>
<li><p>执行代码</p>
<ul>
<li>Ignition 负责生成、解析和执行字节码。执行字节码的过程中如果发现一段代码被重复执行多次，就会将其标记为为<strong>热点代码</strong>(HotSpot)，那么后台的编译器 TurboFan 就会把该段热点字节码编译为更为高效的机器码(即时编译，JIT)，当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就可以兼顾代码的执行效率和内存占用。</li>
</ul>
</li>
</ul>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822202954-i6knpq4.png" alt="image">​</p>
<p><strong>惰性解析</strong>是指解析器在解析的过程中，如果遇到函数声明，那么会跳过函数内部的代码，并不会为其生成 AST 和字节码，而仅仅生成顶层代码的 AST 和字节码。</p>
<ul>
<li>一次性解析和编译所有的 JavaScript 代码会增加编译时间，严重影响到首次执行 JavaScript 代码的速度。</li>
<li>一次性解析和编译所有 JavaScript 代码会增加内存占用，解析完成的字节码和编译后的机器代码将会一直占用内存。</li>
</ul>
<h2 id="循环机制"><a href="#循环机制" class="headerlink" title="循环机制"></a>循环机制</h2><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>每个渲染进程都有一个主线程负责处理 DOM、计算样式、排版布局、运行 JavaScript 代码以及响应交互行为。单线程来调度这些任务就需要消息队列和事件循环分别承担任务存储和处理的工作。</p>
<p>渲染进程有专门用来接收其他进程传进来消息的 IO 线程。消息队列的任务类型有很多，如外设输入事件、文件读写、定时器、解析 DOM、样式计算、布局计算、CSS 动画等等。</p>
<p>“先进先出”是队列的特点，鉴于这个属性，就需要解决两个问题。</p>
<ul>
<li><p>如何处理高优先级的任务。</p>
<ul>
<li>每个宏任务中都包含了一个微任务队列，宏任务执行完成后，会立即执行当前宏任务的微任务队列。</li>
</ul>
</li>
<li><p>如何解决单任务执行时间过长。</p>
</li>
</ul>
<p>消息队列分为<strong>执行队列</strong>和<strong>延迟队列</strong>两种。</p>
<p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822203430-kfxwn9k.png" alt="image">​</p>
<p>消息队列的任务是通过事件循环来执行的，WHATWG 规范是这么定义事件循环的宏任务执行过程：</p>
<ol>
<li>从多个消息队列中选出一个最老的任务，这个任务称为 oldestTask；</li>
<li>循环系统记录任务开始执行的时间，并把这个 oldestTask 设置为当前正在执行的任务；</li>
<li>当任务执行完成之后，删除当前正在执行的任务，并从对应的消息队列中删除掉这个 oldestTask；</li>
<li>最后统计执行完成的时长等信息。</li>
</ol>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>一个事件循环模型有一个或者多个任务队列，<strong>任务队列</strong>是<strong>集合</strong>，而不是队列。因为事件循环处理模型从所选队列中选出第一个可执行的任务，而不是按照“先进先出”的原则。<strong>微任务队列</strong>不是<strong>任务队列</strong>，每个事件循环模型只且只有一个微任务队列，微任务队列是<strong>队列</strong>实现。并非所有事件都使用任务队列进行调度；许多是在其他任务执行期间派生的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">immediate_incoming_queue; <span class="comment">// PostTask enqueues tasks here</span></span><br><span class="line">immediate_work_queue; <span class="comment">// SequenceManager takes immediate tasks here.</span></span><br><span class="line"></span><br><span class="line">delayed_work_queue; <span class="comment">// PostDelayedTask enqueues tasks here.</span></span><br><span class="line">delayed_incoming_queue; <span class="comment">// SequenceManager takes delayed tasks here.</span></span><br></pre></td></tr></table></figure>

<p>​<code>immediate_incoming_queue</code>​ 存放的任务在<code>immediate_work_queue</code>​ 清空以后进入等待执行，为了提高效率，两个队列会在清空时进行职能互换。<code>delayed_incoming_queue</code>​ 中的任务，将在延迟时间到期以后进入<code>delayed_work_queue</code>​ 等待执行。任务产生以后会先进入到相应的<code>incoming_queue</code>​ 等待，<code>work_queue</code>​ 存放即将被执行的任务。</p>
<p>延迟队列用于定时器或其他需要延时执行的任务，例如<code>setTimeout</code>​，由于执行任务都由渲染进程主线程来完成的缘故，定时器存在以下几个问题：</p>
<ul>
<li>如果当前任务执行时间过长，会影响定时器任务的执行。</li>
<li>定时器存在嵌套关系，最短时间间隔为 4 毫秒。</li>
<li>未激活的页面，定时器最小执行间隔是 1000 毫秒。</li>
<li>延迟执行时间的最大值是 2147483647^(2147483647 毫秒 - Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值，超出 2*31 -1 的最大范围则会立即执行(等价于 0 毫秒)。)^ 毫秒(约 24.8 天)。</li>
</ul>
<p>异步回调有两种形式，第一种是把异步回调函数封装成一个<strong>宏任务</strong>，添加到消息队列尾部，当循环系统执行到该任务的时候执行回调函数；第二种方式的执行时机是在主函数执行结束之后、当前宏任务结束之前执行回调函数，这通常都是以<strong>微任务</strong>形式体现的。</p>
<p>在当前宏任务中的 JavaScript 快执行完成时，也就在 JavaScript 引擎准备退出全局执行上下文并清空调用栈的时候，JavaScript 引擎会检查全局执行上下文中的微任务队列，然后按照顺序执行队列中的微任务。如果在执行微任务的过程中，产生了新的微任务，同样会将该微任务添加到微任务队列中，V8 引擎一直循环执行微任务队列中的任务，直到队列为空才算执行结束。<strong>也就是说在执行微任务过程中产生的新的微任务并不会推迟到下个宏任务中执行，而是在当前的宏任务中继续执行。</strong></p>
<p>早期 Mutation Event 采用观察者的设计模式，当 DOM 有变动时就会立刻触发相应的事件，这种方式属于同步回调，频繁触发会导致页面性能问题。MutationObserver 将响应函数改成异步调用，可以不用在每次 DOM 变化都触发异步调用，而是等多次 DOM 变化后，一次触发异步调用，同时为了保证实时性，MutationObserver 触发的回调会进入微任务队列。</p>
<h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><p>​<img data-src="/blog/./%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/image-20230822203904-itlu98x.png" alt="image"></p>
<p>‍</p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
  </entry>
  <entry>
    <title>第一、二章：图形学概述、向量与线性代数</title>
    <url>/blog/%E7%AC%AC%E4%B8%80%E3%80%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A6%82%E8%BF%B0%E3%80%81%E5%90%91%E9%87%8F%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<h3 id="第一章-图形学概述"><a href="#第一章-图形学概述" class="headerlink" title="第一章 图形学概述"></a>第一章 图形学概述</h3><h4 id="1-图形学应用场景"><a href="#1-图形学应用场景" class="headerlink" title="1.图形学应用场景"></a>1.图形学应用场景</h4><p>游戏场景渲染、电影特效、动画、设计、可视化（人体三维扫描）、虚拟现实、数字绘图、模拟、GUI、字体排版等</p>
<h4 id="2-图形学包含内容："><a href="#2-图形学包含内容：" class="headerlink" title="2.图形学包含内容："></a>2.图形学包含内容：</h4><ul>
<li><p>数学：矩阵、曲线、曲面</p>
</li>
<li><p>物理学：光学、着色</p>
</li>
<li><p>描述、操作三维的不同形体</p>
</li>
<li><p>动画、仿真</p>
</li>
</ul>
<h4 id="3-本课程包含的内容："><a href="#3-本课程包含的内容：" class="headerlink" title="3.本课程包含的内容："></a>3.本课程包含的内容：</h4><ul>
<li><p>光栅化</p>
<ul>
<li>光栅化是把三维空间的几何形体显示在屏幕上，是实时图形学的主要应用。实时：每秒钟生成 30 帧，否则叫做离线</li>
</ul>
</li>
<li><p>曲线、曲面</p>
<ul>
<li>如何表示一条光滑的曲线、如何表示曲面、怎么把简单曲面通过细分的方法得到更复杂的曲面，形状发生变化的时候面要如何变化，如何保持物体的拓扑结构</li>
</ul>
</li>
<li><p>光线追踪</p>
<ul>
<li>实时光线追踪技术</li>
</ul>
</li>
<li><p>动画&#x2F;模拟</p>
</li>
</ul>
<h4 id="4-本课程不包含的内容："><a href="#4-本课程不包含的内容：" class="headerlink" title="4.本课程不包含的内容："></a>4.本课程不包含的内容：</h4><ul>
<li><p>怎么使用 API</p>
</li>
<li><p>怎么做三维建模</p>
</li>
<li><p>计算机视觉：一切需要猜测的东西是计算机视觉（根据图像推测模型）。</p>
<p>​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816202909-3znjtvt.png" alt="image">​​</p>
<p>model 描述三维空间中形状的几何形体，或对于渲染而言描述它的材质、光照，把这些三维空间中有的东西转为一幅图（渲染），就是计算机图形学。此外，还包括纯三维空间的仿真，材质建模、材质与光线之间作用的研究等，都属于计算机图形学的范畴。</p>
</li>
</ul>
<p>从一张图识别出各种模型（比如识别出照片里哪些是桌子、椅子），或者图形、视频处理（中间涉及到一些推测、推理）等是计算机视觉的范畴。</p>
<p>某些场景下没有严格的边界，比如 AR 需要二者的结合。</p>
<h3 id="第二章-向量与线性代数"><a href="#第二章-向量与线性代数" class="headerlink" title="第二章 向量与线性代数"></a>第二章 向量与线性代数</h3><h4 id="1-图形学依赖："><a href="#1-图形学依赖：" class="headerlink" title="1.图形学依赖："></a>1.图形学依赖：</h4><ul>
<li><p>数学基础：线性代数、微积分、统计</p>
</li>
<li><p>数学基础：力学、光学</p>
</li>
<li><p>其他杂项：信号处理、数值分析</p>
</li>
<li><p>一点点美学</p>
</li>
</ul>
<h4 id="2-向量（Vectors）"><a href="#2-向量（Vectors）" class="headerlink" title="2.向量（Vectors）"></a>2.向量（Vectors）</h4><p>向量表示两个内容：方向和长度，平移向量不会改变它（因为方向和长度不变）。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816202955-jjx4cx2.png" alt="image">​</p>
<p>一个向量除它的长度可以得到一个长度为 1 的单位向量。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203024-1bw8l0i.png" alt="image">​</p>
<h5 id="向量求和："><a href="#向量求和：" class="headerlink" title="向量求和："></a><strong>向量求和：</strong></h5><p>几何上：平行四边形法则、三角形法则。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203030-99fojmi.png" alt="image">​</p>
<p>代数上：坐标相加（笛卡尔坐标系）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203036-px3g9cs.png" alt="image">​</p>
<h5 id="向量点乘："><a href="#向量点乘：" class="headerlink" title="向量点乘："></a><strong>向量点乘：</strong></h5><p>可以通过点乘快速得到两个向量的夹角（特别是两个向量都是方向向量，点乘后直接得到夹角的余弦）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203046-yssyjz7.png" alt="image">​</p>
<p><strong>点乘运算满足交换律、分配律和结合律</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203054-ozx0y20.png" alt="image">​</p>
<p><strong>代数上的点乘即对应的坐标元素做乘积之后相加：</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203059-3o1v0i4.png" alt="image">​</p>
<h5 id="点乘在图形学中的应用："><a href="#点乘在图形学中的应用：" class="headerlink" title="点乘在图形学中的应用："></a>点乘在图形学中的应用：</h5><ul>
<li>找到两个向量（两个方向）之间的夹角。比如光照模型，计算光照到物体表面的法线等等</li>
<li>找到一个向量到另一个向量上的投影，分解向量</li>
<li>计算两个向量之间有多接近：夹角越小（点乘的结果越大）越接近。比如镜面反射计算高光点</li>
<li>可以知道两个向量之间的方向是相同还是相反（正数相同、负数相反）<br>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203127-e9vs5ug.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203146-rmtlix3.png" alt="image">​</li>
</ul>
<h5 id="向量叉乘"><a href="#向量叉乘" class="headerlink" title="向量叉乘"></a><strong>向量叉乘</strong></h5><p>叉乘后的向量同时垂直于两个原向量，叉乘得到的向量方向符合右手螺旋定则。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203210-spvivvu.png" alt="image">​</p>
<p>叉乘不满足交换律，需要加一个负号。但满足分配律和结合律。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203223-2lm3df8.png" alt="image">​</p>
<p>代数上：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203230-6axkrx6.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203230-6axkrx6.png" alt="image">​​</p>
<h5 id="叉乘在图形学中的应用："><a href="#叉乘在图形学中的应用：" class="headerlink" title="叉乘在图形学中的应用："></a>叉乘在图形学中的应用：</h5><ul>
<li><p>判定左和右</p>
</li>
<li><p>判定内和外（三角形光栅化的基础）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203304-8s5o1zi.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203311-5841k86.png" alt="image">​​</p>
</li>
</ul>
<h4 id="3-矩阵（Matrics）"><a href="#3-矩阵（Matrics）" class="headerlink" title="3.矩阵（Matrics）"></a>3.矩阵（Matrics）</h4><p>矩阵就是一堆数字，用 m 行 n 列的结构表示。</p>
<p>图形学中，用矩阵实现一些移动、旋转的变换。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203320-z1jydy0.png" alt="image">​</p>
<p>矩阵乘一个数就是把矩阵中每一个数字和该数字想乘得到一个矩阵。</p>
<h5 id="矩阵乘积"><a href="#矩阵乘积" class="headerlink" title="矩阵乘积"></a><strong>矩阵乘积</strong></h5><p>一定要满足前一个矩阵的列数等于后一个矩阵的行数才能实现相乘。计算方式：乘出来的结果在 m 行 b 列就去找相乘的前一个矩阵的 m 行对应的值与后一个矩阵的 n 列对应的值一一相乘后再相加。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203329-p0untj0.png" alt="image">​</p>
<p>矩阵不满足交换律，但满足结合率和分配律：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203336-mb007jo.png" alt="image">​</p>
<p>矩阵和向量相乘：认为向量是一个 m 乘 1 的矩阵，则可以将任意一个 n 乘 m 的矩阵与向量相乘，基于该前提实现一个向量变换（比如相对一个坐标轴翻转）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203343-fbta21s.png" alt="image">​</p>
<h5 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a><strong>矩阵转置</strong></h5><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203349-3r4s0yl.png" alt="image">​</p>
<h5 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a><strong>单位矩阵</strong></h5><p>单位矩阵只有对角线上有元素。</p>
<p>如果两个矩阵相乘为单位矩阵，则该两个矩阵互为逆矩阵。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203400-dl98u4q.png" alt="image">​</p>
<p><strong>向量点乘和叉乘写成矩阵的形式（用在旋转的推导上）</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816203405-yaiw812.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>现代浏览器架构</title>
    <url>/blog/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>原文：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2luc2lkZS1icm93c2VyLXBhcnQxLw==" title="Inside look at modern web browser">Inside look at modern web browser<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>​​</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312133806-tjwh7ad.png" alt="image">​</p>
<p>Chrome 的多进程架构图，多个渲染进程的卡片（render process）是用来表明 Chrome 会为每一个 tab 创建一个渲染进程。</p>
<p>Chrome 浏览器会有一个浏览器进程（browser process），这个进程会和其他进程一起协作来实现浏览器的功能。对于渲染进程（renderer process），Chrome 会尽可能为每一个 tab 甚至是页面里面的每一个 iframe 都分配一个单独的进程。</p>
<h3 id="Chrome-多进程架构的好处"><a href="#Chrome-多进程架构的好处" class="headerlink" title="Chrome 多进程架构的好处"></a>Chrome 多进程架构的好处</h3><ol>
<li><p>多进程可以使浏览器具有很好的容错性。</p>
<p>对于大多数简单的情景来说，Chrome 会为每个 tab 单独分配一个属于它们的渲染进程（render process）。举个例子，假如有三个 tab，就会有三个独立的渲染进程。当其中一个 tab 的崩溃时，可以随时关闭这个 tab 并且其他 tab 不受到影响。可是如果所有的 tab 都跑在同一个进程的话，它们就会有连带关系，一个挂全部挂。</p>
</li>
</ol>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312133824-h0sn3u5.png" alt="image">​</p>
<ol start="2">
<li><p>另外一个好处就是可以提供安全性和沙盒性（sanboxing）。</p>
<p>因为操作系统可以提供方法让限制每个进程拥有的能力，所以浏览器可以让某些进程不具备某些特定的功能。例如，由于 tab 渲染进程可能会处理来自用户的随机输入，所以 Chrome 限制了它们对系统文件随机读写的能力。</p>
</li>
<li><p>不好的地方</p>
<p>那就是进程的内存消耗。由于每个进程都有各自独立的内存空间，所以它们不能像存在于同一个进程的线程那样共用内存空间，这就造成了一些基础的架构（例如 V8 JavaScript 引擎）会在不同进程的内存空间同时存在的问题，这些重复的内容会消耗更多的内存。所以为了节省内存，Chrome 会限制被启动的进程数目，当进程数达到一定的界限后，Chrome 会将<strong>访问同一个网站的 tab 都放在一个进程里面跑</strong>。</p>
</li>
</ol>
<h3 id="网站隔离"><a href="#网站隔离" class="headerlink" title="网站隔离"></a>网站隔离</h3><p>网站隔离功能会为网站内不同站点的 iframe 分配一个独立的渲染进程。之前说过 Chrome 会为每个 tab 分配一个单独的渲染进程，可是如果一个 tab 只有一个进程的话不同站点的 iframe 都会跑在这个进程里面，这也意味着它们会共享内存，这就有可能会破坏同源策略。同源策略是浏览器最核心的安全模型，它可以禁止网站在未经同意的情况下去获取另外一个站点的数据，因此绕过同源策略是很多安全攻击的主要目的。而进程隔离（proces isolation）是隔离网站最好最有效的办法了。这样每一个跨站点的 iframe 都会拥有一个独立的渲染进程。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312133837-c8k4k3b.png" alt="image">​</p>
<h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><h3 id="输入-url-到显示（一次导航）发生了什么"><a href="#输入-url-到显示（一次导航）发生了什么" class="headerlink" title="输入 url 到显示（一次导航）发生了什么"></a>输入 url 到显示（一次导航）发生了什么</h3><p>浏览器进程有很多负责不同工作的线程（worker thread），其中包括绘制浏览器顶部按钮和导航栏输入框等组件的 UI 线程（UI thread）、管理网络请求的网络线程（network thread）、以及控制文件读写的存储线程（storage thread）等。当在导航栏里面输入一个 URL 的时候，其实就是 UI 线程在处理的输入。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312134331-3w1t1ae.png" alt="image">​</p>
<h3 id="一次简单的导航"><a href="#一次简单的导航" class="headerlink" title="一次简单的导航"></a>一次简单的导航</h3><h4 id="1-处理输入"><a href="#1-处理输入" class="headerlink" title="1. 处理输入"></a>1. 处理输入</h4><p>当用户开始在导航栏上面输入内容的时候，UI 线程（UI thread）做的第一件事就是询问：“输入的字符串是一些搜索的关键词（search query）还是一个 URL 地址呢？”。因为对于 Chrome 浏览器来说，导航栏的输入既可能是一个可以直接请求的域名还可能是用户想在搜索引擎（例如 Google）里面搜索的关键词信息，所以当用户在导航栏输入信息的时候 UI 线程要进行一系列的解析来判定是将用户输入发送给搜索引擎还是直接请求输入的站点资源。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312134436-1adez7e.png" alt="image">​</p>
<h4 id="2-开始导航"><a href="#2-开始导航" class="headerlink" title="2. 开始导航"></a>2. 开始导航</h4><p>当用户按下回车键的时候，UI 线程会叫网络线程（network thread）初始化一个网络请求来获取站点的内容。这时候 tab 上会展示一个提示资源正在加载中的旋转圈圈，而且网络线程会进行一系列诸如 DNS 寻址以及为请求建立 TLS 连接的操作。这时如果网络线程收到服务器的 HTTP 301 重定向响应，它就会告知 UI 线程进行重定向然后它会再次发起一个新的网络请求。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312134530-4bykzl0.png" alt="image">​</p>
<h4 id="3-读取响应"><a href="#3-读取响应" class="headerlink" title="3. 读取响应"></a>3. 读取响应</h4><p>网络线程在收到 HTTP 响应的主体（payload）流（stream）时，在必要的情况下它会先检查一下流的前几个字节以确定响应主体的具体媒体类型（MIME Type）。响应主体的媒体类型一般可以通过 HTTP 头部的 Content-Type 来确定，不过 Content-Type 有时候会缺失或者是错误的，这种情况下浏览器就要进行 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVz" title="MIME类型嗅探">MIME 类型嗅探<i class="fa fa-external-link-alt"></i></span>来确定响应类型了。MIME 类型嗅探并不是一件容易的事情，可以从 <span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuY2hyb21pdW0ub3JnL2Nocm9taXVtL2Nocm9taXVtL3NyYy8rL21haW46bmV0L2Jhc2UvbWltZV9zbmlmZmVyLmNjO2w9NQ==" title="Chrome的源代码">Chrome 的源代码<i class="fa fa-external-link-alt"></i></span>的注释来了解不同浏览器是如何根据不同的 Content-Type 来判断出主体具体是属于哪个媒体类型的。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312134903-1jkqnrg.png" alt="image">​</p>
<p>如果响应的主体是一个 HTML 文件，浏览器会将获取的响应数据交给渲染进程（renderer process）来进行下一步的工作。如果拿到的响应数据是一个压缩文件（zip file）或者其他类型的文件，响应数据就会交给下载管理器（download manager）来处理。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312134927-xmd3rki.png" alt="image">​</p>
<p>网络线程在把内容交给渲染进程之前还会对内容做 <span class="exturl" data-url="aHR0cHM6Ly9zYWZlYnJvd3NpbmcuZ29vZ2xlLmNvbS8=" title="SafeBrowsing">SafeBrowsing<i class="fa fa-external-link-alt"></i></span> 检查。如果请求的域名或者响应的内容和某个已知的病毒网站相匹配，网络线程会给用户展示一个警告的页面。除此之外，网络线程还会做 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL0hvbWUvY2hyb21pdW0tc2VjdXJpdHkvY29yYi1mb3ItZGV2ZWxvcGVycy8=" title="CORB">CORB<i class="fa fa-external-link-alt"></i></span>（<strong>C</strong>ross <strong>O</strong>rigin <strong>R</strong>ead <strong>B</strong>locking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p>
<h4 id="4-查找渲染进程"><a href="#4-查找渲染进程" class="headerlink" title="4. 查找渲染进程"></a>4. 查找渲染进程</h4><p>在网络线程做完所有的检查后并且能够确定浏览器应该导航到该请求的站点，它就会告诉 UI 线程所有的数据都已经被准备好了。UI 线程在收到网络线程的确认后会为这个网站寻找一个渲染进程（renderer process）来渲染界面。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312135328-te7ksoy.png" alt="image"></p>
<p>由于网络请求可能需要长达几百毫秒的时间才能完成，为了缩短导航需要的时间，浏览器会在之前的一些步骤里面做一些优化。例如在第二步中当 UI 线程发送 URL 链接给网络线程后，它其实已经知晓它们要被导航到哪个站点了，所以在网络线程干活的时候，UI 线程会主动地为这个网络请求启动一个渲染线程。如果一切顺利的话（没有重定向之类的东西出现），网络线程准备好数据后页面的渲染进程已经就准备好了，这就节省了新建渲染进程的时间。不过如果发生诸如网站被重定向到不同站点的情况，刚刚那个渲染进程就不能被使用了，它会被摒弃，一个新的渲染进程会被启动。</p>
<h4 id="5-提交导航"><a href="#5-提交导航" class="headerlink" title="5. 提交导航"></a>5. 提交导航</h4><p>到这一步的时候，数据和渲染进程都已经准备好了，浏览器进程（browser process）会通过 IPC 告诉渲染进程去提交本次导航（commit navigation）。除此之外浏览器进程还会将刚刚接收到的响应数据流传递给对应的渲染进程让它继续接收到来的 HTML 数据。一旦浏览器进程收到渲染线程的回复说导航已经被提交了（commit），导航这个过程就结束了，文档的加载阶段（document loading phase）会正式开始。</p>
<p>这时导航栏会被更新，安全指示符（security indicator）和站点设置 UI（site settings UI）会展示新页面相关的站点信息。当前 tab 的会话历史（session history）也会被更新，这样当点击浏览器的前进和后退按钮也可以导航到刚刚导航完的页面。为了方便在关闭了 tab 或窗口（window）的时候还可以恢复当前 tab 和会话（session）内容，当前的会话历史会被保存在磁盘上面。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312135803-xkzmz1m.png" alt="image">​</p>
<h4 id="额外步骤：初始加载完成（Initial-load-complete）"><a href="#额外步骤：初始加载完成（Initial-load-complete）" class="headerlink" title="额外步骤：初始加载完成（Initial load complete）"></a>额外步骤：初始加载完成（Initial load complete）</h4><p>当导航提交完成后，渲染进程开始着手加载资源以及渲染页面。一旦渲染进程“完成”（finished）渲染，它会通过 IPC 告知浏览器进程（注意这发生在页面上所有帧（frames）的 <strong>onload</strong> 事件都已经被触发了而且对应的处理函数已经执行完成了的时候），然后 UI 线程就会停止导航栏上旋转的圈圈。</p>
<p>我这里用到“完成”这个词，因为后面客户端的 JavaScript 还是可以继续加载资源和改变视图内容的。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230312135933-smj806a.png" alt="image">​</p>
<h3 id="导航到不同的站点"><a href="#导航到不同的站点" class="headerlink" title="导航到不同的站点"></a>导航到不同的站点</h3><p>如果这时用户在导航栏上输入一个不一样的 URL 会发生什么呢？如果是这样，浏览器进程会重新执行一遍之前的那几个步骤来完成新站点的导航。不过在浏览器进程做这些事情之前，它需要让当前的渲染页面做一些收尾工作，具体就是询问一下当前的渲染进程需不需要处理一下<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload" title="https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;Events&#x2F;beforeunload"><strong>beforeunload</strong></a>事件。</p>
<p><strong>beforeunload</strong>可以在用户重新导航或者关闭当前 tab 时给用户展示一个“确定要离开当前页面吗？”的二次确认弹框。浏览器进程之所以要在重新导航的时候和当前渲染进程确认的原因是，当前页面发生的一切（包括页面的 JavaScript 执行）是不受它控制而是受渲染进程控制，所以它也不知道里面的具体情况。</p>
<p>**注意：不要随便给页面添加 beforeunload 事件监听，**定义的监听函数会在页面被重新导航的时候执行，因此这会增加重导航的时延。beforeunload 事件监听函数只有在十分必要的时候才能被添加，例如用户在页面上输入了数据，并且这些数据会随着页面消失而消失。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319153441-31vjdda.png" alt="image">​</p>
<p>如果重新导航是在页面内被发起的呢？例如用户点击了页面的一个链接或者客户端的 JavaScript 代码执行了诸如<strong>window.location &#x3D; &quot;<strong>​*</strong>*​</strong>&quot;<strong>的代码。这种情况下，渲染进程会自己先检查一个它有没有注册</strong>beforeunload**事件的监听函数，如果有的话就执行，执行完后发生的事情就和之前的情况没什么区别了，唯一的不同就是这次的导航请求是由渲染进程给浏览器进程发起的。</p>
<p>如果是重新导航到不同站点（different site）的话，会有另外一个渲染进程被启动来完成这次重导航，而当前的渲染进程会继续处理现在页面的一些收尾工作，例如<strong>unload</strong>事件的监听函数执行。<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL3BhZ2UtbGlmZWN5Y2xlLWFwaS8jb3ZlcnZpZXdfb2ZfcGFnZV9saWZlY3ljbGVfc3RhdGVzX2FuZF9ldmVudHM=" title="Overview of page lifecycle states">Overview of page lifecycle states<i class="fa fa-external-link-alt"></i></span>这篇文章会介绍页面所有的生命周期状态，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL3BhZ2UtbGlmZWN5Y2xlLWFwaS8=" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;updates&#x2F;2018&#x2F;07&#x2F;page-lifecycle-api">the Page Lifecycle API<i class="fa fa-external-link-alt"></i></span>会教如何在页面中监听页面状态的变化。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319153744-6vv264q.png" alt="image" title="浏览器进程告诉新的渲染进程去渲染新的页面并且告诉当前的渲染进程进行收尾工作"></p>
<h3 id="Service-Worker-的情景"><a href="#Service-Worker-的情景" class="headerlink" title="Service Worker 的情景"></a>Service Worker 的情景</h3><p>这个导航过程最近发生的一个改变是引进了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL3dvcmtib3gvc2VydmljZS13b3JrZXItb3ZlcnZpZXcv" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;primers&#x2F;service-workers&#x2F;">service worker<i class="fa fa-external-link-alt"></i></span>的概念。因为 Service worker 可以用来写网站的网络代理（network proxy），所以开发者可以对网络请求有更多的控制权，例如决定哪些数据缓存在本地以及哪些数据需要从网络上面重新获取等等。如果开发者在 service worker 里设置了当前的页面内容从缓存里面获取，当前页面的渲染就不需要重新发送网络请求了，这就大大加快了整个导航的过程。</p>
<p>这里要重点留意的是 service worker 其实只是一些跑在渲染进程里面的 JavaScript 代码。那么问题来了，当导航开始的时候，浏览器进程是如何判断要导航的站点存不存在对应的 service worker 并启动一个渲染进程去执行它的呢？</p>
<p>其实 service worker 在注册的时候，它的作用范围（scope）会被记录下来（可以通过文章<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L3NlcnZpY2Utd29ya2VyLWxpZmVjeWNsZS8=" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;primers&#x2F;service-workers&#x2F;lifecycle">The Service Worker Lifecycle<i class="fa fa-external-link-alt"></i></span>了解更多关于 service worker 作用范围的信息）。在导航开始的时候，网络线程会根据请求的域名在已经注册的 service worker 作用范围里面寻找有没有对应的 service worker。如果有命中该 URL 的 service worker，UI 线程就会为这个 service worker 启动一个渲染进程（renderer process）来执行它的代码。Service worker 既可能使用之前缓存的数据也可能发起新的网络请求。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319154027-e632owr.png" alt="image" title="网络线程会在收到导航任务后寻找有没有对应的service worker">​</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319154105-btbz0mt.png" alt="image" title="UI线程会启动一个渲染进程来运行找到的service worker代码，代码具体是由渲染进程里面的工作线程（worker thread）执行">​</p>
<h3 id="导航预加载-Navigation-Preload"><a href="#导航预加载-Navigation-Preload" class="headerlink" title="导航预加载- Navigation Preload"></a>导航预加载- Navigation Preload</h3><p>在上面的例子中，应该可以感受到如果启动的 service worker 最后还是决定发送网络请求的话，浏览器进程和渲染进程这一来一回的通信包括 service worker 启动的时间其实增加了页面导航的时延。<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L25hdmlnYXRpb24tcHJlbG9hZC8=" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;updates&#x2F;2017&#x2F;02&#x2F;navigation-preload">导航预加载<i class="fa fa-external-link-alt"></i></span>就是一种通过在 service worker 启动的时候并行加载对应资源的方式来加快整个导航过程效率的技术。预加载资源的请求头会有一些特殊的标志来让服务器决定是发送全新的内容给客户端还是只发送更新了的数据给客户端。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319154244-zhy5ua4.png" alt="image" title="UI线程在启动一个渲染进程去运行service worker代码的同时会并行发送网络请求">​</p>
<h2 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h2><h3 id="渲染进程处理页面内容"><a href="#渲染进程处理页面内容" class="headerlink" title="渲染进程处理页面内容"></a>渲染进程处理页面内容</h3><p>渲染进程负责标签（tab）内发生的所有事情。在渲染进程里面，主线程（main thread）处理了绝大多数你发送给用户的代码。如果你使用了 web worker 或者 service worker，相关的代码将会由工作线程（worker thread）处理。合成（compositor）以及光栅（raster）线程运行在渲染进程里面用来高效流畅地渲染出页面内容。</p>
<p><strong>渲染进程的主要任务是将 HTML，CSS，以及 JavaScript 转变为我们可以进程交互的网页内容</strong>。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319154659-kw7jd2v.png" alt="image" title="渲染进程里面有：一个主线程（main thread），几个工作线程（worker threads），一个合成线程（compositor thread）以及一个光栅线程（raster thread）">​</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>前面文章提到，渲染进程在导航结束的时候会收到来自浏览器进程提交导航（commit navigation）的消息，在这之后渲染进程就会开始接收 HTML 数据，同时主线程也会开始解析接收到的文本数据（text string）并把它转化为一个 DOM（<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel）对象</p>
<p><strong>DOM 对象既是浏览器对当前页面的内部表示，也是 Web 开发人员通过 JavaScript 与网页进行交互的数据结构以及 API</strong>。</p>
<p>如何将 HTML 文档解析为 DOM 对象是在<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcv" title="https:&#x2F;&#x2F;html.spec.whatwg.org&#x2F;">HTML 标准<i class="fa fa-external-link-alt"></i></span>中定义的。不过在你的 web 开发生涯中，你可能从来没有遇到过浏览器在解析 HTML 的时候发生错误的情景。<strong>这是因为浏览器对 HTML 的错误容忍度很大</strong>。举些例子：如果一个段落缺失了闭合 p 标签（</p>），这个页面还是会被当做为有效的 HTML 来处理；Hi! <b>I’m <i>Chrome</b>!</i> (闭合 b 标签写在了闭合 i 标签的前面) ，虽然有语法错误，不过浏览器会把它处理为 Hi! <b>I’m <i>Chrome</i></b><i>!</i>。如果你想知道浏览器是如何对这些错误进行容错处理的，可以参考 HTML 规范里面的<span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI2FuLWludHJvZHVjdGlvbi10by1lcnJvci1oYW5kbGluZy1hbmQtc3RyYW5nZS1jYXNlcy1pbi10aGUtcGFyc2Vy" title="https:&#x2F;&#x2F;html.spec.whatwg.org&#x2F;multipage&#x2F;parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser">An introduction to error handling and strange cases in the parser<i class="fa fa-external-link-alt"></i></span>内容。</p>
<h3 id="子资源加载"><a href="#子资源加载" class="headerlink" title="子资源加载"></a>子资源加载</h3><p>除了 HTML 文件，网站通常还会使用到一些诸如图片，CSS 样式以及 JavaScript 脚本等子资源。这些文件会从缓存或者网络上获取。主线程会按照在构建 DOM 树时遇到各个资源的循序一个接着一个地发起网络请求，可是为了提升效率，浏览器会同时运行“预加载扫描”（preload scanner）程序。如果在 HTML 文档里面存在诸如<img>或者<link>这样的标签，预加载扫描程序会在 HTML 解析器生成的 token 里面找到对应要获取的资源，并把这些要获取的资源告诉浏览器进程里面的网络线程。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319154933-woxzy57.png" alt="image" title="主线程会解析HTML内容并且构建出DOM树">​</p>
<h3 id="JavaScript-会阻塞-HTML-的解析过程"><a href="#JavaScript-会阻塞-HTML-的解析过程" class="headerlink" title="JavaScript 会阻塞 HTML 的解析过程"></a>JavaScript 会阻塞 HTML 的解析过程</h3><p>当 HTML 解析器碰到 script 标签的时候，它会停止 HTML 文档的解析从而转向 JavaScript 代码的加载，解析以及执行。为什么要这样做呢？因为 script 标签中的 JavaScript 可能会使用诸如<code>document.write()</code>​​ 这样的代码改变文档流（document）的形状，从而使整个 DOM 树的结构发生根本性的改变（HTML 规范里面的<span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI292ZXJ2aWV3LW9mLXRoZS1wYXJzaW5nLW1vZGVs" title="https:&#x2F;&#x2F;html.spec.whatwg.org&#x2F;multipage&#x2F;parsing.html#overview-of-the-parsing-model">overview of the parsing model 部分<i class="fa fa-external-link-alt"></i></span>有很好的示意图）。因为这个原因，HTML 解析器不得不等 JavaScript 执行完成之后才能继续对 HTML 文档流的解析工作。如果你想知道 JavaScipt 的执行过程都发生了什么，V8 团队有很多关于这个话题的<span class="exturl" data-url="aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL3NoYXBlcy1pY3M=" title="https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;shapes-ics">讨论<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="给浏览器一点如何加载资源的提示"><a href="#给浏览器一点如何加载资源的提示" class="headerlink" title="给浏览器一点如何加载资源的提示"></a>给浏览器一点如何加载资源的提示</h3><p>Web 开发者可以通过很多方式告诉浏览器如何才能更加优雅地加载网页需要用到的资源。如果你的 JavaScript 不会使用到诸如<code>document.write()</code>​​​ 的方式去改变文档流的内容的话，你可以为 script 标签添加一个<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NjcmlwdCNhdHRyLWFzeW5j" title="https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;script#attr-async">async<i class="fa fa-external-link-alt"></i></span>或者<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NjcmlwdCNhdHRyLWRlZmVy" title="https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;script#attr-defer">defer<i class="fa fa-external-link-alt"></i></span>属性来使 JavaScript 脚本进行异步加载。当然如果能满足到你的需求，你也可以使用<span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvZmVhdHVyZXMvbW9kdWxlcw==" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;primers&#x2F;modules">JavaScript Module<i class="fa fa-external-link-alt"></i></span>。</p>
<p>同时<code>&lt;link rel=&quot;preload&quot;&gt;</code>​​ 资源预加载可以用来告诉浏览器这个资源在当前的导航肯定会被用到，你想要尽快加载这个资源。更多相关的内容，你可阅读<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2Zhc3QvI3ByaW9yaXRpemUtcmVzb3VyY2Vz" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;resource-prioritization">Resource Prioritization - Getting the Browser to Help You<i class="fa fa-external-link-alt"></i></span>这篇文章。</p>
<h3 id="样式计算-Style-calculation"><a href="#样式计算-Style-calculation" class="headerlink" title="样式计算-Style calculation"></a>样式计算-Style calculation</h3><p>拥有了 DOM 树我们还不足以知道页面的外貌，因为我们通常会为页面的元素设置一些样式。主线程会解析页面的 CSS 从而确定每个 DOM 节点的计算样式（computed style）。计算样式是主线程根据 CSS 样式选择器（CSS selectors）计算出的每个 DOM 元素应该具备的具体样式，你可以打开 devtools 来查看每个 DOM 节点对应的计算样式。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319155519-mxelx7a.png" alt="image" title="主线程解析CSS来确定每个元素的样式">​</p>
<p>即使你的页面没有设置任何自定义的样式，每个 DOM 节点还是会有一个计算样式属性，这是因为每个浏览器都有自己的默认样式表。因为这个样式表的存在，页面上的 h1 标签一定会比 h2 标签大，而且不同的标签会有不同的 magin 和 padding。如果你想知道 Chrome 的默认样式是长什么样的，你可以直接查看<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuY2hyb21pdW0ub3JnL2Nocm9taXVtL2Nocm9taXVtL3NyYy8rL21haW46dGhpcmRfcGFydHkvYmxpbmsvcmVuZGVyZXIvY29yZS9odG1sL3Jlc291cmNlcy9odG1sLmNzcw==" title="https:&#x2F;&#x2F;cs.chromium.org&#x2F;chromium&#x2F;src&#x2F;third_party&#x2F;blink&#x2F;renderer&#x2F;core&#x2F;html&#x2F;resources&#x2F;html.css">代码<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="布局-Layout"><a href="#布局-Layout" class="headerlink" title="布局-Layout"></a>布局-Layout</h3><p>前面这些步骤完成之后，渲染进程就已经知道页面的具体文档结构以及每个节点拥有的样式信息了，可是这些信息还是不能最终确定页面的样子。举个例子，假如你现在想通过电话告诉你的朋友你身边的一幅画的内容：“画布上有一个红色的大圆圈和一个蓝色的正方形”，单凭这些信息你的朋友是很难知道这幅画具体是什么样子的，因为他不知道大圆圈和正方形具体在页面的什么位置，是正方形在圆圈前面呢还是圆圈在正方形的前面。</p>
<p>渲染网页也是同样的道理，只知道网站的文档流以及每个节点的样式是远远不足以渲染出页面内容的，还需要通过布局（layout）来计算出每个节点的<strong>几何信息</strong>（geometry）。布局的具体过程是：主线程会遍历刚刚构建的 DOM 树，根据 DOM 节点的计算样式计算出一个布局树（layout tree）。布局树上每个节点会有它在页面上的 x，y 坐标以及盒子大小（bounding box sizes）的具体信息。布局树长得和先前构建的 DOM 树差不多，不同的是这颗树只有那些可见的（visible）节点信息。举个例子，如果一个节点被设置为了<strong>display:none</strong>，这个节点就是不可见的就不会出现在布局树上面（<strong>visibility:hidden</strong>的节点会出现在布局树上面，你可以思考一下这是为什么）。同样的，如果一个伪元素（pseudo class）节点有诸如<code>p::before&#123;content:&quot;Hi!&quot;&#125;</code>​ 这样的内容，它会出现在布局上，而不存在于 DOM 树上。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319155728-zpsu03i.png" alt="image" title="主线程会遍历每个DOM tree节点的计算样式信息来生成一棵布局树">​</p>
<p>即使页面的布局十分简单，布局这个过程都是非常复杂的。例如页面就是简单地从上而下展示一个又一个段落，这个过程就很复杂，因为需要考虑段落中的字体大小以及段落在哪里需要进行换行之类的东西，它们都会影响到段落的大小以及形状，继而影响到接下来段落的布局。</p>
<p>如果考虑到 CSS 的话将会更加复杂，因为 CSS 是一个很强大的东西，它可以让元素悬浮（float）到页面的某一边，还可以遮挡住页面溢出的（overflow）元素，还可以改变内容的书写方向，所以单是想一下就知道布局这个过程是一个十分艰巨和复杂的任务。对于 Chrome 浏览器，有一整个负责布局过程的工程师团队。如果想知道他们工作的具体内容，他们在<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1ZNVhhNEgyd3RWQQ==" title="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Y5Xa4H2wtVA">BlinkOn Conference<i class="fa fa-external-link-alt"></i></span>上面的相关讨论被录制了下来。</p>
<h3 id="画-Paint"><a href="#画-Paint" class="headerlink" title="画-Paint"></a>画-Paint</h3><p>知道了 DOM 节点以及它的样式和布局其实还是不足以渲染出页面来的。为什么呢？举个例子，假如你现在想对着一幅画画一幅一样的画，你已经知道了画布上每个元素的大小，形状以及位置，你还是得思考一下每个元素的绘画顺序，因为画布上的元素是会互相遮挡的（z-index）。</p>
<p>举个例子，如果页面上的某些元素设置了<strong>z-index</strong>属性，绘制元素的顺序就会影响到页面的正确性。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319160030-3lh6wcl.png" alt="image" title="单纯按照HTML布局的顺序绘制页面的元素是错误的，因为元素的z-index元素没有被考虑到">​</p>
<p>在绘画这个步骤中，主线程会遍历之前的到的布局树（layout tree）来生成一系列的绘画记录（paint records）。绘画记录是对绘画过程的注释，例如“首先画背景，然后是文本，最后画矩形”。如果你曾经在 canvas 画布上有使用过 JavaScript 绘制元素，你可能会觉着这个过程不是很陌生。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319160057-3urea4i.png" alt="image" title="主线程遍历布局树来生成绘画记录">​</p>
<h3 id="高成本的渲染管线（rendering-pipeline）更新"><a href="#高成本的渲染管线（rendering-pipeline）更新" class="headerlink" title="高成本的渲染管线（rendering pipeline）更新"></a>高成本的<strong>渲染管线</strong>（rendering pipeline）更新</h3><p>关于渲染管线有一个十分重要的点就是管线的每一步都要使用到前一步的结果来生成新的数据，这就意味着如果某一步的内容发生了改变的话，这一步后面所有的步骤都要被重新执行以生成新的记录。举个例子，如果布局树有些东西被改变了，文档上那些被影响到的部分的绘画顺序是要重新生成的。</p>
<p><video controls="controls" src="./d7zOpwpNIXIoVnoZCtI9-20230319160219-xxe6fk0.mp4" data-src="./d7zOpwpNIXIoVnoZCtI9-20230319160219-xxe6fk0.mp4"></video></p>
<p>如果你的页面元素有动画效果（animating），浏览器就不得不在每个渲染帧的间隔中通过渲染管线来更新页面的元素。我们大多数显示器的刷新频率是一秒钟 60 次（60fps），如果你在每个渲染帧的间隔都能通过管线移动元素，人眼就会看到流畅的动画效果。可是如果管线更新时间比较久，动画存在丢帧的状况的话，页面看起来就会很“卡顿”。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319160317-cdcke9s.png" alt="image" title="时间轴上的动画帧">​</p>
<p>即使您的渲染操作跟上屏幕刷新，这些计算也在主线程上运行，这意味着当您的应用程序运行 JavaScript 时它可能会被阻塞。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319160347-cfhdaja.png" alt="image" title="时间轴上的动画帧，但其中一帧被 JavaScript 阻塞">​</p>
<p>对于这种情况，你可以将要被执行的 JavaScript 操作拆分为更小的块然后通过<code>requestAnimationFrame</code>​ 这个 API 把他们放在每个动画帧中执行。想知道更多关于这方面的信息的话，可以参考<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L29wdGltaXplLWphdmFzY3JpcHQtZXhlY3V0aW9uLw==" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;rendering&#x2F;optimize-javascript-execution">Optimize JavaScript Execution<i class="fa fa-external-link-alt"></i></span>。当然你还可以将 JavaScript 代码放在<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1YNTdtaDh0S2tnRQ==" title="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;X57mh8tKkgE">WebWorkers<i class="fa fa-external-link-alt"></i></span>中执行来避免它们阻塞主线程。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319160411-x3cu2fw.png" alt="image" title="在动画帧上运行一小段JavaScript代码">​</p>
<h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><h4 id="如何绘制一个页面？"><a href="#如何绘制一个页面？" class="headerlink" title="如何绘制一个页面？"></a>如何绘制一个页面？</h4><p>到目前为止，浏览器已经知道了关于页面以下的信息：文档结构，元素的样式，元素的几何信息以及它们的绘画顺序。那么浏览器是如何利用这些信息来绘制出页面来的呢？<strong>将以上这些信息转化为显示器的像素的过程叫做光栅化（rasterizing）</strong>。</p>
<p>可能一个最简单的做法就是只光栅化视口内（viewport）的网页内容。如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分。Chrome 的第一个版本其实就是这样做的。然而，对于现代的浏览器来说，它们往往采取一种更加复杂的叫做合成（compositing）的做法。</p>
<p><video controls="controls" src="./AiIny83Lk4rTzsM8bxSn-20230319160944-s4624os.mp4" data-src="./AiIny83Lk4rTzsM8bxSn-20230319160944-s4624os.mp4"></video></p>
<h4 id="什么是合成？"><a href="#什么是合成？" class="headerlink" title="什么是合成？"></a>什么是合成？</h4><p>合成是一种将页面分成若干层，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。</p>
<p>你可以通过<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vZWxpbWluYXRlLWNvbnRlbnQtcmVwYWludHMtd2l0aC10aGUtbmV3LWxheWVycy1wYW5lbC1pbi1jaHJvbWUtZTJjMzA2ZDRkNzUyLz9naT1jZDYyNzE4MzRjZWE=" title="https:&#x2F;&#x2F;blog.logrocket.com&#x2F;eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752?gi&#x3D;cd6271834cea">Layers panel<i class="fa fa-external-link-alt"></i></span>在 DevTools 查看你的网站是如何被浏览器分成不同的层的。</p>
<p><video controls="controls" src="./Aggd8YLFPckZrBjEj74H-20230319161204-jvnh77i.mp4" data-src="./Aggd8YLFPckZrBjEj74H-20230319161204-jvnh77i.mp4"></video></p>
<h4 id="页面分层"><a href="#页面分层" class="headerlink" title="页面分层"></a>页面分层</h4><p>为了确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（Layer Tree）（在 DevTools 中这一部分工作叫做“Update Layer Tree”）。如果页面的某些部分应该被放置在一个单独的层上面（滑动菜单）可是却没有的话，你可以通过使用<code>will-change</code>​ CSS 属性来告诉浏览器对其分层。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319161239-afiqzs9.png" alt="image" title="主线程遍历布局树来生成层次树">​</p>
<p>你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。想要获取关于这方面的更多信息，可以参考文章<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L3N0aWNrLXRvLWNvbXBvc2l0b3Itb25seS1wcm9wZXJ0aWVzLWFuZC1tYW5hZ2UtbGF5ZXItY291bnQv" title="https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;rendering&#x2F;stick-to-compositor-only-properties-and-manage-layer-count">Stick to Compositor-Only Properties and Manage Layer Count<i class="fa fa-external-link-alt"></i></span>。</p>
<h4 id="在主线程之外光栅化和合成页面"><a href="#在主线程之外光栅化和合成页面" class="headerlink" title="在主线程之外光栅化和合成页面"></a>在主线程之外光栅化和合成页面</h4><p>一旦页面的层次树创建出来并且页面元素的绘制顺序确定后，主线程就会向合成线程（compositor thread）提交这些信息。然后合成线程就会光栅化页面的每一层。因为页面的一层可能有整个网页那么大，所以合成线程需要将它们切分为一块又一块的小图块（tiles）然后将图块发送给一系列光栅线程（raster threads）。光栅线程会栅格化每个图块并且把它们存储在 GPU 的内存中。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319161506-eqfwdch.png" alt="image" title="光栅线程创建切片位图并发送到 GPU">​</p>
<p>合成线程可以给不同的光栅线程赋予不同的优先级（prioritize），进而使那些<strong>在视口中的或者视口附近的页面可以先被光栅化</strong>。为了响应用户对页面的放大和缩小操作，页面的图层（layer）会为不同的清晰度配备不同的图块。</p>
<p>当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做<strong>绘画四边形</strong>（draw quads）的信息来构建一个<strong>合成帧</strong>（compositor frame）。</p>
<ul>
<li>绘画四边形：包含图块在<strong>内存的位置</strong>以及图层合成后图块在页面的位置之类的信息。</li>
<li>合成帧：代表页面一个帧的内容的绘制四边形<strong>集合</strong>。</li>
</ul>
<p>上面的步骤完成之后，合成线程就会通过 IPC 向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的 UI 线程（UI thread）提交以改变浏览器的 UI。这些合成帧都会被发送给 GPU 从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给 GPU 来更新页面。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319161750-ist00f7.png" alt="image" title="合成线程构建出合成帧，合成帧会被发送给浏览器进程然后再发送给GPU">​</p>
<p>合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及 JavaScript 完成执行。这也就是为什么说<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2FuaW1hdGlvbnMtZ3VpZGUv" title="https:&#x2F;&#x2F;www.html5rocks.com&#x2F;en&#x2F;tutorials&#x2F;speed&#x2F;high-performance-animations&#x2F;">只通过合成来构建页面动画<i class="fa fa-external-link-alt"></i></span>是构建流畅用户体验的最佳实践的原因了。如果页面需要被重新布局或者绘制的话，主线程一定会参与进来的。</p>
<h3 id="从浏览器的角度来看输入事件"><a href="#从浏览器的角度来看输入事件" class="headerlink" title="从浏览器的角度来看输入事件"></a>从浏览器的角度来看输入事件</h3><p>当你听到“输入事件”（input events）的时候，你可能只会想到用户在文本框中输入内容或者对页面进行了点击操作，可是从浏览器的角度来看的话，输入其实代表着来自于用户的任何手势动作（gesture）。所以用户<code>滚动页面</code>​，<code>触碰屏幕</code>​ 以及<code>移动鼠标</code>​ 等操作都可以看作来自于用户的输入事件。</p>
<p>当用户做了一些诸如触碰屏幕的手势动作时，浏览器进程（browser process）是第一个可以接收到这个事件的地方。可是浏览器进程只能知道用户的手势动作发生在什么地方而不知道如何处理，这是因为标签内（tab）的内容是由页面的渲染进程（render process）负责的。因此浏览器进程会将事件的类型（如<code>touchstart</code>​）以及坐标（coordinates）发送给渲染进程。为了可以正确地处理这个事件，渲染进程会找到事件的目标对象（target）然后运行这个事件绑定的监听函数（listener）。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319162855-53s7ztj.png" alt="image" title="点击事件从浏览器进程路由到渲染进程">​</p>
<h3 id="合成线程接收到输入事件"><a href="#合成线程接收到输入事件" class="headerlink" title="合成线程接收到输入事件"></a>合成线程接收到输入事件</h3><p>如果当前页面不存在任何用户事件的监听器（event listener），合成线程完全不需要主线程的参与就能创建一个新的合成帧来响应事件。可是如果页面有一些事件监听器（event listeners）呢？合成线程是如何判断出这个事件是否需要路由给主线程处理的呢？</p>
<h3 id="理解非快速滚动区域-non-fast-scrollable-region"><a href="#理解非快速滚动区域-non-fast-scrollable-region" class="headerlink" title="理解非快速滚动区域 - non-fast scrollable region"></a>理解非快速滚动区域 - non-fast scrollable region</h3><p>因为页面的 JavaScript 脚本是在主线程（main thread）中运行的，所以当一个页面被合成的时候，合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（Non-fast Scrollable Region）。由于知道了这些信息，当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无须主线程的参与来合成一个新的帧。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319163059-bwu8ou0.png" alt="image" title="非快速滚动区域有用户事件发生时的示意图">​</p>
<h3 id="编写事件处理程序时要注意"><a href="#编写事件处理程序时要注意" class="headerlink" title="编写事件处理程序时要注意"></a>编写事件处理程序时要注意</h3><p>Web 开发的一个常见的模式是事件委托（event delegation）。由于事件会冒泡，你可以给顶层的元素绑定一个事件监听函数来作为其所有子元素的事件委托者，这样子节点的事件就可以统一被顶层的元素处理了。因此你可能看过或者写过类似于下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">target</span> === area) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>只用一个事件监听器就可以服务到所有的元素，乍一看这种写法还是挺实惠的。可是，如果你从浏览器的角度去看一下这段代码，你会发现上面给 body 元素绑定了事件监听器后其实是将整个页面都标记为一个非快速滚动区域，这就意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（smooth scrolling ability）。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319163253-7ffs4bl.png" alt="image" title="当整个页面都是非快速滚动区域时页面的事件处理示意图">​</p>
<p>为了减轻这种情况的发生，您可以为事件监听器传递<code>passive：true</code>​ 选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;touchstart&quot;</span>,</span><br><span class="line">  <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span> === area) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="检查事件是否可取消"><a href="#检查事件是否可取消" class="headerlink" title="检查事件是否可取消"></a>检查事件是否可取消</h3><p>假设您在页面中有一个框，您希望将滚动方向限制为仅水平滚动。</p>
<p>在您的指针事件中使用<code>passive: true</code>​ 选项意味着页面滚动可以平滑，但垂直滚动可能已经在您想要的时间开始，<code>preventDefault</code>​ 以限制滚动方向。您可以使用方法对此进行检查<code>event.cancelable</code>​。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319163754-0xaztgz.png" alt="image" title="部分页面固定为水平滚动的网页">​</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;pointermove&quot;</span>,</span><br><span class="line">  <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">cancelable</span>) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>(); <span class="comment">// block the native scroll</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       *  do what you want the application to do here</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>或者，您可以使用 CSS 规则来<code>touch-action</code>​ 完全消除事件处理程序。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#area</span> &#123;</span><br><span class="line">  <span class="attribute">touch-action</span>: pan-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找事件的目标对象（event-target）"><a href="#查找事件的目标对象（event-target）" class="headerlink" title="查找事件的目标对象（event target）"></a>查找事件的目标对象（event target）</h3><p>当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试（hit test）去找到事件的目标对象（target）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（paint records）来找到输入事件出现的 x, y 坐标上面描绘的对象是哪个。</p>
<p>Hit test：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjA0OTk4NjgwMDY2ODgzNjQy">判断用户的鼠标或触摸点是否与页面上的某个元素相交的过程。它是一种消耗性能的操作，因为浏览器需要遍历页面上的所有元素，从最顶层开始，找到与用户输入点重叠的元素<i class="fa fa-external-link-alt"></i></span>​<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjA0OTk4NjgwMDY2ODgzNjQy">^1^<i class="fa fa-external-link-alt"></i></span>。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319163931-uh70rnd.png" alt="image" title="主线程通过遍历绘画记录来确定在x，y坐标上的是哪个对象">​</p>
<h3 id="最小化发送给主线程的事件数"><a href="#最小化发送给主线程的事件数" class="headerlink" title="最小化发送给主线程的事件数"></a>最小化发送给主线程的事件数</h3><p>对于用户输入来说，触摸屏一般一秒钟会触发 60 到 120 次点击事件，而鼠标一般则会每秒触发 100 次事件，因此输入事件的触发频率其实远远高于我们屏幕的刷新频率。</p>
<p>如果每秒将诸如<code>touchmove</code>​ 这种连续被触发的事件发送到主线程 120 次，因为屏幕的刷新速度相对来说比较慢，它可能会触发过量的命中测试以及 JavaScript 代码的执行。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319164401-5hgux1w.png" alt="image" title="事件淹没了屏幕刷新的时间轴，导致页面很卡顿">​</p>
<p>为了最大程度地减少对主线程的过多调用，Chrome 会合并连续事件（例如<code>wheel</code>​，<code>mousewheel</code>​，<code>mousemove</code>​，<code>pointermove</code>​，<code>touchmove</code>​），并将调度延迟到下一个<code>requestAnimationFrame</code>​ 之前。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319164437-37sper5.png" alt="image" title="和之前相同的事件轴，可是这次事件被合并并延迟调度了">​</p>
<p>任何诸如<code>keydown</code>​，<code>keyup</code>​，<code>mouseup</code>​，<code>mousedown</code>​，<code>touchstart</code>​ 和<code>touchend</code>​ 等相对不怎么频繁发生的事件都会被立即派送给主线程。</p>
<h3 id="使用-getCoalesecedEvents-来获取帧内（intra-frame）事件"><a href="#使用-getCoalesecedEvents-来获取帧内（intra-frame）事件" class="headerlink" title="使用 getCoalesecedEvents 来获取帧内（intra-frame）事件"></a>使用 getCoalesecedEvents 来获取帧内（intra-frame）事件</h3><p>对于大多数 web 应用来说，合并事件应该已经足够用来提供很好的用户体验了，然而，如果你正在构建的是一个根据用户的<code>touchmove</code>​ 坐标来进行绘图的应用的话，合并事件可能会使页面画的线不够顺畅和连续。在这种情况下，你可以使用鼠标事件的<code>getCoalescedEvents</code>​ 来获取被合成的事件的详细信息。</p>
<p>​<img data-src="/blog/./%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84/image-20230319164547-gn34roi.png" alt="image" title="左边是顺畅的触摸手势，右边是事件合成后不那么连续的手势">​</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">window<span class="selector-class">.addEventListener</span>(&#x27;pointermove&#x27;, event =&gt; &#123;</span><br><span class="line">    const events = event<span class="selector-class">.getCoalescedEvents</span>();</span><br><span class="line">    for (let event of events) &#123;</span><br><span class="line">        const <span class="attribute">x</span> = event<span class="selector-class">.pageX</span>;</span><br><span class="line">        const <span class="attribute">y</span> = event<span class="selector-class">.pageY</span>;</span><br><span class="line">        // draw <span class="selector-tag">a</span> <span class="selector-tag">line</span> using <span class="attribute">x</span> and <span class="attribute">y</span> coordinates.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="done！"><a href="#done！" class="headerlink" title="done！"></a>done！</h1>]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
  </entry>
  <entry>
    <title>第七章：z-buffer和着色</title>
    <url>/blog/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9Az-buffer%E5%92%8C%E7%9D%80%E8%89%B2/</url>
    <content><![CDATA[<p>回顾上一课：</p>
<ul>
<li><p>光栅化一个三角形</p>
</li>
<li><p>采样</p>
</li>
<li><p>反走样</p>
</li>
</ul>
<p>可见性&#x2F;遮挡（把三角形画在屏幕上，同时遮挡关系是对的）：</p>
<ul>
<li>z-buffer</li>
</ul>
<p><strong>painter’s algorithm（画家算法）</strong></p>
<p>所有物体按深度排序（O(nlogn)），先把远的画上去，再把近的画上去，近的就会遮挡远的。但这种方式无法解决深度上互相遮挡的问题。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210915-pvb608h.png" alt="image">​</p>
<p><strong>z-buffer</strong></p>
<p>通过深度缓存维护存储每个像素当前的最小深度</p>
<p>同步生成最后的结果（frame buffer）和当前看到的场景的任何一个像素对应的深度（depth buffer）。</p>
<p>假设场景的点到相机的距离表示深度z，且这个值始终是正的，z越小的距离越近，越大的距离越远。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210941-qrlgori.png" alt="image">​</p>
<p>先假设深度图上每一个像素的深度都是无限远，遍历每一个三角形的每一个像素，如果遍历到的像素深度比当前深度图记录的深度浅，就把深度图上的深度替换为这个像素的深度，否则不变。</p>
<p>假设每个三角形覆盖的像素是常数项，时间复杂度O(n)。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210946-n9bslnc.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210954-8g8lbbc.png" alt="image">​</p>
<p>一般两个浮点数值不会一样，所以比较深度的时候一般不会出现深度一样的情况。</p>
<p>MSAA采样的时候一个像素可能有多个采样点，所以是记录每个采样点的深度。</p>
<p>透明物体处理不了深度。</p>
<h4 id="着色（shading）"><a href="#着色（shading）" class="headerlink" title="着色（shading）"></a><strong>着色（shading）</strong></h4><p>对不同物体应用不同的材质。</p>
<p>一个基础的着色模型（Blinn-Phong 反射模型）</p>
<p>高光、漫反射、环境光</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211003-0egfb17.png" alt="image">​</p>
<p>对于一个物体表面的点，定义一个法线方向、一个视线方向、一个光照方向，和一些物体表面的参数</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211128-xr0alxy.png" alt="image">​</p>
<p>着色有局部性。不考虑其他的物体，只考虑自己。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211133-dna2cne.png" alt="image">​</p>
<p>一个shading point周围的单位面积接收的能量和光照方向和发现方向夹角的余弦成正比。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211139-xxs0w84.png" alt="image">​</p>
<p>点光源，光线传播，每个时刻到达一个新的球壳。假如半径为1的时候，光的强度为I，则半径为r的时候，强度变为I&#x2F;r²</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211145-vw9pz1f.png" alt="image">​</p>
<p>从不同的角度观测同一个点的结果是一样的。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211149-t038nb0.png" alt="image">​</p>
<p>k_(d)  漫反射的系数，表示吸收了（反射了）多少颜色颜色。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211154-nrtvz3z.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第三章：变换</title>
    <url>/blog/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><p>本章学习内容：</p>
<ul>
<li>为什么学习变换</li>
<li>2 维空间变换：旋转、缩放和切片</li>
<li>齐次坐标</li>
<li>变换组合（不同的变换组合形新的变换）</li>
<li>3 维空间变换</li>
</ul>
<h4 id="为什么学习变换"><a href="#为什么学习变换" class="headerlink" title="为什么学习变换"></a>为什么学习变换</h4><p>变换分为：模型变换、视图变换</p>
<p>变换的重要应用：</p>
<p>modeling translation：描述摄像机的运动（位置移动）</p>
<p>modeling rotation：机器人动画关节转动，逆运动学</p>
<p>modeling scale：皮克斯开场动画 </p>
<p>viewing：3 维到 2 维投影</p>
<h4 id="二维变换"><a href="#二维变换" class="headerlink" title="二维变换"></a>二维变换</h4><p>scale matrix 缩放</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204136-qxvt0ld.png" alt="image">​</p>
<p>reflection matrix 反射（对称）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204147-vqe87zn.png" alt="image">​</p>
<p>shear matrix 切变</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204154-8vcpz15.png" alt="image">​</p>
<p>rotation matrix 旋转</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204201-y4nybe9.png" alt="image">​</p>
<p>（同维度的）矩阵乘输入坐标可以得到输出到坐标叫做线性变换</p>
<h4 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h4><p>平移变换不能直接表示为矩阵乘坐标，需要加一个向量</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204222-f32ucjb.png" alt="image">​</p>
<p>引入齐次坐标是为了找到一个解决方法统一表示二维变换</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204300-jhy7t5e.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204339-hdzd9sz.png" alt="image">​​​</p>
<p>线性变化 + 平移可以统称为仿射变换，这种仿射变换都可以都可以转换为齐次坐标的形式。用一个矩阵可以统一所有的操作</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204358-hjfetw8.png" alt="image">​</p>
<p>最后一行永远是 0 0 1</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204406-9c74516.png" alt="image">​</p>
<p>逆变换（变换操作反过来，乘以变换的逆矩阵）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204416-s93vg8b.png" alt="image">​</p>
<h4 id="变换组合"><a href="#变换组合" class="headerlink" title="变换组合"></a>变换组合</h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204426-omsp01l.png" alt="image">​</p>
<p>先平移再旋转</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204433-fslqzhf.png" alt="image">​</p>
<p>先旋转再平移</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204441-uhltcjb.png" alt="image">​</p>
<p>复杂的变换可以通过简单的变换得到</p>
<p>变换的顺序非常重要（矩阵乘法的顺序影响结果）</p>
<p>变换组合从右到左应用矩阵</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204455-01rrf9f.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204509-qmc17ai.png" alt="image">​​</p>
<p>变换分解</p>
<p>如果希望在非原点旋转，可以把旋转点平移到原点后再进行旋转，旋转后再平移回去</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204520-braqfca.png" alt="image">​</p>
<h4 id="三维变换"><a href="#三维变换" class="headerlink" title="三维变换"></a>三维变换</h4><p>与 2 维类似</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204527-f0sng0l.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第九章：重心坐标、纹理</title>
    <url>/blog/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87%E3%80%81%E7%BA%B9%E7%90%86/</url>
    <content><![CDATA[<p>着色 1-2</p>
<ul>
<li><p>Blinn-Phong 反射模型（</p>
<ul>
<li>高光、漫反射、环境光，如何定义材质不同的表面和光线如何作用，可以得到不同的外观</li>
</ul>
</li>
<li><p>着色模型&#x2F;频率</p>
<ul>
<li>flat shading、gouraud shading、Phong shading</li>
</ul>
</li>
<li><p>实时渲染管线（vertax processing，fragment processing）</p>
</li>
<li><p>纹理映射</p>
</li>
</ul>
<p>本节课</p>
<p>着色 3</p>
<ul>
<li>重心坐标（插值）</li>
<li>纹理怎么贴</li>
<li>纹理的应用</li>
</ul>
<p><strong>重心坐标</strong></p>
<p>为什么要做插值？</p>
<ul>
<li>希望在属性三角形内部做一个平滑的过渡</li>
</ul>
<p>需要插值哪些内容？</p>
<ul>
<li>纹理的坐标：三角形不同的顶点可以对应纹理的一个顶点，那么三角形内部就可以对应纹理的不同坐标</li>
<li>颜色：逐顶点插值得到三角形内部的颜色</li>
<li>法线</li>
</ul>
<p>如何在三角形内部做属性的插值？</p>
<ul>
<li>引入重心坐标</li>
</ul>
<h4 id="什么是重心坐标"><a href="#什么是重心坐标" class="headerlink" title="什么是重心坐标"></a>什么是重心坐标</h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212055-jnje6kl.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212059-5qtuxfj.png" alt="image">​</p>
<p>三角形平面内的任意（x,y）都可以表示为顶点的线性组合</p>
<p>如果这个点要在三角形内，α，β，γ 必须都为非负数</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212105-7dke1bs.png" alt="image">​</p>
<p>可以通过面积比计算 α，β，γ，已经一个点的坐标和三个顶点的坐标，做叉乘可以计算每个三角形对面积</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212110-tb8xq9a.png" alt="image">​</p>
<p>三角形的重心，把三角形等面积地分为了三部分，因此重心坐标 α，β，γ 都是 1&#x2F;3。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212115-4fyu6h0.png" alt="image">​</p>
<p>也可以用公式进行计算</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212119-7yfx4en.png" alt="image">​</p>
<p>得到三角形里任意一个点的重心坐标后，就可以对属性（颜色、法线、深度）做线性插值。</p>
<p>重心坐标问题：在投影变换下重心坐标不能保持不变。所以做插值的时候，如果取的是三维空间中的坐标，只能在三维空间下做插值，不能投影到二维再做插值。</p>
<h4 id="纹理应用"><a href="#纹理应用" class="headerlink" title="纹理应用"></a><strong>纹理应用</strong></h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212126-f1ja7qa.png" alt="image"></p>
<p>每个屏幕上的采样点坐标对应一个纹理坐标，设置采样颜色为纹理颜色。</p>
<p>纹理应用过程中会遇到一些问题：<br>纹理放大</p>
<p>如果纹理图片太小了</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212136-vwh2tdy.png" alt="image">​</p>
<p>Nearest：一个屏幕上的像素点对应的纹理坐标可能是小数，可以四舍五入为整数，使用用整数对应的纹理像素（texel），即多个像素可能对应同一个纹素。</p>
<p>Bilinear（双线性插值）平滑过渡：</p>
<p>先水平方向做插值，再竖直方向做插值。（方向反过来也是一样）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212142-432dvdh.png" alt="image">​</p>
<p>Bicubic 插值：取临近的 16 个点。</p>
<p>如果纹理图片太大了</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212146-ybw1kqq.png" alt="image">​</p>
<p>一个像素覆盖多个纹素，直接用像素中心点采样会出现走样问题</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212151-yzdv3iw.png" alt="image">​</p>
<h4 id="反走样"><a href="#反走样" class="headerlink" title="反走样"></a><strong>反走样</strong></h4><p>用超采样的方式，一个像素采用多个采样点进行采样，但这样会造成很大的成本</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212157-hiw1z5j.png" alt="image">​</p>
<p>可以采用另一种方式：Range Query，给定一块区域，快速求出其平均值。</p>
<p>Mipmap：快速，近似，正方形的范围查询。</p>
<p>渲染之前，先生成 Mipmap</p>
<p>每层像素小一半</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212205-y6dpwtl.png" alt="image">​</p>
<p>计算机视觉里面会用图像金字塔表示</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212212-c292iom.png" alt="image">​</p>
<p>最后的存储量是之前的 3&#x2F;4。用四个像素中心点投影到纹理坐标，像素点最大的连线模拟纹理坐标中一个对应的一个方形像素的边长。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212216-ofuai5f.png" alt="image">​</p>
<p>D 是层数，L 是一个屏幕像素对应的纹理像素。求出在第几层一个屏幕像素对应的纹理像素会变成一个像素大小，就用这一层的 MipMap，快速求出范围平均值。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212223-a6eua3w.png" alt="image">​</p>
<p>但这样查询可能出现不连续的问题，比如在近的地方用低层，远的地方用高层，但是每一层之间是不连续的。</p>
<p>如果要求两层中间的值，这个时候又可以用双线性插值把两层的结果求出来，再对两层求出来的值合在一起再在层与层之间做线性插值。即三线形插值：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212229-u1nl40f.png" alt="image">​</p>
<p>三线形插值的结果就是连续的：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212233-a5auinh.png" alt="image">​</p>
<p>但由于 mipmap 限制在方块区域内，且插值都是近似结果，所以会出现 OverBlur 现象</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212240-kynmszt.png" alt="image">​</p>
<p>可以用各向异性过滤（Anisotropic）来解决</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212244-wwuvaat.png" alt="image">​</p>
<p>分层时把图片长宽方向压缩，这样屏幕像素就可以对应纹理坐标系中的一个矩形区域，而不局限于一个方形区域。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212250-9252tym.png" alt="image">​</p>
<h4 id="各向异性过滤（RipMaps）要三倍的额外存储空间"><a href="#各向异性过滤（RipMaps）要三倍的额外存储空间" class="headerlink" title="各向异性过滤（RipMaps）要三倍的额外存储空间"></a>各向异性过滤（RipMaps）要三倍的额外存储空间</h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212255-54hzxxx.png" alt="image">​</p>
<p>对于斜着的矩形区域还是不能正常模拟，因此还有其他的过滤方式：</p>
<p>EWA 过滤</p>
<p>任意一个不规则的形状都可以拆成多个圆形，覆盖在不规则的形状上，每次查询一个圆形，多次查询。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212304-vuf9svm.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第二十一章：Animation、Simulation</title>
    <url>/blog/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9AAnimation%E3%80%81Simulation/</url>
    <content><![CDATA[<p>Animation&#x2F;Simulation</p>
<p>计算机动画介绍：</p>
<ul>
<li>历史</li>
<li>基本制作方法：关键帧</li>
<li>物理模拟方法</li>
<li>运动学</li>
<li>rigging（绑定动画）</li>
</ul>
<p>动画最初的定义“让东西动起来”：</p>
<ul>
<li>一种交流的工具，展示动起来的东西</li>
<li>美学</li>
</ul>
<p>对于建模或者几何的拓展</p>
<ul>
<li>把 3D 模型延伸到时间的纬度</li>
</ul>
<p>动画怎么制作</p>
<ul>
<li>把很多图按顺序，按一定速度去播放（人眼有视觉暂留的效果）</li>
</ul>
<p>虚拟现实为了让人们带头戴设备不晕，对帧率要求非常高（2 只眼睛必须达到 90fps）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212848-injp93u.png" alt="image">​</p>
<p>动画的发展​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212854-ndj2f72.png" alt="image">​</p>
<p>电影技术的历史<br />最早电影技术用于科学研究（比如生物学研究）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212906-dnxd3g5.png" alt="image">​</p>
<p>第一部手绘 Feature-Length 动画​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212910-465iyii.png" alt="image">​</p>
<p>第一部数字动画​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212914-ac10gz7.png" alt="image">​</p>
<p>早期计算机动画​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212918-zlqd2p3.png" alt="image">​</p>
<p>电脑生成的恐龙​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212922-zod4uuh.png" alt="image">​</p>
<p>玩具总动员（里程碑式的，整个电影都是用 CG 生成的，用光栅化的效果生成阴影）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212927-kn2z84p.png" alt="image">​</p>
<p>关键帧</p>
<p>关键帧能定义动画的总的走向</p>
<p>10 年前（食破天惊）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212932-tfl3o4n.png" alt="image">​</p>
<p>近年（冰雪奇缘 2）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212936-zyspnsj.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212943-ctpth6m.png" alt="image">​关键帧插值​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212947-ncw50fv.png" alt="image">​</p>
<p>线性插值不够连续，所以去要用到一些样条去做到更光滑的插值​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212953-s28xvi5.png" alt="image">​</p>
<h4 id="物理模拟"><a href="#物理模拟" class="headerlink" title="物理模拟"></a>物理模拟</h4><p>牛顿第二定律：F&#x3D;ma，只要知道一些初始条件，比如物体的初始位置，受到的力，可以动态算出物体的位置。</p>
<p>物体仿真</p>
<p>建立正确的受力模型​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212958-iai570w.png" alt="image">​</p>
<p>布料的模拟（模拟的不对会发生穿模的现象，比如衣服穿透了人的身体）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213003-6bmut2k.png" alt="image">​</p>
<h5 id="流体："><a href="#流体：" class="headerlink" title="流体："></a>流体：</h5><p>分为两步：1.模拟水是怎么运动的，拿到水的形状、位置。2.把结果拿去渲染​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213008-k73xjhh.png" alt="image">​</p>
<h5 id="质点弹簧系统模拟绳子的运动​​"><a href="#质点弹簧系统模拟绳子的运动​​" class="headerlink" title="质点弹簧系统模拟绳子的运动​​"></a>质点弹簧系统模拟绳子的运动​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213013-egmcdn8.png" alt="image">​</h5><h5 id="模拟头发的运动"><a href="#模拟头发的运动" class="headerlink" title="模拟头发的运动"></a>模拟头发的运动</h5><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213018-4fqjavn.png" alt="image">​</p>
<p>用点符号表示求导</p>
<p>一块布可以用很多的质点弹簧进行模拟​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213028-2371bm8.png" alt="image">​</p>
<p>简单的弹簧</p>
<p>理想的弹簧：a 受到的弹簧把 a 拉向 b 的力 fa-&gt;b &#x3D; ks(b-a)，b 受到的力与 a 相反力的大小和 a、b 间的距离成正比（胡克定律），ks 是弹性系数​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213031-1gwdpty.png" alt="image">​</p>
<p>被拉伸的弹簧</p>
<p>a 受到的力等于弹簧质点间的距离绝对值减去弹簧原本长度，再乘以 a 到 b 的方向的单位向量。问题是：弹窗不会停下来。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213037-ql0mn1f.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213043-0lmyjru.png" alt="image">​质点在运动过程中的能量损失，可以用摩擦系数来计算。表现起来就像是质点运动的时候有一个拉力，使得质点的速度慢下来。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213049-w5efpt7.png" alt="image">​</p>
<p>但也存在一个问题，这样做摩擦系数他会同时作用于两个质点，让所有的运动都慢下来（比如弹簧从高处落下来降到地上速度也会降低），但我们想要的是质点之间的关系。</p>
<p>我们把弹簧的摩擦系数与质点之间的速度差做乘积，并在物体运动方向做投影，此时阻力仅在质点之间作用，不会影响整体。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213053-s2s9qf2.png" alt="image">​</p>
<p>弹簧结构​</p>
<p><img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213057-4mq04gb.png" alt="image">​</p>
<p>模拟一块布的时候，会遇到一些问题：</p>
<p>1.这个结构无法承受对角线方向的剪力</p>
<p>2.这个结构无法抵抗平面外的弯曲（比如把一张纸对折时，基本对折处的节点不会受到周围节点对抗的力，但是对于布而言，显然折叠时，折叠处的节点会受到周围节点的拉力）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213108-ntv3bsg.png" alt="image">​</p>
<p>这个时候可以往剪力作用的方向的垂直方向加一个约束，此时可以对抗一个方向上的剪力，但还是无法对抗平面外的弯曲。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213112-ez1kdm2.png" alt="image">​</p>
<p>再往另一个方向加一个约束，此时可以对抗两个方向的剪力，但还是无法对抗平面外弯曲​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213119-srnkhm1.png" alt="image">​</p>
<p>在节点间跳连，来对抗平面外的弯曲，同时这个连接应该是一种较弱的起辅助作用的连接​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213128-gkyneu3.png" alt="image">​</p>
<p>最后，可以得到一个比较好的对布的模拟：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213132-aw10l3w.png" alt="image">​</p>
<p>除了质点弹窗系统外，还可以用有限元的方法进行布的运动的模拟，运动从一个位置传递到另一个位置。</p>
<h4 id="粒子系统"><a href="#粒子系统" class="headerlink" title="粒子系统"></a>粒子系统</h4><p>有一些运动可以用大量粒子来模拟，比如说雾、沙子，在游戏中有广泛的应用。<br />粒子系统需要计算每个粒子受到的力，优点是易于理解和实现，可以用少量粒子来体现速度，更多的粒子来体现复杂度。缺点是有一些场景需要大量的粒子，比如说模拟流体，同时一个粒子会受到四周其他粒子的力的作用，这些计算需要用到加速结构。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213138-hjeok4e.png" alt="image">​</p>
<p>粒子系统动画制作的步骤：<br>对于每一帧的运动：<br>1.创造一些粒子</p>
<p>2.计算每个粒子受到的作用力</p>
<p>3.更新粒子的位置和速度</p>
<p>4.移除死掉的粒子</p>
<p>5.渲染</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213144-k4aaya5.png" alt="image">​</p>
<p>粒子系统的受力：</p>
<p>1.引力和斥力</p>
<p>2.摩擦力</p>
<p>3.碰撞</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213150-xbzpva9.png" alt="image">​</p>
<p>粒子间的引力：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213158-n6qmgmm.png" alt="image">​</p>
<p>模拟星云：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213202-uuhi1so.png" alt="image">​</p>
<p>模拟流体：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213206-p3x72r3.png" alt="image">​</p>
<p>粒子系统就是对一个群里中的个体的运动进行计算</p>
<p>模拟鸟群，把每只鸟作为一个粒子，鸟的运动遵循一些基本规则：</p>
<p>1.每个鸟会受到周围鸟的吸引</p>
<p>2.每个个体之间有一段距离（斥力）</p>
<p>3.所有鸟基本都朝着一个方向运动​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213211-i8kp8gb.png" alt="image">​</p>
<p>模拟分子运动​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213215-wqpkbdp.png" alt="image">​</p>
<h4 id="正向运动学"><a href="#正向运动学" class="headerlink" title="正向运动学"></a>正向运动学</h4><p>骨骼的表示：<br>1.拓扑结构（找到每个骨骼相连的骨骼）</p>
<p>2.关节处的几何关系</p>
<p>3.树状结构：</p>
<p>关节的连接类型</p>
<p>1.一维的铰连接</p>
<p>2.二维的球关节</p>
<p>3.平移关节​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213223-7wbmkrp.png" alt="image">​</p>
<p>2d 模拟一个两段的手臂：先算出第一个关节的旋转角，再算出第二个关节的旋转角​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213229-uxjwf4f.png" alt="image">​</p>
<p>动画可以表示为时间和角度的函数​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213233-tqx7asr.png" alt="image">​</p>
<p>正向运动学的优缺点：<br>优点：</p>
<p>运动的控制很方便，实现方式也很直接</p>
<p>缺点：物体表示和艺术家们想要的动画效果不一致，花费太多时间​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213237-g7l0pby.png" alt="image">​</p>
<h4 id="逆向运动学"><a href="#逆向运动学" class="headerlink" title="逆向运动学"></a>逆向运动学</h4><p>从运动的顶点推测中间的位置​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213240-xxz7wwx.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213244-ili860d.png" alt="image">​逆向运动学下的模拟的手臂运动的求解​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213249-0jafn1c.png" alt="image">​</p>
<p>逆向运动学的困难点：</p>
<p>可能有多个解或者没有解​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213253-gxqn0qo.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213257-c1k6gsk.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213311-t2k0d1w.png" alt="image">​因此会用到一些优化算法（比如梯度优化算法）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213318-arlr0bx.png" alt="image">​</p>
<p>逆向运动学的模拟 demo​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213324-hsyrhfv.png" alt="image">​</p>
<h4 id="Rigging"><a href="#Rigging" class="headerlink" title="Rigging"></a>Rigging</h4><p>就像牵线木偶一样，捕捉所有特征的变化，但制作成本很大，同时需要艺术和技术上的训练：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213330-yrtkw9l.png" alt="image">​</p>
<p>Blend Shapes</p>
<p>对两个面做插值，计算从一个面到另一个面变化的中间态。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213334-px0wl9y.png" alt="image">​</p>
<h4 id="运动捕捉"><a href="#运动捕捉" class="headerlink" title="运动捕捉"></a>运动捕捉</h4><p>记录真实世界的运动，在大量数据中提取某一个动作。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213338-x6pa6de.png" alt="image">​</p>
<p>运用最多的还是光学的</p>
<p>运动捕捉的优缺点：<br>优点：可以快速捕捉大量真实数据，效果的真实性很高</p>
<p>缺点：成本很大，捕捉的运动效果无法满足艺术家的需求（动画可以需要更夸张的运动）</p>
<p>运动捕捉设备：光学的、电磁波的、机械的​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213343-fh06ewa.png" alt="image">​</p>
<p>运用最多的还是光学的​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213347-nargvr7.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213352-tauyql9.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213357-pfjw1bf.png" alt="image">​面部的动画模拟​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213402-afz91t3.png" alt="image">​</p>
<p>当模拟的动画过于接近真实人类时，会有恐怖谷效应</p>
<p>面部表情捕捉​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213406-ncqy94v.png" alt="image">​</p>
<p>电影的生产线​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213411-b3rw3wd.png" alt="image">​</p>
<p>下一节课：<br>怎么通过力、物理理论模拟真实的运动 </p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第二十二章：动画和仿真</title>
    <url>/blog/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%8A%A8%E7%94%BB%E5%92%8C%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<p>动画和仿真</p>
<p>上节课主要说到了模拟各种运动的各种知识，比如定义一个物体的速度、加速度，就自然能算出来物体在某个时刻出现在某个位置。</p>
<p>这节课从上节课的概念出发，说一下具体的解法，怎么计算物体在不同时间出现的位置。</p>
<p>本节课的主要内容：</p>
<p>单粒子模拟</p>
<ul>
<li><p>欧拉方法</p>
</li>
<li><p>解决不稳定的提高的若干办法</p>
</li>
</ul>
<p>刚体模拟</p>
<p>流体模拟</p>
<h4 id="单粒子模拟"><a href="#单粒子模拟" class="headerlink" title="单粒子模拟"></a><strong>单粒子模拟</strong></h4><p>模拟物体的运动即规定一个物体在任何时刻的速度，同时知道开始出现的位置，就求解在某个时间后物体出现在哪里。</p>
<p>如果是匀速的，在 t0 时刻出现在某个位置，在 t1 时刻出现的位置即为 t0 的位置加上速度乘时间。</p>
<p>但大多数时候没有这么简单，比如要模拟一个粒子在速度场中的运动。</p>
<p>速度场和光场、磁场类似，表示空间中速度的分布。任意一个粒子的运动可以由一个速度场决定，该速度场是位置和时间的函数。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213450-ljj9j9o.png" alt="image">​</p>
<p>先从简单的出发，研究一个粒子的运动，后面再提高到很多粒子去考虑。</p>
<p>求解一个例子的速度即求解一个一阶常微分方程：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213503-h9595ol.png" alt="image">​</p>
<p>一阶表示知道一个量的微分是多少，希望推出这个量是多少</p>
<p>常微分方程表示不存在对其他变量的微分（对应于偏微分可能存在对多个变量的微分）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213509-9vnyxa4.png" alt="image">​</p>
<p>求解这个常微分方程，给定粒子的初始位置 x₀，用积分求解这个粒子在时间 t 的位置，得到粒子的运动轨迹。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213514-uelw0en.png" alt="image">​</p>
<p>怎么求解？可以把时间细分成很多小块，计算每个小块（比如时间 t+ 步长 Δt）粒子的位置的变化，在时间上做离散。</p>
<h5 id="欧拉方法（a-k-a-前向欧拉、显式欧拉）"><a href="#欧拉方法（a-k-a-前向欧拉、显式欧拉）" class="headerlink" title="欧拉方法（a.k.a. 前向欧拉、显式欧拉）"></a><strong>欧拉方法（a.k.a. 前向欧拉、显式欧拉）</strong></h5><p>下一帧的位置是上一帧的位置加 Δt 乘速度，下一帧的速度是上一帧的速度加 Δt 乘加速度</p>
<p>始终都是用上一时刻的量计算下一时刻的量（也可以用计算出来的下一时刻的量计算下一时刻的量，比如用计算出来的下一时刻的速度来计算下一时刻的位置，但这种方法就不是欧拉方法）​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213526-ebni6lg.png" alt="image">​</p>
<p>欧拉方法的问题：<br>不准确，且稳定性上会出问题，迅速地变得不稳定。</p>
<p>对于不准确的问题：步长分的越细，就模拟得越精确。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213531-qap8taw.png" alt="image">​</p>
<p>对于稳定性的问题：</p>
<p>如果速度场是螺旋形的，任何时刻都有一个和位置方向垂直的速度，物体应该是按照圆周运动来运动的。但用欧拉方法无论取多大的步长，无论如何得到的线都不可能沿着这个螺旋形走，最后都会飞出去。</p>
<p>如果是下面这幅图的情况下，正常的运动是从左到右走到中间那条线上，但是欧拉方法 Δt 的会让运动轨迹上下震荡走越偏越远。</p>
<p>这种情况在信号处理上被称为正反馈，即一旦出现问题，这个问题会被无限放大。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213537-fidcvd6.png" alt="image">​</p>
<p>误差和不稳定性</p>
<p>一些用数值微分方法解决的问题都会遇到这些问题：</p>
<ul>
<li><p>误差</p>
<ul>
<li>每一步计算都会有误差，最后累加起来会变成更大的误差。但是可以通过用更小的步长降低误差</li>
<li>误差在图形学应用中影响大，因为主要关注看起来效果怎么样，不要求物理上的完全一致</li>
</ul>
</li>
<li><p>不稳定</p>
<ul>
<li>有任何一个模拟方法，不管怎么去模拟最后得到的结果都会和正确的结果差的很远，且越来越发散</li>
<li>不稳定是模拟中一种不能被忽视的非常基础的问题​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213544-g53hxl2.png" alt="image">​</li>
</ul>
</li>
</ul>
<h5 id="解决不稳定性的方法"><a href="#解决不稳定性的方法" class="headerlink" title="解决不稳定性的方法"></a><strong>解决不稳定性的方法</strong></h5><ul>
<li><p>中点法</p>
</li>
<li><p>自适应改变步长</p>
</li>
<li><p>隐式方法</p>
</li>
<li><p>不基于物理的方法，Verlet 积分​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213553-ob7rma5.png" alt="image">​</p>
</li>
</ul>
<p><strong>中点法</strong></p>
<p>假设有一个点用欧拉方法模拟经过 Δt 从原始点到 a 点，取原始点到 a 点的中点 b 点，再回到原始点，应用 b 点的速度重新算一遍欧拉方法，达到 c 点，这样计算出来的结果就会比欧拉方法更准确。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213605-i9ei5sy.png" alt="image">​</p>
<p>中点法之所以更准确，是因为中点法比欧拉方法多出了一个二次项，得到了一个类似抛物线的运动轨迹。原本欧拉方法是一个局部线性的估计模型，中点法算出了一个局部的二次模型。​</p>
<p><img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213609-6rx8v4g.png" alt="image">​</p>
<p><strong>Adaptive Step Size</strong><br />应用两次 Δt&#x2F;2 和应用一次 Δt 的结果进行比较，如果应用两次 Δt&#x2F;2 计算的结果更准确，则把时间拆分得更短一点。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213627-bzlgkop.png" alt="image">​</p>
<p><strong>隐式欧拉方法</strong></p>
<ul>
<li><p>隐式欧拉又叫做后向欧拉。</p>
</li>
<li><p>用下一帧的速度，下一帧的加速度去乘 Δt，解一个方程组。如果速度和加速度不是简单的按照线性方法叠加，这个方程就不是很好解。</p>
</li>
<li><p>假设当前位置知道，下一个时刻的加速度也知道，就可以解出来下一个时刻的位置和下一个时刻的速度。</p>
</li>
</ul>
<ul>
<li>可以用一些数值优化求根算法，比如牛顿方法</li>
<li>有非常好的稳定性</li>
</ul>
<p><img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213638-q8uy3pd.png" alt="image">​</p>
<p>怎么定义一个方法是不是稳定的</p>
<ul>
<li><p>用局部截断误差（ 每一步会产生的误差）和最后累积起来误差来衡量稳定性</p>
</li>
<li><p>研究这两个数字没有意义，应该研究他们的阶。即研究这两个数字和取的 Δt 的关系，误差是如何随着更小的 Δt 减小的</p>
</li>
<li><p>隐式的欧拉方法是一阶的，即：</p>
<ul>
<li>局部的误差是 O(h2)的</li>
<li>全局的误差是 O(h)的</li>
</ul>
</li>
<li><p>h 表示步长（即 Δt），h 越小，误差越小。O(h)表示：</p>
<ul>
<li>如果把 h 减小一半，得到的误差也会减小到一半。阶数越高越好，如果是 2 阶的，假如 h 减少一半，那误差就会减少到 1&#x2F;4。</li>
</ul>
</li>
</ul>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213648-sgo2iwd.png" alt="image">​</p>
<p><strong>Runge-Kutta 方法</strong></p>
<p>一类用于解决常微分方程的解法</p>
<ul>
<li>特别擅长解非线性常微分方程</li>
<li>有一个用得特别广泛的方法，叫做 RK4，是一个四阶的解法。</li>
</ul>
<p>y 相当于位置，h 相当于 Δt，k 相当于速度场在不同的位置和不同时间的值（相当于一个扩展的中点法）</p>
<p>更多的数值计算方法可以看数值分析的课程</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213710-tahj55y.png" alt="image">​</p>
<p><strong>Position-Based&#x2F;Verlet Integration</strong></p>
<p>不是基于物理的方法，主要做法是：</p>
<ul>
<li><p>通过调整粒子的不同位置，使得结果能满足某一种限制，来防止出现发散的不稳定的行为。</p>
</li>
<li><p>使用约束的位置来计算速度。</p>
</li>
<li><p>这些方法都会消耗能量，稳定性好。</p>
</li>
</ul>
<p>优缺点：</p>
<ul>
<li>速度很快</li>
<li>不能保证能量守恒</li>
</ul>
<p>例子：比如说一个弹簧，被拉开后立刻回到原点，即被拉开后，会立刻调整两个端点的位置使得他们回到原点。这个是不符合真实物理的，是通过一种非物理的简化方式直接改变位置。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213719-vrrb6rm.png" alt="image">​</p>
<h4 id="刚体模拟"><a href="#刚体模拟" class="headerlink" title="刚体模拟"></a><strong>刚体模拟</strong></h4><p>不会发生形变，让内部所有点按同一种方式运动，就类似于一个粒子的运动</p>
<p>只是刚体要考虑更多的属性，比如：刚体的位置、朝向（旋转角度）、速度、角速度</p>
<p>torque：扭矩； I：转动惯量</p>
<p>用欧拉方法或者其他数值方法，可以求出任何一个时间 t 之后刚体对应的位置和旋转。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213725-0hpu6rk.png" alt="image">​</p>
<h4 id="流体模拟"><a href="#流体模拟" class="headerlink" title="流体模拟"></a><strong>流体模拟</strong></h4><p>position-based 方法的例子：通过模拟形成整个水体的小球的位置来模拟浪花的运动</p>
<p>首先认为整个水体是由不可压缩的刚体（小球）组成，只要能模拟出小球的位置就能模拟出浪的运动（模拟和渲染是分开的）</p>
<p>假设水在任何地方都是不会被压缩的，即在任何时刻任何位置的密度都是一样的</p>
<p>给任何一个时刻小球分布的位置，都可以知道任何一个地方的密度。如果有任何一个地方的密度和之前平静的水不一样的情况，就需要把这个密度修正过来。通过移动小球的位置来进行修正。</p>
<p>要做这个修正需要知道任何一个点的密度对所有小球的位置的梯度是多少。一个点的密度会受到周围小球的位置的影响，任何一个点的密度都是任何一个其他小球的位置的函数。</p>
<p>任何一个位置，要让不正确的密度变成正确的密度，且知道如何调整各个小球的位置使其密度朝向正确的方向去。这个过程就是梯度下降的过程。</p>
<p>这个修正会导致停不下来，所以实际模拟过程中会考虑能量损失。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213730-mh2jf6w.png" alt="image">​</p>
<p>在物理模拟中模拟大规模的物质用到两个不同思路：</p>
<p>质点法：模拟水，认为水是由很多小水滴组成，逐个模拟，最后得到的结果就是正确的。这种方式被称为拉格朗日方法（也叫质点法）</p>
<p>欧拉方法：和常微分方程的欧拉方法不是一回事。这里是指如何看待模拟一系列大规模的物体，把整个空间分成不同的网格，考虑网格随着不同的时间怎么变化。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213735-ghx94jt.png" alt="image">​</p>
<p>Material Point Method（物质点方法）</p>
<p>混合型的方法，即考虑拉格朗日，又考虑欧拉方法。</p>
<ul>
<li>认为不同的粒子都具有材质属性</li>
<li>用格子模拟融化的过程，把信息都记录在格子上</li>
<li>再把格子里的信息写回粒子上</li>
</ul>
<p>下面怎么深入学习：<br>《realtime rendering》、微分几何、离散几何、《games201》</p>
<p>广告：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213749-xd70xc1.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213803-gk2tngc.png" alt="image">​</p>
<p>《高质量实时渲染》</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVlLNHkxVDd5WS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPWQ2YzE1ZjViZDQ5YjFjZGJiNDIyN2U1ZGMyOWE1NjY2">https://www.bilibili.com/video/BV1YK4y1T7yY/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;d6c15f5bd49b1cdbb4227e5dc29a5666<i class="fa fa-external-link-alt"></i></span></p>
<p>离线渲染《高级图像合成》</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817213821-sc8qlgy.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第二十章：颜色和感知</title>
    <url>/blog/%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AB%A0%EF%BC%9A%E9%A2%9C%E8%89%B2%E5%92%8C%E6%84%9F%E7%9F%A5/</url>
    <content><![CDATA[<p>颜色和感知（Color and Perception）</p>
<p>本节课内容：<br>完成上节课的光场</p>
<p>颜色</p>
<ul>
<li>什么是颜色</li>
<li>颜色感知</li>
<li>颜色再现&#x2F;匹配</li>
<li>颜色空间</li>
</ul>
<p>光场（Light Field&#x2F;Lumigraph）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212149-biusqbv.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212153-wripzwk.png" alt="image">​</p>
<p>我们看到的世界，可以用眼前的一块幕布，来模拟我们在各个方向看到的光照</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212159-t1z7726.png" alt="image">​</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUplNHkxZTdnMS8/dmRfc291cmNlPWQ2YzE1ZjViZDQ5YjFjZGJiNDIyN2U1ZGMyOWE1NjY2">碟中谍 4 里全息投影<i class="fa fa-external-link-alt"></i></span></p>
<p>全光函数描述我们能看到的所有东西</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212207-lkbdvwz.png" alt="image">​</p>
<p>在某个方向看到的光照</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212212-j59oo2d.png" alt="image">​</p>
<p>加上了波长的参数，可以看到彩色的</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212217-ljy981o.png" alt="image">​</p>
<p>加上时间的参数，可以看到电影</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212222-ldyl2kk.png" alt="image">​</p>
<p>再加上空间的参数，在不同位置看到的，可以看到全息电影</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212226-knvbyjb.png" alt="image">​</p>
<p>最后把函数理解成在任何位置，往任何方向看，在任何时间，看到不同的颜色。这个 7 维的函数就叫做全光函数。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212230-8jqyzha.png" alt="image">​</p>
<p>可以从全光函数提取一部分信息出来，用来表示复杂的光。光场就是全光函数的一个小部分。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212235-c9ukq57.png" alt="image">​</p>
<p>定义光线：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212239-1alvcnu.png" alt="image">​</p>
<p>可以是起点 + 方向，或者是取光线上的任意两点</p>
<p>重点是需要二维的位置和二维的方向</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212244-vhro91v.png" alt="image">​</p>
<p>根据光路可逆性，要描述一个物体能被看到的所有情况，即描述这个物体在包围盒上任何一个位置往各个方向过去的光线</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212249-2w9ir16.png" alt="image">​</p>
<p>光场即在任何一个位置往任何一个方向去的光的强度</p>
<p>首先三维物体的表面在一个二维的空间中，可以用（u,v）两个变量表示位置，任何一个空间中的方向都可以用（θ，φ）表示，所以光场是一个四维的函数。</p>
<p>可以从光场中直接提取到任意一个位置看向一个物体的光强度</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212257-vy1ra6a.png" alt="image">​</p>
<p>可以简化一点，我们不需要知道光场表示的是什么东西，我们只需要知道盒子上表面任意一个点往任意一个方向（观测点）发出的光的强度（前提是观测点不在盒子内部）。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212303-kuret66.png" alt="image">​</p>
<p>更进一步，可以取一个平面，平面右边是发光的物体，光线会穿过平面。我们可以忽略平面右边的东西，对平面上任意一个点，只需要知道方向就可以。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212310-6saigsp.png" alt="image">​</p>
<p>也可以用两个平面来定义光场，两个平面各取一个点确定方向：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212315-x788fiz.png" alt="image">​</p>
<p>用(u,v)和(s,t)来确定光场：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212319-2ex6d8z.png" alt="image">​</p>
<p>对于两个平面的参数化方法有不同的处理方式：<br />可以固定一个(s,t)，让（u,v）变化：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212324-9sw3nfv.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212327-hp3bgqm.png" alt="image">​</p>
<p>上图中的上图是从(u,v)平面上找到一个点看向(s,t)平面的所有方向，得到从这个点的方向看过去的物体的全貌</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212332-i285fqr.png" alt="image">​</p>
<p>下图是从(s,t)平面上找一个点，看向(u,v)平面，这里可以理解为(u,v)平面所有方向看向(s,t)同一个点得到的图像。</p>
<p>类似于苍蝇的复眼，光照射到一个像素点上是不同方向的光混合起来的，这里在光前面用一个透镜，就可以把光分开，把一个像素不同方向上光分别记录在不同的位置。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212336-lz08vc2.png" alt="image">​</p>
<h5 id="光场照相机"><a href="#光场照相机" class="headerlink" title="光场照相机"></a><strong>光场照相机</strong></h5><p>先拍照，后期再重新聚焦</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212347-x5da9aq.png" alt="image">​</p>
<p>光场相机就是用透镜把光分开，一个像素的 irradiance 现在分开记录到一块区域上的 radiance。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212353-tcfytv2.png" alt="image">​</p>
<p>光场相机还原照片，可以选择一个方向，计算这个方向上像素点接受的光照，这样就可以模拟相机移动。</p>
<p>重新聚焦和移动相机位置一个道理，光场已经记录了所有方向所有位置的光照信息，只需要选取聚焦对应的方向和位置就可以计算得到。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212358-9q7c6jb.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212402-0ncmilv.png" alt="image">​</p>
<p>光场照相机的缺陷：</p>
<ul>
<li>分辨率不足。以前的一个像素要用很多个像素去记录，对胶片要求很高</li>
<li>高成本。透镜非常精密，实现需要巨大的成本</li>
<li>如果要记录更精密的方向信息，位置信息就会丢失的更多（复眼如果圆圈更大，那么圆圈的数量就更少）</li>
</ul>
<p>Physical Basis of Color</p>
<p>颜色是很多基本颜色混合得到的结果</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212412-2xr85v6.png" alt="image">​</p>
<p>不同颜色的光有不同的波长，图形学关心的通常是可见光的光谱</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212417-e5ouu5i.png" alt="image">​</p>
<p>谱功率密度就是描述光在任何一个波长的分布是多少</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212422-03r38eq.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212425-yb4zoad.png" alt="image">​</p>
<p>不同的光有不同的 SPD</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212432-lf9bskw.png" alt="image">​</p>
<p>SPD 有线性的性质</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212438-83o4esf.png" alt="image">​</p>
<p>颜色是什么？<br />颜色是人的感知</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212443-9dw0i6f.png" alt="image">​</p>
<p>人眼的构造：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212448-xrm3hz7.png" alt="image">​</p>
<p>肌肉会拉扯晶状体改变焦距</p>
<p>视网膜上有感光细胞</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212453-bfvlha9.png" alt="image">​</p>
<p>RodCell 棒状细胞，感知光的强度，不感知颜色。用棒状细胞可以得到一个灰度图</p>
<p>Cones 锥形细胞，感知颜色。锥形细胞内部又分成三种不同的锥形细胞（S，M，L），感应不同范围的波长。</p>
<p>曲线线叫做响应曲线，即给不同的光会有多强的反应。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212459-wha2myo.png" alt="image">​</p>
<p>不同的人这些细胞的分布非常不一样</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212503-qagx39w.png" alt="image">​</p>
<p>把响应曲线和感应到的 SPD 做积分，得到三个数 S、M、L，就是人感知到的颜色，而不是光本身的 SPD。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212509-8gmpyoq.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212514-6wx4ip4.png" alt="image">​</p>
<p>同色异谱</p>
<p>光谱不一样，但是人感知到的颜色一样</p>
<p>通过调和光谱，使得得到的颜色和看到的另一种颜色一样，就是 color mapping 的过程</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212523-a1oxy8r.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212527-jsnrcem.png" alt="image">​</p>
<p>比如在显示器上显示一个太阳，混合的光谱可以和真实的完全不一样，但最后的颜色是一样的：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212533-rbxf13f.png" alt="image">​</p>
<p>计算机的成像系统是加色系统<br />把 R、G、B 各自乘上不同的强度再混合起来（画画是减色系统，把各种颜色调和到一起最后会变成黑色）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212538-8531v6x.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212542-vi4gdg1.png" alt="image">​</p>
<p>混色实验：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212547-dggcuc4.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212550-3k8imeq.png" alt="image">​</p>
<p>但有一些颜色会怎么混两边颜色都不一样</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212555-61dtj1f.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212559-vg15b9h.png" alt="image">​</p>
<p>这个时候给左边的颜色加一个颜色，相当于右边的颜色减了一个颜色（真实情况下不能减，因为是加色系统）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212605-w9725m9.png" alt="image">​</p>
<p><strong>CIE RGB</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212611-z91bpi2.png" alt="image">​</p>
<p>实验测算三种波长的光混出一个波长，得到一个匹配函数：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212616-ko9pk3o.png" alt="image">​</p>
<p>给任何一种实际光的光谱，把每个波长需要多少 R、G、B 都算出来，然后做积分把颜色表示出来</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212620-zgaxgwj.png" alt="image">​</p>
<p><strong>颜色空间</strong></p>
<p>sRGB（标准 RGB）</p>
<p>RGB 形成的颜色空间色域是有限的</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212625-gk3f7b7.png" alt="image">​</p>
<p>A Universal Color Space: CIE XYZ</p>
<p>定义颜色匹配函数，和 RGB 匹配函数不一样，不是实验测出来的匹配系统</p>
<p>特别的 Y 本身还表示亮度​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212630-bzmd3o3.png" alt="image">​</p>
<p>可视化 XYZ 系统得到的所有颜色，但是三维的不好显示，所以把 X、Y、Z 做归一化处理，Y 表示亮度，所以把 Y 固定成某一个数，让 X、Z 发生变化，显示的图显示小写的（x, y），看到的形状就叫做色域。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212636-wfe51o6.png" alt="image">​</p>
<p>色域的中心是白色，是最不纯的颜色，最纯的颜色在边界上。​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212642-qtjx9m0.png" alt="image">​</p>
<p>不同的颜色空间表示的色域是不一样的：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212647-r2sokkt.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212653-57wp5tt.png" alt="image">​​</p>
<p>HSV Color Space​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212708-u7dxdkg.png" alt="image">​</p>
<p>通过色调选不同的颜色，通过饱和度选偏白还是偏这个颜色，亮度决定偏黑还是偏这个颜色​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212713-94ok1ay.png" alt="image">​</p>
<p>CIELAB 空间<br />轴上任意两端端颜色都是互补色：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212719-iuoilio.png" alt="image">​</p>
<p>互补色（实验得到的，人的大脑的定义）：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212723-3qotxdc.png" alt="image">​</p>
<p>盯住下图的中心点十秒后切换到另一张白色的图上，会看到互补色：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212727-ny6h0qm.png" alt="image">​</p>
<p>颜色是感知，所以看到的颜色有多强是感觉的：​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212731-0aa227f.png" alt="image">​</p>
<h5 id="​​​​​​减色系统"><a href="#​​​​​​减色系统" class="headerlink" title="​​​​​​减色系统"></a>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212740-uorj6m5.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212746-pbyyamz.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212750-d2843g9.png" alt="image">​减色系统</h5><p>**CMYK **</p>
<p>打印上混合各种颜色，所有颜色混起来变成黑色。这里面虽然黑色可以由其他颜色混合得到，但是考虑打印成本，都会带上一个黑色：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212757-g32nl7k.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第五章：光栅化</title>
    <url>/blog/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%85%89%E6%A0%85%E5%8C%96/</url>
    <content><![CDATA[<h3 id="光栅化（三角形）"><a href="#光栅化（三角形）" class="headerlink" title="光栅化（三角形）"></a>光栅化（三角形）</h3><p>上节课提到了观测变换：包含视图变换和投影变换。当完成观测矩阵变换后，下一步需要怎么绘制到屏幕上？这就是光栅化</p>
<p>上节课提到透视投影转换为正交投影，近平面和远平面 z 轴位置不变，远平面大小变成和近平面一样大。</p>
<p>正交投影里：x 轴定义左（l）和右（r），y 轴定义上（t）和下（b），z 轴定义远（f）和近（n）。</p>
<h4 id="锥体定义"><a href="#锥体定义" class="headerlink" title="锥体定义"></a><strong>锥体定义</strong></h4><p>n 和 f 在正交投影和透视投影里面都是一样的，我们认为是已知的。做正交投影时我们把锥体 frustum 变成一个长方体，那么怎么定义这个 frustum？<br>假设我们从相机出发，看向一个区域，首先我们给这个近的平面可以定义一个出一个高度和宽度（高宽比），再定义一个视角（field of view，表示可以看到的角度范围）</p>
<p>下图中平面的上下两条边中点到相机的连线（红线）所夹的角度是竖直方向的可视角度，这个角度用于定义看到的世界。比如广角相机这个角度就比较大，角度越小透视投影就越不明显，比如可以拍到很远的物体。</p>
<p>同理可推出水平可视角度：相机和左右两条变中点连线所夹的角度。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205535-vbh78yk.png" alt="image">​</p>
<p>长宽比和垂直可视角可以和做正交投影的长方体转为同一个概念。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205542-jgbgghv.png" alt="image">​</p>
<p>经过 MVP 投影后，我们会得到一个（-1，1）的三次方的立方形，接着我们要将它绘制到屏幕上。</p>
<h4 id="屏幕是什么"><a href="#屏幕是什么" class="headerlink" title="屏幕是什么"></a><strong>屏幕是什么</strong></h4><p>1.是一个二维数组，数组的每一个元素是一个像素（pixel）</p>
<p>2.屏幕分辨率表示像素的多少</p>
<p>3.屏幕是一个典型的光栅成像设备</p>
<p>光栅（Raster）是德语里的屏幕的意思，光栅化即把东西画到屏幕上的过程。</p>
<p>pixel 表示 picture element</p>
<p>这门课里，我们把像素认为是一个个的小方块（实际的像素比这复杂得多），每一个方块表示一个颜色，一个像素里的颜色都不会变化。一般像素的颜色可以划分为不同的等级（0-255），用 RGB 表示。</p>
<h4 id="屏幕的空间"><a href="#屏幕的空间" class="headerlink" title="屏幕的空间"></a><strong>屏幕的空间</strong></h4><p>认为屏幕左下角是原点，向右是 x，向上是 y。像素的坐标都是写成 x，y 的形式，用整数坐标来表示。如果一个屏幕的分别率是 width*height，那么所有的像素可以用（0, 0）到（width-1，height-1）来表示，所有像素的中心在(x+0.5, y+0.5)上，屏幕覆盖的范围为(0, 0)到（width, height）。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205553-c8jkudl.png" alt="image">​</p>
<p>接下来需要把[-1,1]³ 映射到屏幕上，先不管 z 轴，[-1,1]² 转换为[0,width]和[0,height]。<br />先做缩放，然后要保持原点不变，所以还要做一个平移。这个变换被称为视口变换。<br />接下来要把所有的结果打散成像素，画到屏幕上。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205559-q7eeqc8.png" alt="image">​</p>
<h4 id="成像设备"><a href="#成像设备" class="headerlink" title="成像设备"></a><strong>成像设备</strong></h4><p>早期的 CRT（Cathode Ray Tube）显示设备：</p>
<p>成像原理：阴极射线管，电子加速后穿过显示设备，然后做偏转，电子打到屏幕上成像。</p>
<p>成像的过程就是，通过扫描的方式，在屏幕上一行行的画线。提高扫描的速度：隔行扫描<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205606-7s6i94p.png" alt="image">​</p>
<p>现在的显示设备：</p>
<p>LCD（Liquid Crystal Display）显示设置</p>
<p>把内存（比如显存）中的一块区域映射到屏幕上。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205616-c7cac97.png" alt="image">​</p>
<p>液晶会通过自己的不同排布影响光的偏振方向</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205622-nhs1qm2.png" alt="image">​</p>
<p>LED 显示设备（发光二极管）</p>
<p>墨水屏（电压使得黑白墨水翻转， 刷新率很低）</p>
<h4 id="怎么在成像设备上绘制"><a href="#怎么在成像设备上绘制" class="headerlink" title="怎么在成像设备上绘制"></a><strong>怎么在成像设备上绘制</strong></h4><p>成像即把变换后得到的多边形的顶点打散到各个像素上</p>
<p>三角形</p>
<ul>
<li>三角形是最基础的多边形，任何多边形都可以拆成三角形</li>
<li>三角形内部一定是平面的</li>
<li>三角形内外定义一定是清晰的</li>
<li>只要定义三角形的三个顶点，就可以做到一个顶点属性到另一个顶点属性的插值</li>
</ul>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205632-lpzpswt.png" alt="image">​</p>
<p>当三角形的边只有一部分覆盖到像素，怎么判断是不是要绘制，即判断像素中心点和三角形的关系？</p>
<h5 id="采样"><a href="#采样" class="headerlink" title="采样"></a><strong>采样</strong></h5><p>把一个函数离散化的过程（给不同的 x 计算不同的函数值）</p>
<p>用像素中心进行采样，定义不同的函数在像素中心的值</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205641-tuh5fok.png" alt="image">​</p>
<p>定义一个 inside 的含义，给定任意（x,y）坐标，判定它是否在在三角形内，在三角形里其值为 1，不在则值为 0。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205650-sboxc7r.png" alt="image"></p>
<p><img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205658-f0rr1m5.png" alt="image">​</p>
<p>通过叉积的计算可以判断一个点是否在三角形内部</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205703-eu5ow97.png" alt="image">​</p>
<p>如果有一个点正好在三角形的边界上，自己定义一个标准，不同的 API 可能有不同的标准。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205711-gg1og3r.png" alt="image">​</p>
<p>不需要对屏幕上的所有像素做光栅化，只需要找到三角形的包围盒。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205716-nqlmtil.png" alt="image">​</p>
<p>更快的方式是只找每一行的最左和最右。</p>
<h5 id="实际的像素"><a href="#实际的像素" class="headerlink" title="实际的像素"></a><strong>实际的像素</strong></h5><p>bayer pattern（右侧的）绿色出现的频率最高，因为人眼对绿色更敏感</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205724-ybsurob.png" alt="image">​</p>
<p>打印和屏幕相反，打印是一个减色系统（因为颜色越多越黑），但是屏幕 rgb 值越高，越亮，越靠近白色</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205729-8qixj10.png" alt="image">​</p>
<p>光栅化后，由于颜色均匀的填在像素格子里，就会形成锯齿，采样率不够高会导致锯齿更明显，造成走样问题。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205734-cz8ulpy.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第八章：着色模型</title>
    <url>/blog/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E7%9D%80%E8%89%B2%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p><strong>Blinn-Phong 模型</strong></p>
<ul>
<li>漫反射</li>
<li>高光</li>
<li>环境光</li>
</ul>
<p>着色是在某一个点进行计算的，要得到一整张图就需要在不同的位置应用着色，就涉及到着色频率</p>
<p>方向都是指单位向量</p>
<p>本节课</p>
<ul>
<li><p>Blinn-phong 着色模型</p>
<ul>
<li>高光和环境光</li>
</ul>
</li>
<li><p>着色频率</p>
</li>
<li><p>渲染管线</p>
</li>
<li><p>纹理映射</p>
</li>
<li><p>重心坐标</p>
</li>
</ul>
<h4 id="高光"><a href="#高光" class="headerlink" title="高光"></a><strong>高光</strong></h4><p>观察方向和镜面反射方向接近的时候，可以看到高光。此时，半程向量也和法线方向接近。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211419-186t7zh.png" alt="image">​</p>
<p>最早使用 Phong 模型：判断 <strong>R</strong> 和 <strong>v</strong> 是否足够接近，但是计算反射方向不好计算，计算量很大，所以后面优化为 Blinn-Phong 模型：判断 <strong>n</strong> 和半程向量 <strong>h</strong> 是否足够接近。</p>
<p>这里简化掉了表示光吸收能量的系数（<strong>n</strong>*<strong>l</strong>）</p>
<p>指数 p 是为了缩小高光的范围，在 Blinn-Phong 模型里一般取 100-200</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211426-qo64bm8.png" alt="image"></p>
<p><img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211432-wrvh56t.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211439-oigg0n5.png" alt="image">​</p>
<h4 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a><strong>环境光</strong></h4><p>这里假设任何一个点收到的环境光的强度 I_(a)都是一样的，环境光和光照方向、观测方向都没有关系，是一个常数。（计算真正的环境光远比这个复杂，需要用到环境光照的知识）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211504-zq2wuvl.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211509-jl5x9sn.png" alt="image">​</p>
<h4 id="着色频率"><a href="#着色频率" class="headerlink" title="着色频率"></a>着色频率</h4><p>着色分别应用在每个面、每个顶点（每个平面有四个顶点，每个顶点计算出法线，每个顶点做一个着色。三个顶点连接成三角形，三角形内部每一个点做插值）、每一个像素上（每个顶点求出法线，每个法线的方向在三角形内部做插值，得到每个像素的法线，再做一遍着色）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211517-p37tdsb.png" alt="image">​</p>
<p><strong>Flat shading</strong></p>
<p>三角形的两条边做叉积得到法线</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211523-u5qg48r.png" alt="image">​</p>
<p><strong>gouraud shading</strong></p>
<p>每个顶点求法线，着色后，内部的点通过插值求颜色</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211531-a5oyh96.png" alt="image">​</p>
<p><strong>Phong shading</strong><br />顶点求出法线后，三角形内每个点通过插值求出法线方向，再进行着色</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211544-m2gpove.png" alt="image">​</p>
<p>用哪种着色模型取决于模型的复杂度</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211548-1uy9e0v.png" alt="image">​</p>
<p>顶点的法线怎么计算：相邻面的法线求（加权）平均</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211552-bwwoeee.png" alt="image">​</p>
<p>求出两个顶点法线后，中间的法线插值求出来，需要注意求出来的方向向量都是单位向量。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211558-23gk3nx.png" alt="image">​</p>
<h4 id="图形管线（实时渲染管线）"><a href="#图形管线（实时渲染管线）" class="headerlink" title="图形管线（实时渲染管线）"></a><strong>图形管线（实时渲染管线）</strong></h4><p>从一个场景到一张图经历的过程（显卡 GPU 里的操作）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211603-3bxqpnc.png" alt="image">​</p>
<p>这个过程是部分可编程（vertex processing 和 fragment processing）的**，**即开发者可以控制顶点和像素是如何着色的，这部分代码就叫做 Shader。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211609-qhidiax.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211700-etbcuf7.png" alt="image">​</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hhZGVydG95LmNvbS92aWV3L2xkM0d6Mg==">https://www.shadertoy.com/view/ld3Gz2<i class="fa fa-external-link-alt"></i></span><br /><strong>GPU 非常适合做图形学里的并行计算</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211709-48x15z4.png" alt="image">​</p>
<h4 id="纹理映射"><a href="#纹理映射" class="headerlink" title="纹理映射"></a><strong>纹理映射</strong></h4><p>纹理用来定义着色时各个点的属性**。**</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211714-edon4vx.png" alt="image">​</p>
<p>任何一个三维物体表面都是二维的，这个二维的图形就认为是纹理。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211732-ytqogpc.png" alt="image">​</p>
<h4 id="纹理坐标"><a href="#纹理坐标" class="headerlink" title="纹理坐标"></a>纹理坐标</h4><p>三角形每个顶点都对应一个坐标。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211736-pfd8lww.png" alt="image">​</p>
<p>纹理可以被重复多次</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211741-8eowj5b.png" alt="image">​</p>
<p>这种重复使用依旧衔接的很好的纹理叫做 tiled textures。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816211746-qu6dqrd.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第六章：反走样与深度缓冲</title>
    <url>/blog/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%8F%8D%E8%B5%B0%E6%A0%B7%E4%B8%8E%E6%B7%B1%E5%BA%A6%E7%BC%93%E5%86%B2/</url>
    <content><![CDATA[<h3 id="反走样和深度缓冲"><a href="#反走样和深度缓冲" class="headerlink" title="反走样和深度缓冲"></a>反走样和深度缓冲</h3><p>上节课提到：<br>MVP变换后，把得到的[-1,1]3区域映射到屏幕上。光栅化的思想：用像素的中心对三角形的可见行函数进行采样。<br>本节课学习的主要内容：</p>
<ul>
<li>反走样<ul>
<li>采样理论</li>
<li>实际图形学中怎么做反走样</li>
</ul>
</li>
<li>可见性&#x2F;遮挡<ul>
<li>深度缓冲</li>
</ul>
</li>
</ul>
<p>采样在图形学中是一种广泛的做法：</p>
<ul>
<li><p>比如光栅化的过程，在屏幕空间用一些离散的点采样</p>
</li>
<li><p>照片，所有到达感光元件所在平面的光学信息离散成图像上的像素</p>
</li>
<li><p>采样可以发生在不同的时间，比如视频、动画是把一系列的图在不同时间进行采样。</p>
</li>
</ul>
<p>采样artifacts（瑕疵）：</p>
<ul>
<li>锯齿-空间中采样</li>
<li>摩尔纹（照片奇数行和技术列去掉），拿手机拍屏幕-不同位置采样</li>
<li>顺时针转的轮子看起来在逆时针旋转-人眼在时间中采样跟不上运动的速度</li>
</ul>
<p>采样artifacts的本质：<br>信号的变化太快了，以至于采样的速度跟不上信号变换的速度。</p>
<h4 id="反采样："><a href="#反采样：" class="headerlink" title="反采样："></a>反采样：</h4><p>采样前做一个模糊（滤波）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210106-lhslhi8.png" alt="image">​</p>
<p>可以先模糊（滤波）再做采样，但不能先采样再模糊。</p>
<p>为什么采样速度跟不上信号变换的速度会造成采样artifacts？</p>
<h5 id="频域"><a href="#频域" class="headerlink" title="频域"></a><strong>频域</strong></h5><p>用f定义余弦波变换的速度，周期是频率的倒数</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210114-a300qnz.png" alt="image">​</p>
<h5 id="傅立叶级数展开"><a href="#傅立叶级数展开" class="headerlink" title="傅立叶级数展开"></a>傅立叶级数展开</h5><p>任何一个周期函数都可以写成正弦、余弦的线性组合加常数项。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210122-j5p41kz.png" alt="image">​</p>
<p>傅立叶变换：把一个函数变成另一个函数</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210129-x16mpp8.png" alt="image">​</p>
<p>傅立叶变换就可以把函数变成不同频域的段并显示出来。</p>
<p>相同的采样点，原函数频率越高，采样越不准确。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210134-al8w7gp.png" alt="image">​</p>
<p>同样一个采样方法采样两种不同频率的函数，得出的结果无法区分，就叫做走样</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210140-rz0ct3y.png" alt="image">​</p>
<h5 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a><strong>滤波</strong></h5><p>把某个特定的频率去掉，看信号会发生什么样的变化。</p>
<p>傅立叶变换可以把一个函数从时域（把空间不同的位置也看作时域）变到频域。<br />把中心看作低频区，周围是高频区，用亮度表示在不同频率的位置上有多少信息，如下图大多数信息集中在低频上：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210149-07pjjcb.png" alt="image">​</p>
<p>为什么右侧的图像会有两条白线，因为处理图片信号的时候，会把图片视作周期性变化（类似于图片水平方向和竖直方向依次叠放了多张图），由于图片并不是真的周期变化，到达图片边界时，会发生剧烈的信号变化，产生极其高的高频。</p>
<p>傅立叶变换可以让我们看到一张图像在不同的频率长什么样，即得到一张图像的频谱。</p>
<p>假如去掉低频的信息，再做傅立叶逆变换，会得到图像内容的边界，因为在边界处会发生剧烈的变化，即频率比较高。这种滤波称为高通滤波，即这种滤波器只有高频信号能通过。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210158-3rqn9kb.png" alt="image">​</p>
<p>假如只留下高频的信息，去掉低频的信息，再做傅立叶逆变换，会得到一张（边界）比较模糊的图。这种滤波称为低通滤波。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210203-1oq5f7x.png" alt="image">​</p>
<h5 id="滤波-平均-卷积"><a href="#滤波-平均-卷积" class="headerlink" title="滤波&#x3D;平均&#x3D;卷积"></a>滤波&#x3D;平均&#x3D;卷积</h5><p>卷积（图形学上定义：滑动过滤器，做点乘，得到一个加权平均值）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210208-4aeusae.png" alt="image">​</p>
<p>卷积定理：时域上对两个信号做卷积，对应频域上两个信号做乘积。时域的卷积等于频域的乘积，时域上的乘积等于频域上的卷积：</p>
<ul>
<li>可以选择直接在时域上做卷积</li>
</ul>
<ul>
<li><p>或者先做傅立叶变换变到频域上，卷积核也做傅立叶变换到频域上，在频域上做乘积，乘积结果再做逆变换变回来。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210218-9gaprqi.png" alt="image">​</p>
</li>
</ul>
<p>卷积核：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210230-z26gbw7.png" alt="image">​</p>
<p>盒子越大，对应的频域范围越小，结果越模糊。盒子越小，频域范围越大。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210235-9jmqqx0.png" alt="image">​</p>
<p>从频率的角度上看采样：重复频域上的内容。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210241-70mdqp9.png" alt="image">​</p>
<p>给一个原始信号(a)，乘一个冲击函数(c)（只在某些固定位置有值，其他位置值为0），得到采样结果(e)。</p>
<p>把原始信号和冲击函数分别转换到频域上得到（b）和（d），做卷积得到（f）。</p>
<p>可以看出来：采样就是重复原始信号的频谱。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210248-gg8fqbg.png" alt="image">​</p>
<p>采样不同的间隔会引起频谱以不同的间隔移动，当采样率不足（采样不够快），原始信号复制粘贴的频谱间隔就很小。采样越稀疏，搬移频谱内容就越密集。原始信号和复制粘贴信号混在一起，这个时候发生了走样。</p>
<h5 id="反走样："><a href="#反走样：" class="headerlink" title="反走样："></a><strong>反走样</strong>：</h5><p>1.增加采样率（高分辨率频幕）</p>
<p>2.先做模糊再做采样（先把高频信号拿掉，再采样，这个时候频谱覆盖面变小，再以原本间隔复制，就不会发生混别）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210257-b3w0q1c.png" alt="image">​</p>
<p>找一个一定大小的低通滤波器，对原来的频谱做卷积</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210307-u1sxhl3.png" alt="image">​</p>
<p>用一个1像素的方块对三角形函数做一个卷积操作：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210314-yweopgt.png" alt="image">​</p>
<p>对三角形覆盖面积求平均：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210321-rq1srs3.png" alt="image">​</p>
<p>怎么计算三角形的覆盖面积，近似求解，把像素划分成很多小像素，判断小像素是不是在三角形里面再求平均：</p>
<p>Antialiasing By Supersampling (MSAA)</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210326-or8d452.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210419-gk18psz.png" alt="image">​</p>
<p>接着对格子中间进行采样（采样的结果就是平均的结果）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816210429-oizrk0s.png" alt="image">​</p>
<p>MSAA不是靠提升分辨率直接解决走样问题，增加采样点只是得到三角形的近似覆盖，屏幕像素值不变，它解决的是模糊的问题。<br><strong>MSAA的代价：</strong></p>
<p>增大了计算量。工业上用更有效的不规则图案来减少采样点，有一些点还会被临近的像素来复用。</p>
<p><strong>其他抗锯齿：</strong><br />FXAA(Fast Approximate AA 快速近似抗锯齿)：和采样无关，通过图像后期处理，先得到一个有锯齿的图，再通过图像匹配的方法找到这些边界，再把有锯齿的地方换成没有锯齿的边界。</p>
<p>TAA（Temporal AA）：静态物体两帧不变，因此相邻两帧可以用一个像素内的不同点感知是否在三角形内部，当前帧可以复用上一帧的结果。</p>
<p><strong>超分辨率：</strong></p>
<p>小图拉大；有一个高分辨率的图，但是采样率不够，想要把这个图恢复出来。</p>
<p>DLSS（Deep Learning Super Sampling）深度学习</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十一章：显示几何，曲线、曲面</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%98%BE%E7%A4%BA%E5%87%A0%E4%BD%95%EF%BC%8C%E6%9B%B2%E7%BA%BF%E3%80%81%E6%9B%B2%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="几何入门："><a href="#几何入门：" class="headerlink" title="几何入门："></a>几何入门：</h3><ul>
<li><p>几何例子</p>
</li>
<li><p>不同表示几何的方式</p>
<ul>
<li>隐式</li>
<li>显式</li>
</ul>
</li>
</ul>
<p>本节课：</p>
<ul>
<li><p>显式几何</p>
</li>
<li><p>曲线</p>
</li>
<li><p>曲面</p>
</li>
</ul>
<p>显式几何有不同的表示方法：<br>三角形面、贝塞尔曲面、点云</p>
<h3 id="点云"><a href="#点云" class="headerlink" title="点云"></a><strong>点云</strong></h3><p>物体用一堆点表示。</p>
<p>只要点足够密，可以表示任何形状的几何。</p>
<p>点云转换三角形面。</p>
<h3 id="多边形面"><a href="#多边形面" class="headerlink" title="多边形面"></a><strong>多边形面</strong></h3><p>三角形、四边形面。</p>
<p>需要用更复杂的数据结构表示三角形对连接关系。</p>
<p>是图形学中最常见的表示方式。</p>
<p>三角形面形成的物体：</p>
<p>v 定义 8 个点，vn 定义 6 个面的法线（图中有冗余）、vt 定义 12 个纹理坐标（每个面四个点的纹理坐标，中间会有共用的），f（face）定义三角形之间的连接关系（第一个参数是顶点，比如图中第一行使用第 5、1、4 三个顶点形成三角形，第二个参数是三个顶点的纹理坐标，第三个参数是指三个顶点的法线）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203227-f9vqkmt.png" alt="image">​</p>
<h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a><strong>曲线</strong></h3><p>相机的运动曲线，三维建模模型的运动曲线、定义字体的控制点</p>
<h4 id="贝塞尔曲线（用一系列控制点来定义曲线）"><a href="#贝塞尔曲线（用一系列控制点来定义曲线）" class="headerlink" title="贝塞尔曲线（用一系列控制点来定义曲线）"></a><strong>贝塞尔曲线</strong>（用一系列控制点来定义曲线）</h4><p>曲线的起点在 P0、开始的方向是 P0P1，曲线的终点是 P3，结束的方向是 P2P3</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203235-qhjl8qi.png" alt="image">​</p>
<p>de Casteljau 算法</p>
<p>给任意一个时间 t，计算贝塞尔曲线在时间 t 的位置</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203244-i5wtnv8.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203252-moz7wnk.png" alt="image">​</p>
<p>是一个递归的过程</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203257-ylm5qf1.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203302-idycife.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203307-fq20vuf.png" alt="image">​</p>
<p>n 阶贝塞尔曲线可以表示为控制点的线形组合，系数就是一个和时间有关的多项式，被称为 Bernstein 多项式</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203314-7n6txxz.png" alt="image">​</p>
<p>三维空间中同样可以用 Bernstein 多项式</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203323-9kejl38.png" alt="image">​</p>
<p>Bernstein 多项式就是 1 的多阶展开，所以在坐标轴上画一条竖线，经过的每个点的 y 轴加起来的值都等于 1</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203330-ntfrqts.png" alt="image">​</p>
<h5 id="贝塞尔曲线的性质："><a href="#贝塞尔曲线的性质：" class="headerlink" title="贝塞尔曲线的性质："></a>贝塞尔曲线的性质：</h5><p>1.起点和终点固定</p>
<p>2.切线方向固定</p>
<p>3.对曲线的顶点、控制点做仿射变换后，再画贝塞尔曲线，和对原始贝塞尔曲线做仿射变换后得到的曲线是一样的；但对投影不是这样</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203336-09akmsq.png" alt="image">​</p>
<p>4.秃包性质：任何一个贝塞尔曲线肯定在控制点形成秃包之内。比如如果给一堆控制点都在一条直线上，那这个贝塞尔曲线一定是这条线自己。</p>
<p>秃包：能包围给定的几何形体的最小的凸多边形</p>
<p>想象有一堆钉子，在最外层的钉子上绑一个橡皮筋，橡皮筋围成的形状就是秃包</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203344-ge09mxp.png" alt="image">​</p>
<h5 id="Piecewise-贝塞尔曲线"><a href="#Piecewise-贝塞尔曲线" class="headerlink" title="Piecewise 贝塞尔曲线"></a>Piecewise 贝塞尔曲线</h5><p>控制点多的时候不好控制，逐段定义贝塞尔曲线，再连起来。一般是每四个控制定义一条贝塞尔曲线。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203350-2lng0ud.png" alt="image">​</p>
<p>几何上两条曲线都通过一个点，第一段的终点等于第二段的起点叫做 C0 连续</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203356-ut3s0bf.png" alt="image">​</p>
<p>第一段终点控制点连线和第二段起点控制点的连线大小一致，方向相反，C1 连续（一阶导数连续）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203401-av7s8u8.png" alt="image">​</p>
<h4 id="Spline-曲线（样条）"><a href="#Spline-曲线（样条）" class="headerlink" title="Spline 曲线（样条）"></a><strong>Spline 曲线（样条）</strong></h4><p>由一组控制点控制的曲线，能满足一定的连续性</p>
<p>B-Spline basis splines（奇函数样条，由于不同的函数组合起来形成新的函数）</p>
<ul>
<li>用 Bernstein 多项式在时间 t 几个不同的项对不同的控制点做加权平均</li>
<li>用控制点的位置对 Bernstein 多项式进行加权</li>
</ul>
<p>B-Spline 是对贝塞尔曲线的扩展，可以实现局部性，比如改变一个控制点，只影响一定范围内的曲线。</p>
<p>本节课不深入学习 B 样条</p>
<h4 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a><strong>贝塞尔曲面</strong></h4><p>贝塞尔曲线得到贝塞尔曲面</p>
<p>4✖️4 控制点，双线性插值</p>
<p>用时间 u 先确定一个方向的四个控制点，再用时间 v 确定曲面上的一个点</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203417-66viato.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203423-cxzrqk0.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203428-zjyszxx.png" alt="image">​</p>
<p>Mesh Operations：几何处理</p>
<ul>
<li><p>网格细分</p>
</li>
<li><p>网格简化</p>
</li>
<li><p>网格正规化（让三角形不要出现特别尖的三角形）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203436-wy6whsg.png" alt="image">​</p>
</li>
</ul>
<p>‍</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十七章：材质与外观</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9D%90%E8%B4%A8%E4%B8%8E%E5%A4%96%E8%A7%82/</url>
    <content><![CDATA[<p>Materials and Apperances （材质与外观）</p>
<p>外观是不同材质与光线共同作用的结果</p>
<p>光打进去后在物体内部反射多次变成一大片再出来——次表面散射</p>
<p>自然界中有无数的材质，但渲染器中支持的材质很少（比如维塔数码的 Manuka 渲染器，只支持 40 种材质），要呈现自然界中的材质，需要各种纹理贴图。</p>
<p>在渲染方程中，BRDF 是和材质相关的，它决定了光怎么被反射</p>
<p>Material &#x3D;&#x3D; BRDF</p>
<h4 id="对于漫反射："><a href="#对于漫反射：" class="headerlink" title="对于漫反射："></a>对于漫反射：</h4><p>假设空间中任何一个方向进来的光的 radiance 的一样的，它反射的光也是一样的。根据能量守恒，如果一个点不发光也不吸收光，那么进来多少就应该反射多少。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210024-1xry8mn.png" alt="image">​</p>
<p>定义一个反射率 albedo，它的值在 0-1 之间，可以引入不同颜色的 albedo。</p>
<p>对于 Glossy 的材质，一部分反射，一部分折射</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210030-s9lod8b.png" alt="image">​</p>
<p>光线折射过后会有部分被吸收</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210035-nubt5cn.png" alt="image">​</p>
<p>镜面反射计算出射角，可以把它转换到 φ 平面上：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210041-4qd0k79.png" alt="image">​</p>
<p>镜面发射也可以写出 BRDF，但是出射方向只集中在镜面反射的方向，因此写出正确的 BRDF 不那么容易。</p>
<h4 id="对于折射："><a href="#对于折射：" class="headerlink" title="对于折射："></a>对于折射：</h4><p>折射定律</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210046-st4zygq.png" alt="image">​</p>
<p>当出射的折射率大于入射的折射率时，可能出现无法折射的现象：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210051-hfsbjfk.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210055-3gamr9a.png" alt="image">​</p>
<p>折射的 BRDF 就叫做 BTDF，T 表示 transmission。BRDF 和 BTDF 统称 BSDF，S（scaterring）表示散射。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210100-ifhya3o.png" alt="image">​</p>
<p>菲涅尔项表示有多少光线被反射、多少被折射。<br>图中的虚线表示极化现象下的光，极化现象即光只沿某一个方向振动。</p>
<h4 id="对于绝缘体："><a href="#对于绝缘体：" class="headerlink" title="对于绝缘体："></a>对于绝缘体：</h4><p>入射光线的入射角与物体表面越平行，反射的越多。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210106-z0r0kul.png" alt="image">​</p>
<h4 id="对于导体："><a href="#对于导体：" class="headerlink" title="对于导体："></a>对于导体：</h4><p>任何情况下反射都很多。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210111-gri140d.png" alt="image">​</p>
<h4 id="菲涅尔项的计算："><a href="#菲涅尔项的计算：" class="headerlink" title="菲涅尔项的计算："></a>菲涅尔项的计算：</h4><p>用 Schlick 近似进行拟合，不管曲线的真实趋势，认为 θ 为 0 时为 R₀，θ 为 90 度时为 1。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210117-j82wjuy.png" alt="image">​</p>
<h5 id="微表面模型："><a href="#微表面模型：" class="headerlink" title="微表面模型："></a>微表面模型：</h5><p>当我们离的够远，我们看不到表面上的细节， 只能看到总体对光形成的一个效应。<br />从远处看，看到的是材质和外观，从近处看，看到的是几何。<br />每一个微表面，都看作是镜面。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210122-wppkyqt.png" alt="image">​</p>
<p>一个物体表面的粗糙程度可以用微表面的法线分布来表示：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210127-x62l2q1.png" alt="image">​</p>
<h5 id="微表面的-BRDF："><a href="#微表面的-BRDF：" class="headerlink" title="微表面的 BRDF："></a>微表面的 BRDF：</h5><p>G（shadowing-masking term）表示微表面被遮挡的修正。当光线越平行于表面（grazing angle）时，越容易发生遮挡。D 表示法线分布。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210132-6wj19bj.png" alt="image"><br /><br /><strong>各向同性&#x2F;各向异性材质</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210144-8f2vzc9.png" alt="image">​</p>
<p><strong>各向同性的材质发现分布也很均匀</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210150-84x9cl6.png" alt="image">​</p>
<p><strong>各向异性用 BRDF 来解释就是方向角是绝对的，不是相对的。</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210157-lk44knp.png" alt="image">​</p>
<p><strong>总结 BRDF 的属性：</strong></p>
<p>1.BRDF 的值一定是非负的</p>
<p>2.线性性质</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210205-fex4vfm.png" alt="image">​</p>
<p>3.可逆性。交换入射和出射方向的角色，得到的 BRDF 是一样的</p>
<p>4.能量守恒</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210212-oloyznz.png" alt="image">​</p>
<p>5.各向同性和各向异性</p>
<p>各向同性时，BRDF 只和相对方位角有关，即和 φ 的差值有关，即四维的方程可以转为三维的</p>
<p>且由于可逆性，φ 的差值不需要考虑正负</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210218-4fiwd6v.png" alt="image">​</p>
<h5 id="测量-BRDF"><a href="#测量-BRDF" class="headerlink" title="测量 BRDF"></a>测量 BRDF</h5><ul>
<li>如果能直接测量，就不需要用到模型去计算</li>
<li>测量能够用真实世界的材质做到更精确的渲染​</li>
</ul>
<p>‍</p>
<p><img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210236-a7sm6d4.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210334-aeu3ziu.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210338-3t62iua.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210344-fznpazc.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210347-3oxflxk.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十三章：Ray tracing 1 基础光线追踪算法</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9ARay%20tracing%201%20%E5%9F%BA%E7%A1%80%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Ray-Tracing（光线追踪）"><a href="#Ray-Tracing（光线追踪）" class="headerlink" title="Ray Tracing（光线追踪）"></a>Ray Tracing（光线追踪）</h3><p>光栅化的问题</p>
<p>不能很好地处理全局效果，比如：</p>
<p>1.软阴影</p>
<p>2.光线多次弹射（毛玻璃反射、间接反射）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204242-i9pwn8h.png" alt="image">​</p>
<p>光栅化速度快，但是质量低；光线追踪准确但是速度慢。所以一般光栅化用于实时、光线追踪用于离线。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204247-44w81g6.png" alt="image">​</p>
<h3 id="基础的光线追踪算法"><a href="#基础的光线追踪算法" class="headerlink" title="基础的光线追踪算法"></a>基础的光线追踪算法</h3><p>光线的三种假设：</p>
<ol>
<li><p>光沿直线传播（实际并不是</p>
</li>
<li><p>光线相交时不会碰撞（实际并不是</p>
</li>
<li><p>光线从光源传播到眼睛（根据光的可逆性，光线以不变的光路从眼睛传播到光源</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204252-rq5ma55.png" alt="image">​</p>
</li>
</ol>
<h4 id="光线投射"><a href="#光线投射" class="headerlink" title="光线投射"></a>光线投射</h4><p>从摄像机到成像平面中的一个像素连成一条射线，这个射线会和一个物体相交。再把这个交点和光源做连线，判定他是不是在阴影内。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204310-a4f3y6w.png" alt="image">​</p>
<p>假设眼睛是一个点（针孔摄像机），同时光源也是点光源。光线打到场景中的物体会发生完美的折射和反射。</p>
<p>考虑光线和场景中的物体最近的交点，交点再与光源做连线，如果没有遮挡说明没有阴影。求出交点后再对交点做着色。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204315-s1c6ju9.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204318-s2voec6.png" alt="image">​</p>
<h4 id="recursive-Whitted-styled-ray-tracing"><a href="#recursive-Whitted-styled-ray-tracing" class="headerlink" title="recursive Whitted-styled ray tracing"></a>recursive Whitted-styled ray tracing</h4><p>光线可以不断弹射。每个弹射点可画出一条 shadow ray，计算是不是在阴影里，光源弹射后能照到的点的着色值最后都加到一个像素里面去。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204323-6as49bq.png" alt="image">​</p>
<p>求光线和物体表面的交点</p>
<p>光线的定义：</p>
<p>点光源：起点 + 方向</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204331-pl418gg.png" alt="image">​</p>
<p>判断光线与球体是否相交：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204335-tljx4px.png" alt="image">​</p>
<p>点即在光线上，又在球上。求解一元二次方程：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204341-vxbltr2.png" alt="image">​</p>
<p>对于一般面</p>
<p>隐式表示：列出 surface 的隐式表达式，带入求解：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204347-seawpb6.png" alt="image">​</p>
<p>显式表示：求光线与三角面的交点</p>
<p>一个封闭的图形，从图形内部发出一条射线，与图形的边的交点数量一定是奇数</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204352-8swig07.png" alt="image">​</p>
<p>简单做法：一个一个三角形求解是否与射线相交</p>
<p>先光线与平面求交，再判断一个点是不是在三角形内部</p>
<p>用一个法线和一个平面上的点可以确定一个平面</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204358-d9252z6.png" alt="image">​</p>
<p>Möller Trumbore Algorithm</p>
<p>快速求交点（重心坐标表示平面上的点）</p>
<p>解线性方程组</p>
<p>b1 和 b2 必须是非负的</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204403-w9iwkuw.png" alt="image">​</p>
<p>加速光线和表面求交</p>
<p>如果每个三角形都求一次交点很花时间</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204408-5knulr8.png" alt="image">​</p>
<p>用包围盒进行加速<br />如果一个光线碰不到包围盒，那就不可能碰到包围和里的物体</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204414-yjgij4p.png" alt="image">​</p>
<p>三个对面形成的交集</p>
<p>通常用 AABB 包围盒（和坐标轴平行的包围盒）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204421-i2ydbcm.png" alt="image">​</p>
<p>2D 求交：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204426-nic5gz7.png" alt="image">​</p>
<p>3D 求交：<br>3D 下有三组对面，光线要进入所有面才算进入盒子，只要出了一个面就认为出了盒子</p>
<p>3D 对三组对面分别计算进入的最大时间和出来的最小时间</p>
<p>如果出来时间小于进入时间，说明光线在盒子里待了一段时间</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204432-5woyi5w.png" alt="image">​</p>
<p>离开时间小于 0，说明盒子在光线背后</p>
<p>如果进入时间小于 0，说明起点在盒子里</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204437-seo5rd8.png" alt="image">​</p>
<p>用 AABB 包围盒更好计算</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204441-g7rxglt.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十九章：相机、透镜、光场</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AB%A0%EF%BC%9A%E7%9B%B8%E6%9C%BA%E3%80%81%E9%80%8F%E9%95%9C%E3%80%81%E5%85%89%E5%9C%BA/</url>
    <content><![CDATA[<p> Cameras, Lenses and Light Fields (相机、透镜、光场)</p>
<p>成像（Image） &#x3D; 合成（Synthesis） + 捕捉（Capture）</p>
<p>transient image：研究光在极短时间内传播会看到什么。</p>
<p>整个 Imgae 更多的是在 computational photography 里面的研究。</p>
<p>回到图形学里面：</p>
<h4 id="捕捉"><a href="#捕捉" class="headerlink" title="捕捉"></a><strong>捕捉</strong></h4><h5 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h5><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211721-jdntact.png" alt="image">​</p>
<h5 id="小孔成像"><a href="#小孔成像" class="headerlink" title="小孔成像"></a>小孔成像</h5><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211730-ub76db3.png" alt="image">​</p>
<p>快门控制光进入相机</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211736-9qblx1h.png" alt="image">​</p>
<p>传感器（记录 irradiance）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211740-f77po2b.png" alt="image">​</p>
<p>如果没有透镜，一个点可能接受各个方向传播过来的光，成的像就是糊的</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211744-b6dit7w.png" alt="image">​</p>
<p>有一些研究在研究一些传感器，可以分开不同的方向记录</p>
<h5 id="针孔相机"><a href="#针孔相机" class="headerlink" title="针孔相机"></a><strong>针孔相机</strong></h5><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211749-w3368cy.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211757-huath5x.png" alt="image">​</p>
<p>针孔相机拍出的像没有景深，各个方向都不会虚化。做光线追踪的时候也是用的针孔相机的模型。模拟光线和透镜作用，也可以做出景深的效果。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211801-thidn4r.png" alt="image">​</p>
<p>视场（Field of View）</p>
<p>能看到多大的范围，h：传感器的高度，f：焦距（传感器离小孔的距离）。焦距越小，视场越大。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211806-5nwla8i.png" alt="image">​</p>
<p>一般定义视场都是认为以 35mm 的胶片（传感器）为基准，通过定义焦距来定义 FOV。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211812-33sajcf.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211816-wuq8s3p.png" alt="image">​</p>
<p>传感器越小，FOV 也越小</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211820-ar7anrv.png" alt="image">​</p>
<p>传感器（Sensor）和胶片（Film）不完全等价，传感器负责记录每个像素收到的 irradiance 有多大，胶片决定存成什么样的图片格式。</p>
<p>大的相机有大的传感器，所以有更大的分辨率</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211825-rsbp4zy.png" alt="image">​</p>
<h4 id="曝光（Exposure）"><a href="#曝光（Exposure）" class="headerlink" title="曝光（Exposure）"></a><strong>曝光（Exposure）</strong></h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211836-2f8juf4.png" alt="image">​</p>
<p>相机里面影响照片拍出来亮度的因素：</p>
<p>光圈（aperture）大小<br>相机可以控制光圈大小，由 f-stop 来控制。光圈大小会影响 senser 上的任意一个点接收到的 irradiance 的大小。</p>
<p>快门（Shutter）速度</p>
<p>快门速度越快，开放时间越短，越少的光进来</p>
<p>ISO gain（增益）感光度</p>
<p>后期处理，接收到光后乘上一个数。这个处理可以在任何一个地方，比如说调节感光器的灵敏度，或者生成照片后，在照片的数字信号上去调节。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211846-kx5cvep.png" alt="image">​</p>
<p>F 越小，光圈越大，周围越虚化</p>
<p>速度慢，曝光时间越长，图片越模糊</p>
<p>ISO 乘的数字越大，噪声越明显</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211850-bo2pzuj.png" alt="image">​</p>
<p>ISO</p>
<p>简单的线性的乘</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211855-8hxbixn.png" alt="image">​</p>
<p>ISO 能提高曝光度，但是会造成噪声放大的问题</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211901-02hmz5l.png" alt="image">​</p>
<p>描述光圈大小的数：F-Number（F-Stop）</p>
<p>非正式理解：F 是 1&#x2F;光圈直径</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211907-62ykgl5.png" alt="image">​</p>
<p><strong>快门</strong></p>
<p>快门用来调节曝光度，对于机械快门来说，无论速度多块，它的打开都有一个过程</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211912-lbxj9qn.png" alt="image">​</p>
<p>快门的速度对最后的成像会造成影响。</p>
<p>高速运动的物体在快门曝光时间长会出现运动模糊，因为快门打开和关闭时，物体的位置不一样，最后得到的是平均之后的效果，所以会产生模糊。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211917-ocock1a.png" alt="image">​</p>
<p>提高快门速度，可以减少运动模糊。但是曝光度也减少了，所以要保证亮度，还得调光圈和 ISO。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211922-bmwdfdy.png" alt="image">​</p>
<p>如果物体的运动比快门速度更快或差不多，会造成对于非常高速运动的物体的扭曲，因为不同位置的图像可能记录的是不同时刻进来的光。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211927-53bdtkr.png" alt="image">​</p>
<h4 id="快门和光圈"><a href="#快门和光圈" class="headerlink" title="快门和光圈"></a>快门和光圈</h4><p>要保证曝光度，快门速度快，就要提高光圈大小</p>
<p>F-Stop 是 1&#x2F;直径，考虑光进来要用面积来算</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211936-4pzj3rh.png" alt="image">​</p>
<p>高速摄影</p>
<p>非常短的快门时间，大的光圈</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211942-fr0jwkt.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211947-0awm7cy.png" alt="image">​</p>
<p>超低速摄影</p>
<p>延迟摄影，延长曝光时间，调小光圈</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211953-dezbeh1.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212000-7r04ove.png" alt="image">​</p>
<p>薄透镜近似</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212004-cxcrxym.png" alt="image">​</p>
<p>一面凸一面平的透镜无法把光聚到一点上：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212008-jufrfq0.png" alt="image">​</p>
<p>理想化的薄透镜</p>
<p>平行的光打进来可以折射到一个焦点上，焦点到透镜中心的距离叫做焦距</p>
<p>根据光路的可逆性，光从焦点打到透镜上，会折射成平行光</p>
<p>薄透镜可以任意改变它的焦距（透镜组）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212013-1olg3xh.png" alt="image">​</p>
<p>透镜满足基本的物理规律：<br>从任何一个方向穿过透镜的中心都不会改变方向。</p>
<p>z₀：物距</p>
<p>z_(i)：相距</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212020-mig1p7g.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212024-czodgda.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212028-m9h24m0.png" alt="image">​</p>
<p>Defocus Blur</p>
<p>CoC：物体成像的点离感光元件还有一段距离时，光线会继续传播，到达感光元件上的时候会是一个圆，这个圆就叫做 CoC。CoC 的大小和光圈大小成正比。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212034-hzeubvv.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212037-i0kq776.png" alt="image">​</p>
<p>重新定义 F-Number</p>
<p>F-Number：焦距&#x2F;光圈的直径</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212042-cppgy9t.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212045-ar7kcz2.png" alt="image">​</p>
<p>拍更清楚的照片要用小光圈</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212050-lxsdulq.png" alt="image">​</p>
<p>模拟薄透镜做光线追踪</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212055-y4y2nws.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212059-f80jcts.png" alt="image">​</p>
<p>景深（Depth of Field）</p>
<p>用不同大小的光圈会影响景深的范围</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212102-fdm5pap.png" alt="image">​</p>
<p>景深就是指成像清晰的一段范围：在实际场景中有一段深度，这段深度经过透镜后会在成像屏幕附近有一段区域，这段区域的 CoC 都是足够小的。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212107-6aqkz1z.png" alt="image">​</p>
<p>景深的最远处穿过透镜和最近处穿过透镜会得到一段范围 Depth of focus：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817212112-4gc8rlq.png" alt="image">​</p>
<p>光场&#x2F;Lumigraph（to be continue）</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十二章：Mesh细分、光线追踪</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9AMesh%E7%BB%86%E5%88%86%E3%80%81%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h3 id="网格操作：细分、简化、规则化"><a href="#网格操作：细分、简化、规则化" class="headerlink" title="网格操作：细分、简化、规则化"></a>网格操作：细分、简化、规则化</h3><p>Mesh 细分（引入更多的三角形，让三角形的位置发生变化，使得原来的模型变得更光滑）</p>
<p>Loop Subdivision（Loop 不是循环的意思，是发明者的 familyname 是 Loop）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203741-vrjiai4.png" alt="image">​</p>
<p>1.把三角形分成更多的三角形：连接边的中点</p>
<p>2.调整三角形的位置（把三角形的顶点区分成新的顶点和老的顶点，分别应用不同的规则改变顶点的位置）</p>
<p>度：一个点相邻的边数。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203748-jh7r0of.png" alt="image">​</p>
<p>新的顶点用四周的老顶点做加权平均</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203753-n5c1ivn.png" alt="image">​</p>
<p>老的点用原本的点位置和相连三角形的顶点位置再加上度做加权平均。</p>
<p>Catmull-Clark Subdivision（General Mesh）</p>
<p>Loop Subdivision 只能处理三角形的情况，Catmull-Clark 可以处理任何面</p>
<p>两个概念：</p>
<p>1.非四边形面</p>
<p>2.奇艺点（度不为 4 的点）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203759-efb66dj.png" alt="image">​</p>
<h4 id="细分："><a href="#细分：" class="headerlink" title="细分："></a>细分：</h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203759-efb66dj.png" alt="image">​</p>
<p>每一条边都选它的中点，每一个面都选中间的一个点。把边上的中点和面的中点连起来。</p>
<p>只要是非四边形面，就一定会引入新的奇艺点。经过一次细分后，非四边形都会消失，也即不会再增加新的奇艺点。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203835-vn53o33.png" alt="image">​</p>
<p>新的点考虑在面中心的点和边中心的点两种情况。</p>
<p>老的点用它原本的位置和新的面中心点、边中心点做加权平均。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203840-gizxki9.png" alt="image">​</p>
<h4 id="Mesh-简化"><a href="#Mesh-简化" class="headerlink" title="Mesh 简化"></a>Mesh 简化</h4><p>不同情况下选用不同复杂度的模型，比如离得远的时候用简化模型</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203915-3xed1sl.png" alt="image">​</p>
<p>但是几何的层级结构不好处理，从 300 个网格到 3000 个网格时平滑过渡怎么处理</p>
<h5 id="简化怎么计算？"><a href="#简化怎么计算？" class="headerlink" title="简化怎么计算？"></a>简化怎么计算？</h5><p>一种方法：边坍缩</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203915-3xed1sl.png" alt="image">​</p>
<p>坍缩即找到一条边的两个顶点，捏成一个顶点，重点是找到要坍缩哪些点。</p>
<p>用到一种叫做二次（平方）误差度量（Quadric Error Metrics）的方法</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203925-xsk1ax6.png" alt="image">​</p>
<p>找到一个最优位置，使得它到原本相关联的各个面的平方和达到最小。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203930-kcxeki3.png" alt="image">​</p>
<p>选坍缩的边的时候，给每个边一个分数表示坍缩后最优位置计算出来的平方和，选择平方和最小的边。但是坍缩一条边后，会影响其他相邻的边。所以需要一边求最小，一边动态更新任一点的值，需要用到优先队列（堆）的数据结构。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203937-ge7wdte.png" alt="image">​</p>
<p>局部取最小，更新受影响的边的二次度量误差，再取最小，再更新…</p>
<p>用局部最优解找全局最优解（贪心算法）</p>
<p>越简单越接近平面的面坍缩得越多（计算出来的二次度量误差越小），比如下图中的小奶牛的面部坍缩的多，但是颈部坍缩的少</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203942-g2sko9n.png" alt="image">​</p>
<h3 id="光线追踪"><a href="#光线追踪" class="headerlink" title="光线追踪"></a><strong>光线追踪</strong></h3><p>光栅化怎么绘制阴影？</p>
<p>着色是一种局部行为，仅考虑自己、光源和摄像机，不考虑其他物体，因此无法解决阴影的问题</p>
<p>于是发明了<strong>阴影映射（shadow mapping）。</strong></p>
<ul>
<li><p>图像空间算法</p>
</li>
<li><ul>
<li>在生成阴影的时候不需要知道场景的几何信息</li>
<li>会产生走样现象</li>
</ul>
</li>
<li><p>主要思想</p>
<ul>
<li>如果一个点不在阴影里面，说明可以从照相机看到这个点，也可以从光源看到这个点</li>
<li>如果一个点在阴影里，说明相机可以看到这个点，但是光看不到这个点</li>
</ul>
</li>
</ul>
<p>经典的 shadow mappding 只能处理点光源，这种阴影是非 0 即 1 的阴影，叫做硬阴影</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203952-o4xzfvk.png" alt="image">​</p>
<p>从光源看向物体，生成一幅图，把不同位置看到的点的深度记录下来</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817203958-kxh4gvc.png" alt="image">​</p>
<p>再从摄像机出发看向场景。把看到的点投影回光源，就知道之前记录到深度图上的深度。把记录的深度图深度和眼睛看到的点到光源的实际深度比较，如果二者一致，说明这个点一定即可以被光源看到，又可以被摄像机看到。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204010-1qz8hu3.png" alt="image">​</p>
<p>如果深度不一致，说明这个点被挡住了。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204014-gt5m7zx.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204019-nkz2q3v.png" alt="image">​</p>
<p>shadowMapping 会有各种问题：<br>判断深度是否相等，需要判断两个浮点数相等，实际一定会有误差，有精度问题。</p>
<p>另外 shadowMap 自己有分辨率，如果这个分辨率很低，但是渲染场景的分辨率很高，那么阴影信息是走样的</p>
<p>另外要做两遍渲染，从光源看过去做一遍，从相机看过去做一遍，性能开销大</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204025-oor2frq.png" alt="image">​</p>
<h4 id="硬阴影-VS-软阴影"><a href="#硬阴影-VS-软阴影" class="headerlink" title="硬阴影 VS 软阴影"></a>硬阴影 VS 软阴影</h4><p>硬阴影要么可见要么不可见，边缘很锐利</p>
<p>软光源边缘是慢慢过渡的，越靠近物体根部阴影越硬</p>
<p>软硬指的是物理上的半影。如果一个地方完全看不到光源，则这个地方叫做本影区域，如果看得到部分光源就叫做半影，如果完全能看到则没有阴影。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204032-beag1cr.png" alt="image">​</p>
<p>阴影程度取决于可以看到多大的光源。</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十五章：Ray tracing 3 光线传播和全局光照</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9ARay%20tracing%203%20%E5%85%89%E7%BA%BF%E4%BC%A0%E6%92%AD%E5%92%8C%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</url>
    <content><![CDATA[<p>RayTracing 3 光线传播和全局光照</p>
<p>回顾上节课</p>
<ul>
<li><p>基础的光线追踪</p>
<ul>
<li>光线生成</li>
<li>光线和对象求交</li>
</ul>
</li>
<li><p>加速</p>
<ul>
<li>光线和 AABB 盒求交</li>
<li>空间划分 VS 物体划分</li>
<li>BVH 遍历</li>
</ul>
</li>
<li><p>辐射度量学</p>
</li>
</ul>
<p>本节课</p>
<ul>
<li><p>继续辐射度量学</p>
</li>
<li><p>光线传播</p>
<ul>
<li>反射方程</li>
<li>渲染方程</li>
</ul>
</li>
<li><p>全局光照</p>
</li>
<li><p>概率论</p>
</li>
</ul>
<p>回顾上节课的概念</p>
<p>Radiant energy Q </p>
<p>Radiant flux（power）（单位时间的能量）</p>
<p>Radiant intensity （单位立体角的能量）</p>
<h4 id="Solid-Angle（立体角）"><a href="#Solid-Angle（立体角）" class="headerlink" title="Solid Angle（立体角）"></a>Solid Angle（立体角）</h4><p>我们考虑光照都是用瞬时量，因为物体一般接受能量一边也在辐射能量，有一些荧光的材质可能收到光线时间长短影响有不同的颜色，这种情况先不考虑。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205113-x9s6j1d.png" alt="image">​</p>
<h5 id="微分立体角"><a href="#微分立体角" class="headerlink" title="微分立体角"></a>微分立体角</h5><p>（θ，Φ）不是均匀的划分球体面积，靠近顶（底）部，sinθ 小，微分立体角小，靠近球中间，sinθ 大。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205118-m4jv0v0.png" alt="image">​</p>
<h5 id="Irradiance（power-per-unit-area）"><a href="#Irradiance（power-per-unit-area）" class="headerlink" title="Irradiance（power per unit area）"></a>Irradiance（power per unit area）</h5><p>单位面积垂直方向上的光线的能量，光如果不是垂直的，需要计算垂直方向的投影</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205125-klu2c8j.png" alt="image">​</p>
<p>夏天太阳垂直照射，冬天有一个倾斜角度</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205130-byl9p9q.png" alt="image">​</p>
<h5 id="Irradiance-Fallof"><a href="#Irradiance-Fallof" class="headerlink" title="Irradiance Fallof"></a>Irradiance Fallof</h5><p>单位立体角的能量不会衰减（r 越大辐射面积越大，单位体积角始终不变），单位面积能量会衰减。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205136-q8atzv3.png" alt="image">​</p>
<h5 id="Radiance"><a href="#Radiance" class="headerlink" title="Radiance"></a>Radiance</h5><p>光线传播过程中带的能量。单位立体角、单位投影面积上的能量。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205141-jvr3dyt.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205149-8daktbu.png" alt="image">​</p>
<p>irradiance 和 radiance 的区别：是否有方向性。radiance 可以理解为单位面积上某个方向接受到的能量。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205207-3le02ac.png" alt="image">​</p>
<p>也可以用 intensity 来理解，即一个单位面积上往一个方向辐射出去的能量。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205212-ougl2it.png" alt="image">​</p>
<p>对各个方向的 radiance 积分得到 irradiance。H 平方表示半球。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205218-v4bk3vm.png" alt="image">​</p>
<h4 id="反射方程："><a href="#反射方程：" class="headerlink" title="反射方程："></a>反射方程：</h4><p>Bidirectional Reflectance Distribution Function （BRDF， 双向反射分布函数）</p>
<p>理解反射：<br />可以理解为光线发射到一个物体表面，被吸收了，再从某一个角度发出去</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205224-qudzrqa.png" alt="image">​</p>
<p>dE(ω_(i))表示 dA 在一个方向上的单位立体角接收到的能量，dL_(r)(ω_(i))表示一个比率：dA 上任何一个出射方向算出来的 radiance 除以 dA 接收到的 irradiance。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205318-uqhg02p.png" alt="image">​</p>
<p>BRDF 定义了光线和物体是怎么作用的，定义了不同的材质</p>
<p>任何一个输入方向对观测方向的贡献加起来得到最终的光照</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205323-ekculy6.png" alt="image">​</p>
<p>光线会弹射多次，任何出射的 radiance 都有可能成为入射的 radiance，所以是一个递归的问题。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205328-n4taoy5.png" alt="image">​</p>
<h4 id="渲染方程（绘制方程）"><a href="#渲染方程（绘制方程）" class="headerlink" title="渲染方程（绘制方程）"></a>渲染方程（绘制方程）</h4><p>假如物体自己会发光，出射的光线包含两部分。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205333-zxc17qd.png" alt="image">​</p>
<p>方程中假设所有方向都是向外的。</p>
<p>一个点光源：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205338-iu0rf82.png" alt="image">​</p>
<p>如果有很多点光源，就把每个点光源的反射加起来：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205344-kwfp0lb.png" alt="image">​</p>
<p>如果是一个面光源，就把面光源上每个点的反射积分：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205348-abgm9qo.png" alt="image">​</p>
<p>radiance 不只是从光源发出的，也有可能是其他点反射的 radiance。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205355-bygbgw8.png" alt="image">​</p>
<p>简写渲染方程：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205359-amjmbla.png" alt="image">​</p>
<p>写成算子的形式：<br />E：光源发出的能量，K：反射操作符，KL：反射的能量</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205405-8pgh610.png" alt="image">​</p>
<p>求解 L，下图 I 表示单位矩阵，最后 L 可以写成一种泰勒展开的形式：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205410-d8we07n.png" alt="image">​</p>
<p>L 表示为一种弹射次数的分解：</p>
<p>弹射 0 次：光源自己</p>
<p>弹射一次：直接光照</p>
<p>弹射两次及以上：间接光照</p>
<p>全局光照：直接和间接光照的集合</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205417-9qmdapy.png" alt="image">​</p>
<p>光栅化做的部分：弹射 0 次和 1 次，后面的部分光栅化很难处理，因此用光线追踪来处理</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205423-8seoqud.png" alt="image">​</p>
<p>接下来求解渲染方程。</p>
<p>需要一些前置的概率论知识：</p>
<p>X：随机变量</p>
<p>p(x)：随机变量的概率分布</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205428-314odlg.png" alt="image">​</p>
<p>概率：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205433-qhqm29n.png" alt="image">​</p>
<p>期望（平均）：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205437-mm3719d.png" alt="image">​</p>
<p>连续情况下描述变量和分布（概率密度函数）：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205442-0dhlbe4.png" alt="image">​</p>
<p>如果有一个随机变量的函数，函数的期望等于函数在某个变量的值乘以对应的概率密度再积分。</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十八章：高级光线传播</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E9%AB%98%E7%BA%A7%E5%85%89%E7%BA%BF%E4%BC%A0%E6%92%AD/</url>
    <content><![CDATA[<h3 id="高级光线传播"><a href="#高级光线传播" class="headerlink" title="高级光线传播"></a><strong>高级光线传播</strong></h3><ul>
<li>无偏的光线传播方法<ul>
<li>双向路径追踪（BDPT）</li>
<li>Metropolis 光线传播（MLT）</li>
</ul>
</li>
</ul>
<ul>
<li><p>有偏的光线追踪方法</p>
<ul>
<li>光子映射（Photon mapping）</li>
<li>Vertex connection and merging（VCM，结合了光子映射和双向映射追踪）</li>
</ul>
</li>
<li><p>实时辐射度算法（把间接光表示成很多很小的光源）</p>
</li>
<li><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210449-rafge05.png" alt="image">​</p>
</li>
</ul>
<h4 id="无偏和有偏"><a href="#无偏和有偏" class="headerlink" title="无偏和有偏"></a><strong>无偏和有偏</strong></h4><p>蒙特卡罗不管用多少样本，期望永远是对的，被称为无偏的；其他情况就是有偏的，但如果取的样本非常多，多到无穷多，最后期望值会收敛到正确值。这个时候就称为一致的。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210458-j95kajg.png" alt="image">​</p>
<h4 id="双向路径追踪"><a href="#双向路径追踪" class="headerlink" title="双向路径追踪"></a><strong>双向路径追踪</strong></h4><p>路径追踪是利用光路可逆性，从相机开始打出的路径，连接相机和光源</p>
<p>双向路径追踪分别从光源和相机出发，生成两条半（子）路径，再把半路径的端点连接起来，就形成了整个路径。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210503-otznwgf.png" alt="image">​</p>
<p>双线路径追踪适合光源在一侧的复杂传输，但是实现起来比较困难，且运行速度很慢</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210508-mvlce8c.png" alt="image">​</p>
<h4 id="Metropolis-光线传播"><a href="#Metropolis-光线传播" class="headerlink" title="Metropolis 光线传播"></a><strong>Metropolis 光线传播</strong></h4><p>用一个统计学上的采样工具马尔可夫链，通过当前的样本，生成和他靠近的下一个样本。可以做到只要给足够的时间，可以生成以任意的函数的形状为 PDF 的样本。</p>
<p>而当采样的函数 p(x)和积分的函数 f(x)的形状一致的时候，得到的偏差是最小的。</p>
<p>给定一条路径，可以生成周围更多和他相似的路径。因此是一个局部的方法。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210513-m3kjpoa.png" alt="image">​</p>
<p>Metropolis 特别适合做复杂的光路传播，因为只要找到一条正确的，就能不断在它周围找到更多。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210518-yr7m9na.png" alt="image">​</p>
<p>缺点是：<br>1.很难在理论上分析它收敛的速度（给一幅图，无法分析渲染多长时间才会收敛）</p>
<p>2.所有操作都是局部的，有一些像素收敛的快，有一些收敛的慢，得到的图像比较“脏“</p>
<p>3.因为不同像素收敛速度不一样，所以不能渲染动画。因为两帧之间会差距很大。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210524-yzpjvr2.png" alt="image">​</p>
<h4 id="光子映射"><a href="#光子映射" class="headerlink" title="光子映射"></a><strong>光子映射</strong></h4><p>光子映射是一个有偏的估计，很适合用来渲染 caustic（caustic 是由于光线聚焦产生的一些图案）。同时适合用来处理 SDS 路径。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210529-xpgewj2.png" alt="image">​</p>
<p>一种光子映射的方法：<br>第一步：光子从光源出发，不断的反射和折射，直到光子打到 diffuse 的物体，就停下来。然后把所有的光子都记录下来</p>
<p>第二步：从相机开始打出多条路径，直到打到 diffuse 的物体上就停下来</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210534-bqsftuw.png" alt="image">​</p>
<p>接下来做局部的密度估计：</p>
<p>对任何一个着色点，选择离他最近的 n 个光子，再找这 n 的光子占据的面的面积，计算光子的密度。光子分布的越集中的地方越亮。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210539-ncxmjrb.png" alt="image">​</p>
<p>为什么是有偏的：<br />正常计算密度应该用很小的 n 除以很小的面积，当实际的覆盖面积足够小（光子打出去的面积足够多）的时候，就接近真实的密度，这种情况被称为是一致的。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210544-m04arg7.png" alt="image">​</p>
<p>在渲染里简单的理解有偏或无偏：<br>有偏：只要结果有一点模糊，就认为是有偏的。</p>
<p>一致的：虽然有模糊的，但是样本足够多，就能收敛到正确的结果。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210549-gtjdxe6.png" alt="image">​</p>
<h4 id="Vertex-Connection-and-Merging"><a href="#Vertex-Connection-and-Merging" class="headerlink" title="Vertex Connection and Merging"></a><strong>Vertex Connection and Merging</strong></h4><p>双向路径追踪和光子映射的结合</p>
<p>主要思想是：对于两个 subpath，最后他们的交点非常接近的时候，用光子映射把两个 subpath 结合到一起。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210555-7ryptvn.png" alt="image">​</p>
<h5 id="Instant-Radiosity-实时辐射度"><a href="#Instant-Radiosity-实时辐射度" class="headerlink" title="Instant Radiosity 实时辐射度"></a><strong>Instant Radiosity 实时辐射度</strong></h5><p>认为已经被照亮的地方就是光源，可以继续照射别的地方。</p>
<p>假设从光源射出来的光线最后会停在某个地方，这个地方就变成了一个虚拟的点光源，然后用这些虚拟的点光源照亮着色点。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210601-mwl9t0z.png" alt="image">​</p>
<p>缺点：</p>
<p>1.在一些接缝会出现一些光点</p>
<p>2.做不了镜面的材质</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210606-nird8z3.png" alt="image">​</p>
<p>出现光点的原因是：做 light sampling 的时候，对积分域转换，把对立体角的采样转换成对面积的采样。此处分母出现了一个距离的平方，当距离很近，接近 0 点时候会出现一个很大的结果。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205831-kbeuy6l.png" alt="image">​</p>
<p>工业界现在主要在用 path tracing 的方法。</p>
<h4 id="Advanced-Appearance-Modeling-外观建模"><a href="#Advanced-Appearance-Modeling-外观建模" class="headerlink" title="Advanced Appearance Modeling 外观建模"></a><strong>Advanced Appearance Modeling 外观建模</strong></h4><ul>
<li><p>非表面模型</p>
<ul>
<li>散射介质</li>
<li>头发、毛发、纤维</li>
<li>粒状材质（沙子）</li>
</ul>
</li>
<li><p>表面模型</p>
<ul>
<li>半透明材质</li>
<li>布料</li>
<li>有细节度的模型</li>
</ul>
</li>
<li><p>程序化生成的模型</p>
</li>
<li><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210635-ey35l8m.png" alt="image">​</p>
</li>
</ul>
<h5 id="非表面模型"><a href="#非表面模型" class="headerlink" title="非表面模型"></a><strong>非表面模型</strong></h5><p><strong>散射介质</strong>：雾、云</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210642-hkzfvub.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210646-m8q1772.png" alt="image">​</p>
<p>光线的传播过程中会：1.被吸收 2.被散射</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210651-7dgv07t.png" alt="image">​</p>
<p>由 Phase Function（相位函数）来定义在每个点怎么散射</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210656-t4ld57w.png" alt="image">​</p>
<h5 id="散射介质的渲染"><a href="#散射介质的渲染" class="headerlink" title="散射介质的渲染"></a>散射介质的渲染</h5><p>随机地找到一个方向发生弹射，随机地往一个方向前进，找到一个 path 把各个弹射的位置相连。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210700-ipm9m0r.png" alt="image">​</p>
<p>participanting media 有很多应用：<br />超能特工队</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210705-whu0gey.png" alt="image">​</p>
<p>刺客信条：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210710-9pnih2p.png" alt="image">​</p>
<p>巧克力也是一种散射介质，只是光进去了以后很快就会消失</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210715-fn5elqm.png" alt="image">​</p>
<h6 id="头发（-光线和一根曲线作用）"><a href="#头发（-光线和一根曲线作用）" class="headerlink" title="**头发（**光线和一根曲线作用）"></a>**头发（**光线和一根曲线作用）</h6><p>有两种类型的高光：有色的高光和无色的高光。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210719-maoriyz.png" alt="image">​</p>
<p>Kajiya-Kay<br />把头发当成一个圆柱，光线打到上面会散射出一个圆锥。同时，有一些光线会被散射到四面八光（有点类似于 Diffuse 和 Specular 加起来）。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210724-zy065l5.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210728-2hx9ny0.png" alt="image">​​</p>
<p>Marschner Model</p>
<p>考虑光线打到头发上，有一部会直接反射，记为 R</p>
<p>一部分会打进去，发生折射，再打出来，记为 TT</p>
<p>还有一部分进到头发里面，走到内壁，发生一次内部的反射，再发生一次穿透，记 TRT</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210738-aa1240r.png" alt="image">​</p>
<p>把头发当成一个玻璃材质的圆柱，有表皮（cuticle）和皮层（cortex）。头发内部有色素，光线传播进去会有部分被吸收。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210743-3vk9pzv.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210746-r444iza.png" alt="image">​</p>
<p>光线打到多根头发，就会从一根头发弹射到另一根头发，所以计算量巨大。</p>
<p>头发模型的应用：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210751-fycq4ef.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210755-qa328qe.png" alt="image">​</p>
<p>人的头发模型不足以描述光线和动物毛发的作用</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210804-lqruv79.png" alt="image">​</p>
<p>毛发除了之前提到的表皮和皮质层，还有中间的髓质层，光线进入髓质层会被反射到四面八方。而动物毛发的髓质层比人要粗很多。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210809-uei58uw.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210813-7m0ratb.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210816-b3cvtyb.png" alt="image">​</p>
<p>Double Cylinder Model（双层圆柱模型）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210821-7zce8xa.png" alt="image">​</p>
<p>相比之前增加了光线穿过髓质折射出来的分量 TTs 和光线穿过髓质，发生反射再穿出来的分量 TRTs</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210825-h1yddpz.png" alt="image">​</p>
<p>最后头发的颜色由五个分量结合而成：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210830-0lq5865.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210834-v67bpqe.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210837-efkz5gm.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210841-jfe5ugl.png" alt="image">​</p>
<p><strong>Granular Material（颗粒材料）</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210847-7y4bt6a.png" alt="image">​</p>
<p>可以做一些简化，不去计算每一个颗粒。</p>
<p>比如下图中，把整个模型分成很多个单元，每个单元中由不同的材质按不同的比例来构成。用这种单元模型去做渲染。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210852-pz6cfqi.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210855-yjgauem.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210858-y825oep.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210902-f219ixi.png" alt="image">​</p>
<h5 id="非表面模型-translucent-material-（半透明材质）"><a href="#非表面模型-translucent-material-（半透明材质）" class="headerlink" title="非表面模型 translucent material （半透明材质）"></a><strong>非表面模型</strong> translucent material （半透明材质）</h5><p>光线可以从某个地方进去材质表面，从另外一个面穿出来。</p>
<p>​​玉石：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210907-9xfh6bg.png" alt="image">​</p>
<p>水母：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210914-557rp6k.png" alt="image">​</p>
<p>次表面散射：光线从一个点进入物体表现，发生了很多次反射，再从另一个表面出来。]</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210926-39bmn2y.png" alt="image">​</p>
<p>次表面反射是对 BRDF 的延伸，BSSRDF，中间加了 SS（次表面反射）。即计算一个点的反射，除了考虑各个方向对这个点的影响，还要考虑其他点反射过来的光，既要对方向做积分，又要对面积做积分。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210931-iao0nml.png" alt="image">​</p>
<p>Dipole Approximation<br />次表面反射可以近似为物体内部的一个光源加上外部的一个光源共同照射的结果：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210936-50h97zo.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210941-cg3xvfh.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210945-pvhguml.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210950-rsxgkci.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210953-l34aj56.png" alt="image">​</p>
<p>BSSRDF 的应用：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817210958-2fizy28.png" alt="image">​</p>
<p><strong>Cloth 材质</strong></p>
<p>很多纤维缠绕形成股，很多股缠绕形成线，最后织成布。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211003-utxm1ek.png" alt="image">​</p>
<p>有三种方法进行渲染：</p>
<p>1.把布当作表面，用 BRDF 模型进行渲染。根据不同的织法、形状得到不同的渲染结果。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211013-nznj6he.png" alt="image">​</p>
<p>但是明显布的材质不一定是一个表面，比如天鹅绒材质。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211017-dmw1ob6.png" alt="image">​</p>
<p>2.像散射介质一样渲染：把空间分成很小的格子，知道每个格子的纤维朝向分布、复杂程度。把这些性质转换为光线的吸收和散射，就像是渲染散射介质。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211023-e4t83ap.png" alt="image">​</p>
<p>3.把每一根纤维都渲染出来，当头发一样渲染。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211027-wxa0g03.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211031-f9ovxu5.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211035-2szkdrt.png" alt="image">​</p>
<p><strong>有细节的复杂材质</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211042-rn6ehn7.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211046-bvl8m2z.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211050-13rjg79.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211053-70ppxx2.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211057-agkm8oc.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211100-64a767r.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211104-32jgmlo.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211108-2wr6ccu.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211112-8bn8rgt.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211116-r0dg6g3.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211120-pgov3tv.png" alt="image">​</p>
<p>我们认为每一个微表面都是镜面，很难通过反射的方式让光线打到光源或者摄像机上。所以用一个像素覆盖很多微表面，在一个小的范围内把微表面的法线分布算出来，替代之前光滑的分布。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211127-535rwg7.png" alt="image">​</p>
<p>不同的范围选择会得到不同的微表面法线分布结果：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211134-g6gysfn.png" alt="image">​</p>
<p>不同性质的材质会得到不同形状的微表面分布：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211139-pvrkpls.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211145-ppe0chi.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211150-i4yk4fi.png" alt="image">​</p>
<p>细节材质的应用</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211154-6tvipfw.png" alt="image">​</p>
<p>在微型的细节上，比如物体很小，小到和光的波长相当，此时不能从几何光学的角度去分析，要考虑光的振动，需要用到波动光学。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211159-sld6fjy.png" alt="image">​</p>
<p>在一个黑暗的房间里用点光源打出一道光，会看到材质表面有很多颜色：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211203-ev3uyyp.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211208-d3j0mo9.png" alt="image">​</p>
<p>波动光学下的 BRDF：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211211-mmusp3p.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211215-bd78kjn.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211218-th5itfy.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211223-3yq66jl.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211227-xwalx32.png" alt="image">​</p>
<p><strong>程序化生成的表面（Procedural Appearance）</strong></p>
<p>用三维空间中的噪声函数生成材质外观，procedural 表示不提前生成，随用随取，用的时候去查询。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211232-uurjwpl.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211237-blf0c0h.png" alt="image">​​</p>
<p>对噪声函数可以做一些处理得到不同的效果，比如车上的锈，可以做二值化，有些地方有，有些地方没有。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211249-v7g4u40.png" alt="image">​</p>
<h5 id="噪声函数的应用"><a href="#噪声函数的应用" class="headerlink" title="噪声函数的应用"></a>噪声函数的应用</h5><p>生成地形</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211254-h8580kh.png" alt="image">​</p>
<p>生成水面</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211259-o0afr75.png" alt="image">​</p>
<p>生成三维的木头，任意切割可以得到内部的外观</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211303-7hxibix.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817211306-ei5l4ua.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十六章：Ray tracing4 蒙特卡洛路径追踪</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9ARay%20tracing4%20%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<p>Ray tracing4 蒙特卡洛路径追踪</p>
<p>回顾上节课</p>
<ul>
<li><p>辐射度量学</p>
</li>
<li><p>光线传播</p>
<ul>
<li>反射方程</li>
<li>渲染方程</li>
</ul>
</li>
<li><p>全局光照</p>
</li>
<li><p>概率论复习</p>
</li>
</ul>
<p>本节课：</p>
<ul>
<li>简短的 review</li>
<li>蒙特卡洛积分</li>
<li>路径追踪</li>
</ul>
<p>review</p>
<p><strong>渲染方程</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205531-83rv7sy.png" alt="image">​</p>
<p><strong>概率论</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205535-nn8mt4j.png" alt="image">​</p>
<h4 id="蒙特卡洛积分"><a href="#蒙特卡洛积分" class="headerlink" title="蒙特卡洛积分"></a><strong>蒙特卡洛积分</strong></h4><p>在 a、b 随机采样，找到一个 x 对应的 f(x)，用 f(x)从 a 到 b 围出一个矩形。做多次采样，平均采样的结果，得到一个定积分的值。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205540-t4ojzq6.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205550-00utws4.png" alt="image">​</p>
<p>如果是均匀的采样，采样的 PDF 是一个常数：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205555-9eais6i.png" alt="image">​</p>
<p>对于均匀的采样，蒙特卡洛的积分结果是：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205559-tliff6d.png" alt="image">​</p>
<p>更通用的情况，不是均匀采样，即 x 的概率密度不是常数，可以通用的表示为：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205607-vnbr1ms.png" alt="image">​</p>
<p>越多的采样，得到的结果越准。</p>
<p>在 x 上积分，就得在 x 上采样。</p>
<h4 id="Path-Tracing"><a href="#Path-Tracing" class="headerlink" title="Path Tracing"></a><strong>Path Tracing</strong></h4><p>使用 Path Tracing 的原因是 whitted-style ray tracing 有一些不符合真实物理，需要提升这种算法。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205617-c2ktegr.png" alt="image">​</p>
<p>1.whitted-style ray tracing 无法处理磨砂材质的反射，他会认为反射光还朝着镜面反射的方向，而这是不对的：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205622-knaufp2.png" alt="image">​<br />2.whitted-style ray tracing 认为光线打到漫反射到物体就停下来了，但真实的光线还会继续传播</p>
<p>color-bleeding 一个面反射的光到了另一个漫反射的面上，反射面的颜色流到了被反射的面上</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205628-bm6typt.png" alt="image">​</p>
<p>whitted-style ray tracing 是错的，但是渲染方程是对的。渲染方程包含了两个问题：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205638-gfyefht.png" alt="image">​</p>
<p>1.对一个半球求解积分</p>
<p>2.递归的问题</p>
<p>可以用蒙特卡洛积分解渲染方程。<br />考虑一个像素点在直接光照下：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205648-r38amiu.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205652-iip2l0f.png" alt="image">​</p>
<p>简单的做一个均匀的采样</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205658-5yq8i2l.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205702-0ffxy3l.png" alt="image">​</p>
<p>只考虑直接光照：随机选择一个方向从着色点发出一条射线，如果打到了光源，就把光源的贡献算出来，没打到光源的就不算</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205711-d1r1f2z.png" alt="image">​</p>
<p>如果是间接光照，Q 点打到 P 点的光照，就相当于 P 点有一个相机看向 Q 点，在 Q 点算出来的直接光照。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205715-8dbw019.png" alt="image">​</p>
<p>这样可以写出一个递归的算法：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205720-wx6na2p.png" alt="image">​</p>
<p>但这样会有一些问题<br />1.光线的弹射数量会爆炸</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205724-i7iaqsi.png" alt="image">​</p>
<p>N&#x3D;1，弹射的数量才不会爆炸。所以，每次只选择一个方向进行采样，这个就叫做路径追踪：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205731-qxnsgdr.png" alt="image">​</p>
<p>每个像素会有 n 条路径，把 n 条路径的着色结果加起来求平均：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205735-6m6z6ga.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205739-lfzqw6u.png" alt="image">​</p>
<p>2.递归不会停下来</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205744-7h52x56.png" alt="image">​</p>
<p>如果限制弹射次数，又会有能量损失。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205749-z4fnpg5.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205754-chsottt.png" alt="image">​​</p>
<p>于是引入了俄罗斯轮盘赌，以一定的概率决定是不是要停止追踪</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205801-6chp5iw.png" alt="image">​</p>
<p>最终期望的结果就是正确的结果：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205805-03knfxn.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205809-9y2hisg.png" alt="image">​</p>
<p>现在可以得到正确的结果，但不够高效：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205813-hnjhhaa.png" alt="image">​</p>
<p>光源小的情况下，很多 ray 会被浪费：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205817-u9fk3ck.png" alt="image">​</p>
<p>因此我们考虑对光源采样，从光源随机打出一条射线到着色点。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205822-f9m6prp.png" alt="image">​<br />但前面提过蒙特卡洛在 x 上采样就得在 x 上积分，但是渲染方程是对立体角积分，但采样是在光源上采样。</p>
<p>因此，需要把渲染方程写成对光源积分的形式。</p>
<p>先找到 dA 和 dω 的关系：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205827-c82ijcq.png" alt="image">​</p>
<p>均匀地对光源采样：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205831-kbeuy6l.png" alt="image">​</p>
<p>最后把这个光照分为两部分：光源直接照射的部分和其他反射的部分</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205835-ucrghfd.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205843-1o6qtbp.png" alt="image">​</p>
<p>还有一个问题，需要计算光源被挡住的情况：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205848-1f26j0x.png" alt="image">​</p>
<p>比较过去和现代的 raytracing<br />过去特指 whitted-style ray tracing，现在是指光线传播问题的一些解决方法的大集合：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205856-2ebebql.png" alt="image">​</p>
<p>还有一些没提到的问题：</p>
<p>怎么对半球均匀采样</p>
<p>怎么选择采样的 pdf（重要采样）</p>
<p>怎么生成真正均匀的随机数</p>
<p>能不能把光源采样和半球采样结合起来</p>
<p>把经过像素的每条光线的采样结果做平均时是怎么做平均，是否需要加权</p>
<p>算出来的 radiance 是怎么转换为颜色的</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205907-g9han7u.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205912-hurhd9o.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205924-czqjir5.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十四章：Ray tracing2 加速结构、辐射度量学</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9ARay%20tracing2%20%E5%8A%A0%E9%80%9F%E7%BB%93%E6%9E%84%E3%80%81%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/</url>
    <content><![CDATA[<p>Ray Tracing 2</p>
<ul>
<li>加速结构</li>
<li>辐射度量学</li>
</ul>
<p>题外话：</p>
<p>GTC（GPU Technology Conference）：</p>
<ul>
<li><p>DLSS（Deep Learning Super Sampling）2.0 <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTYyMTE5OTQ=">https://zhuanlan.zhihu.com/p/116211994<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>光栅化生成一个 1080p 的图，把它拉大成一张 4K 的图，结果不损失太多性能，同时看上去依然清晰</li>
</ul>
</li>
<li><p>RTXGI（全局光照）<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9ydHhnaQ==">https://developer.nvidia.com/rtxgi<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>回顾上节课：</p>
<ul>
<li><p>为什么要做光线追踪</p>
</li>
<li><p>Whitted-style ray tracing（递归的光线追踪，光线弹射到多个地方，在每个交点计算着色和阴影）</p>
</li>
<li><p>光线和物体求交</p>
<ul>
<li>光线和隐式表面求交</li>
<li>光线和三角形求交</li>
</ul>
</li>
<li><p>AABB 包围盒</p>
<ul>
<li>理解包围盒：坐标轴上三对相对的平板</li>
<li>光线和 AABB 盒求交</li>
</ul>
</li>
</ul>
<p>本节课：</p>
<ul>
<li><p>AABB 盒怎么加速光线追踪？</p>
<ul>
<li>均匀的网格（Uniform grids）</li>
<li>空间划分 （spatial partitions）</li>
</ul>
</li>
<li><p>辐射度量学</p>
</li>
</ul>
<h4 id="AABB-加速光线追踪"><a href="#AABB-加速光线追踪" class="headerlink" title="AABB 加速光线追踪"></a>AABB 加速光线追踪</h4><p><strong>均匀的网格：Uniform Spatial Partitions（Grids）</strong></p>
<p>先让光线和盒子求交，再进一步和盒子里的物体求交</p>
<p>预处理：</p>
<p>1.先找到场景里的一个包围盒</p>
<p>2.把盒子分成一堆格子</p>
<p>3.标记与物体表面相交的格子</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204558-karsvo5.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204602-xjyn2a4.png" alt="image">​</p>
<p>怎么判断光线继续往后传播时要和哪个盒子求交，不能每个格子都求一遍。有一个简单的思路是：如果光线往右上传播，就只看当前格子右边和上面的格子，判断光线与哪个格子有交点，再把光线移动一格。光栅化一条线:<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDIxMzY1OA==">https://zhuanlan.zhihu.com/p/20213658<i class="fa fa-external-link-alt"></i></span>。</p>
<p>加速效果：<br />一个格子（格子很稀疏），基本没有加速效果</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204609-qqu5bmx.png" alt="image">​</p>
<p>格子太密，要做很多次光线和格子的求交，效率很低</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204615-miu4wws.png" alt="image">​</p>
<p>需要找一个平衡</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204619-otjwusd.png" alt="image">​</p>
<p>当几何物体在场景中分布比较均匀时，格子加速的效果比较好</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204624-l67m3mz.png" alt="image">​</p>
<p>物体在场景中分布不均匀的时候，加速的效果不好</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204632-ohvjn97.png" alt="image">​</p>
<h4 id="空间划分-Spatial-Partitions"><a href="#空间划分-Spatial-Partitions" class="headerlink" title="空间划分 Spatial Partitions"></a><strong>空间划分 Spatial Partitions</strong></h4><p>三种空间划分的结构：<br />Oct-Tree：8 叉树，把空间分成 8 个小方块，小方块继续分割，当格子里是空的，或物体足够少，就停止分割（平面是 4 叉树，即分成几份和维度有关系）</p>
<p>KD-Tree：2 叉树，每次一个格子只砍一刀（水平竖直沿着坐标轴交替划分，基本保证划分的空间是均匀的）</p>
<p>BSP-Tree：选一个方向砍一刀</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204649-cee1sju.png" alt="image">​</p>
<h5 id="KD-Tree-预处理，建立加速结构"><a href="#KD-Tree-预处理，建立加速结构" class="headerlink" title="KD-Tree 预处理，建立加速结构"></a>KD-Tree 预处理，建立加速结构</h5><p>把空间划分为二叉树：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204658-s0bi29g.png" alt="image">​</p>
<p>数据结构：</p>
<p>中间节点需要存储：</p>
<ul>
<li>当前节点沿着哪个坐标轴划分</li>
<li>划分在哪个位置（不一定划分在中间）</li>
<li>2 个子节点</li>
</ul>
<p>叶子节点需要存储：</p>
<ul>
<li>和格子相交的几何物体</li>
<li>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204705-wgytx09.png" alt="image">​</li>
</ul>
<p>判断光线和当前节点是不是有交点，如果有交点，继续判断和当前节点的子节点是不是有交点，一直到叶子节点，如果光线和叶子节点有交点，就求光线和叶子节点里面所有物体的交点；如果光线和当前节点没有交点就不需要继续往下找。<br />如果是求最近的交点就一边找一边记录最近的。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204714-42teely.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204718-bz5cned.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204722-s8wc8ov.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204726-qsnpo7h.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204736-aedp5yz.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204740-rxxh5k1.png" alt="image">​</p>
<p>KD-Tree 的问题：</p>
<p>1.不好判断几何对象（三角形）和盒子是否有交集</p>
<p>2.1 个对象可能和不同的盒子都有交集，即同一个物体会被多个叶子节点存储</p>
<h5 id="Object-Partitions-Bounding-Volumn-Hierarchy（BVH）"><a href="#Object-Partitions-Bounding-Volumn-Hierarchy（BVH）" class="headerlink" title="Object Partitions &amp; Bounding Volumn Hierarchy（BVH）"></a><strong>Object Partitions &amp; Bounding Volumn Hierarchy（BVH）</strong></h5><p>划分物体：把一个盒子里的三角形分为两部分，把两部分的三角形再重新求包围盒，然后每个包围盒继续划分，直到一个包围盒里包含的节点数够少就停止划分。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204752-vsj137t.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204802-dw9fna8.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204806-e07iour.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204812-1n2czdl.png" alt="image">​</p>
<p>BVH 的好处是：一个物体只可能出现在一个盒子里，且无需求三角形和包围盒的交点，避免了 KD-Tree 的问题。</p>
<p>但 BVH 也有一个问题：BVH 对空间的划分不是很严格的划分开，BoundingBox 可以相交，所以需要在划分几何形体的时候尽量减少重叠。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204818-9pfar63.png" alt="image">​</p>
<p>总结构造 BVH 加速结构的过程：</p>
<p>1.找到一个包围盒</p>
<p>2.递归地把包围盒中的物体拆成两部分</p>
<p>3.重新计算包围盒</p>
<p>4.当包围盒的物体足够少的时候停止递归</p>
<p>5.把物体信息存储在叶子节点里</p>
<p><strong>怎么做节点的划分？</strong></p>
<ul>
<li><p>选一个维度</p>
</li>
<li><p>方式 1：每次选一个最长的轴把节点分成两半，使得节点最后分布比较均匀</p>
</li>
<li><p>方式 2：取中间的三角形的位置把节点分为两半，是的分割后节点的三角形数量差不多，让这个树形结构两边保持平衡（深度小，平均搜索次数小）</p>
<ul>
<li>取中间的三角形涉及到排序：所有三角形取重心，沿一个轴排个序，找到中间的那个三角形。（也可以不用排序找中位数，快速选择算法，可以达到 O(n)的时间复杂度）</li>
</ul>
</li>
<li><p>如果场景是动态的，三角形数量会变化，就需要每次变化都重新算一下 BVH。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204830-voj0qcl.png" alt="image">​</p>
</li>
</ul>
<p>BVH 的数据结构：<br>中间节点存储：</p>
<ul>
<li>包围盒</li>
<li>子节点的指针</li>
</ul>
<p>叶子节点存储：</p>
<ul>
<li>包围盒</li>
<li>实际的物体</li>
<li>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204841-zo7ev8y.png" alt="image">​</li>
</ul>
<p>BVH 算法伪代码：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204847-q8eypig.png" alt="image">​</p>
<p>空间划分和物体划分的区别：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204852-d3um7bh.png" alt="image">​</p>
<p>以上是 Whitted-style 光线追踪的内容。</p>
<h4 id="辐射度量学-Basic-radiometry"><a href="#辐射度量学-Basic-radiometry" class="headerlink" title="辐射度量学 Basic radiometry"></a>辐射度量学 Basic radiometry</h4><p>为什么要学习辐射度量学？</p>
<p>之间的 Blinn-Phong 模型里提到光的强度 I 是怎么得到的，他的物理意义是什么？</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204902-rtdzgu2.png" alt="image">​</p>
<p>Whitted-style 光线追踪给的结果是正确的吗？</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204923-ev1qs1a.png" alt="image">​</p>
<p>辐射度量学给了一种精准定义光照的物理量的方法。</p>
<p>辐射度量学学习的内容：<br>为如何描述光照定义了一系列的方法和单位</p>
<p>给光定义了各种空间中的属性（仍然是基于几何光学，认为光线沿直线传播）：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204928-25ee893.png" alt="image">​</p>
<ul>
<li>Radiant flux，intensity，irradiance，radiance</li>
</ul>
<p>Radiant Energy and Flux</p>
<p>Radiant energy 是电磁辐射的能量，单位是焦耳，用符号 Q 表示。</p>
<p>Radiant Flux 是单位时间的能量。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204935-zhh77mo.png" alt="image">​</p>
<p>另一种理解：单位时间通过感光平面的光子的数量</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204941-3lo9p1g.png" alt="image">​</p>
<p>光源辐射的能量：radiant Intensity，定义了方向性和能量相关的概念</p>
<p>物体表面接受到了多少能量：Irradiance</p>
<p>光线传播中的能量怎么度量：Radiance</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204947-ch8k18p.png" alt="image">​</p>
<p><strong>Radiant Intensity</strong></p>
<p>单位立体角上点光源辐射出的单位能量</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204952-czaovps.png" alt="image">​</p>
<p>立体角：<br>角度：弧长&#x2F;半径</p>
<p>立体角：角度在三维的延伸。锥体对应的面积&#x2F;求面的面积。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817204957-l8s8bw3.png" alt="image">​</p>
<p>单位立体角（微分立体角）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205002-ikor5vv.png" alt="image">​</p>
<p>对单位立体角做积分可以得到整个球面</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205007-7f67wjp.png" alt="image">​</p>
<p>在辐射度量里面通常用 ω 表示方向，ω 可以用 θ 和 φ 来定义位置，并通过 sinθdθdφ 算出单位立体角。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205012-k9khbxq.png" alt="image">​</p>
<p>对一个点光源，radiant intensity 是单位立体角的能量，把所有方向上的单位立体角的 intensity 积分，就可以得到它的 power，反之任何一个方向的 Intensity 就是 power&#x2F;4π。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205018-foe19s0.png" alt="image">​</p>
<p>小知识：现代 LED 灯上标注的瓦数不是真实的，而是对应于白炽灯的瓦数，LED 实际瓦数更低。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230817205022-d5s39qt.png" alt="image">​</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第十章：纹理应用、几何</title>
    <url>/blog/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E7%BA%B9%E7%90%86%E5%BA%94%E7%94%A8%E3%80%81%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<p><br />Shading 1&amp;2</p>
<ul>
<li>Blinn-Phong 反射模型</li>
<li>着色模型&#x2F;着色频率</li>
<li>图形管线</li>
<li>纹理映射</li>
</ul>
<p>Shading 3</p>
<ul>
<li><p>重心坐标系</p>
</li>
<li><p>纹理反走样（MIPMAP）</p>
<ul>
<li>纹理太小插值，纹理太大 MIPMAP 范围查询</li>
</ul>
</li>
<li><p>纹理应用</p>
</li>
</ul>
<h3 id="纹理应用"><a href="#纹理应用" class="headerlink" title="纹理应用"></a><strong>纹理应用</strong></h3><p>纹理：一块内存，可以做不同的范围查询（过滤）<br><strong>环境光照（环境光映射）</strong></p>
<p>把任何一个方向来的光都记录下来，用纹理描述环境光，用环境光渲染其他物体。假设环境光源都是来自无限远处，不考虑位置。<br>犹他茶壶</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212623-5xuthiv.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212629-qk6miqf.png" alt="image">​​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212633-7v6qdx7.png" alt="image">​</p>
<p>环境光可以记录在球面上，放在不同的方向上记录一个点，再把图展开（就像世界地图）</p>
<p>但这样会在顶部和底部出现扭曲</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212638-eo04j2k.png" alt="image">​</p>
<p>此时可以假设球外面有一个包围盒，把球心到球表面的连线延长到立方体上，把环境光信息记录在一个立方体上对应的 6 个面上，再把立方体展开：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212643-fyppq96.png" alt="image">​</p>
<p>6 个面基本是均匀的，所以不会发生扭曲，但是需要计算方向和面的对应关系。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212648-ecbhss9.png" alt="image">​</p>
<p><strong>凹凸贴图（法线贴图）</strong><br />纹理不只是可以表示颜色，也可以表示高度。</p>
<p>可以在不把几何形体变复杂的情况下，定义任意一个点的相对高度，通过相对高度计算出一个假的法线，产生着色上的明暗对比。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212704-suhh84z.png" alt="image">​</p>
<p>对像素做扰动，重新计算法线方向</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212710-s5urew5.png" alt="image">​</p>
<p>用相邻两点的高度差除长度，得到切线，通过切线旋转 90 度再算法线</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212716-3aznrqr.png" alt="image">​</p>
<p>三维情况下需要计算两个方向的切线（假设局部坐标系的法线是（0，0，1））：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212722-c4makw8.png" alt="image">​</p>
<h3 id="位移贴图"><a href="#位移贴图" class="headerlink" title="位移贴图"></a><strong>位移贴图</strong></h3><p>凹凸贴图没有真正改变顶点的高度，在边缘和自己的几何会产生自己的阴影的情况下表现失真，这个时候用位移贴图，真正改变三角形顶点的高度。问题就是三角形需要定义得足够细，能跟上纹理定义的频率。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212729-yp6rd9g.png" alt="image">​</p>
<p>DirectX（动态曲面细分） 先应用一个粗糙一点的模型，应用过程中检测是否满足要求，根据需要把三角形拆得更细做位移贴图。</p>
<h4 id="三维过程噪声"><a href="#三维过程噪声" class="headerlink" title="三维过程噪声"></a><strong>三维过程噪声</strong></h4><p>不真正生成纹理图，定义一个三维噪声函数，计算空间中每一个点计算出噪声的值，再通过一些计算得到纹理。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212735-avq67ya.png" alt="image">​</p>
<h4 id="预计算阴影"><a href="#预计算阴影" class="headerlink" title="预计算阴影"></a><strong>预计算阴影</strong></h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212746-sjxdb4h.png" alt="image">​</p>
<p>先计算环境光遮蔽写进纹理图，再把纹理图乘以着色的结果，得到阴影。</p>
<h4 id="三维体积渲染"><a href="#三维体积渲染" class="headerlink" title="三维体积渲染"></a><strong>三维体积渲染</strong></h4><p>医学成像，核磁共振扫描人体，得到一个密度的三维纹理。</p>
<h3 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h3><p>曲线、光滑曲面、齿轮、布料（透明的、纤维）、水的表面形状、城市（大量几何形状）、动物毛发、细胞等等怎么用几何表示。</p>
<p>隐式表示</p>
<p>满足特定关系的一些点表示一个几何，比如一个球体。</p>
<p>f(x,y,z) &#x3D; 0;</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212759-2peym2g.png" alt="image">​</p>
<p>问题：<br>不好直接看出来表示的几何是什么形状</p>
<p>好处：<br>可以很快得判断一个点在不在这个几何面上（在几何体内还是外）</p>
<p>显式表示</p>
<p>1.把几何上的面的点直接表示出来</p>
<p>2.通过参数映射定义表面</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212806-2gltnzg.png" alt="image">​</p>
<p>好处：<br>很容易找到形状，把(u,v)都算一遍</p>
<p>问题：<br>不能很快判断一个点是不是在表面上（在几何体内部还是外部）</p>
<p>隐式表示方法：</p>
<p>代数曲面：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212816-rlxf3yh.png" alt="image">​</p>
<p>可以不只用代数方式来表达：</p>
<p>Constructive Solid Geometry（构造立体几何法，CSG）</p>
<p>用基础的结构体做一些简单运算形成复杂的几何：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212822-c479i43.png" alt="image">​</p>
<h4 id="Distance-Function（距离函数）"><a href="#Distance-Function（距离函数）" class="headerlink" title="Distance Function（距离函数）"></a>Distance Function（距离函数）</h4><p>定义任意一个点到这个几何体表面的最近距离</p>
<p>如果距离是正的，说明这个点在物体外部，距离是负的则在物体内部</p>
<p>对两个几何做融合（blend）得到 A→B 从左到右运动的一个中间状态。blend 两个几何的距离函数，其实就是 blend 两个边界。可以通过 blend 出来的结果距离函数，还原出边界（SDF 为 0）。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212828-rbdw2xm.png" alt="image">​</p>
<p>距离函数也可以不写成解析表达式，比如水平集</p>
<p>等高线也是类似</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212834-av4rckb.png" alt="image">​</p>
<p>水平集也可以定义在三维上。比如计算三维中 f(x)等于某一个值的所有点，可以得到一个三维空间中的一个表面。<br />医学扫描</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212840-rs0fg0z.png" alt="image">​</p>
<p>水滴融合</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212844-gslgf7o.png" alt="image">​</p>
<h4 id="分形"><a href="#分形" class="headerlink" title="分形"></a><strong>分形</strong></h4><p>自重复几何</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816212849-ilbpjwt.png" alt="image">​</p>
<p>总结：</p>
<p>优点：<br>隐式函数表示起来比较容易，对存储也比较友好，比较容易判断是否在物体表面。用隐式函数表示的表面很容易对光线求交。严格地表示简单形体，很容易给出准确描述。很适合描述拓扑结构。<br>缺点：<br>对复杂的模型很难用一个规则的函数来描述。</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>第四章：三维变换</title>
    <url>/blog/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E4%B8%89%E7%BB%B4%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<p>补充知识：<br />旋转矩阵的逆等于它的转置，如果一个矩阵的逆等于它的转置，数学上称为正交矩阵</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204734-zbbfcch.png" alt="image">​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204738-oeybft0.png" alt="image">​</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204743-ranruz2.png" alt="image">​​</p>
<h3 id="本章知识："><a href="#本章知识：" class="headerlink" title="本章知识："></a>本章知识：</h3><ul>
<li><p>3D 变换</p>
</li>
<li><p>viewing（观测）变换</p>
<ul>
<li><p>View（视图）&#x2F;Camera transformation</p>
</li>
<li><p>Projection（投影） tranformation</p>
<ul>
<li>Orthographic（正交）projection</li>
<li>Perspective（透视）projection</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="三维变换"><a href="#三维变换" class="headerlink" title="三维变换"></a>三维变换</h4><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204824-pewehrj.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204831-k0kbmdg.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204838-9w7o32h.png" alt="image">​​​</p>
<p><strong>绕坐标轴旋转</strong></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204848-uxkikg4.png" alt="image">​</p>
<p>x 和 z 的旋转矩阵和 y 的旋转矩阵是互逆的。<br>循环对称：x 叉乘 y 得到 z，y 叉乘 z 得到 x，但是得到 y 是要 z 叉乘 x 而不是 x 叉乘 z。</p>
<h5 id="一般旋转"><a href="#一般旋转" class="headerlink" title="一般旋转"></a><strong>一般旋转</strong></h5><p>用简单的旋转组合形成复杂的旋转</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204923-1ahrojl.png" alt="image">​</p>
<p>绕任意轴的旋转都可以转换为绕 x、y、z 轴的旋转<br />罗德里格斯旋转公式（Rodrigues‘ Rotation Formula）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816204933-6jo5ab6.png" alt="image"></p>
<p>其中 n 是任意旋转轴（可以不经过原点），α 是旋转角</p>
<p>绕任意轴旋转：先平移，让旋转轴位于原点，再旋转，再平移回来。<br>四元数：解决插值问题。比如二维旋转 20 度的矩阵和旋转 30 度的矩阵相加后除以 2，不等于旋转 25 度的旋转矩阵，需要用到四元数做旋转和旋转间的插值。</p>
<h4 id="Viewing-Transform"><a href="#Viewing-Transform" class="headerlink" title="Viewing Transform"></a>Viewing Transform</h4><ul>
<li><p>什么是视图变换</p>
</li>
<li><p>拍照片（MVP 变换）</p>
<ul>
<li>找一个好的位置放置模型（model transformation）</li>
<li>找一个好的角度（view tansformation）</li>
<li>茄子！（projection transformation）</li>
</ul>
</li>
</ul>
<h5 id="模型视图变换（Model-viewing-transformation）"><a href="#模型视图变换（Model-viewing-transformation）" class="headerlink" title="模型视图变换（Model viewing transformation）"></a><strong>模型视图变换（Model viewing transformation）</strong></h5><p>放在哪，往哪看，相机的向上方向（相机怎么摆）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205023-wd34p5r.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205031-n0jcxen.png" alt="image">​​</p>
<p>约定俗成：相机放到（0，0，0）位置，向上摆放，沿着-Z 方向看</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205040-9ncss7e.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205053-62krasy.png" alt="image">​​</p>
<p>直接旋转角度到坐标轴不好处理，但把坐标轴旋转到某个方向比较容易，所以可以先旋转坐标轴，得到旋转矩阵，再求它的逆。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205103-vjn5cf9.png" alt="image">​</p>
<p>正交矩阵的逆就是它的转置。<br>先把中心移动到原点再做旋转的到的变换就是视图变换。相机通过这种变换变换到一个固定位置，其他物体也做一样的变换，保持和相机的相对位置不变。<br>总结：</p>
<ul>
<li><p>任何时候相机和物体做一样的变换</p>
</li>
<li><p>只要相机能移动到规定的位置，那其他物体也会落到需要的位置上</p>
</li>
</ul>
<p>所以模型视图经常一起变换，被称为模型视图变换。</p>
<h5 id="投影变换（Projection-TransFormation）"><a href="#投影变换（Projection-TransFormation）" class="headerlink" title="投影变换（Projection TransFormation）"></a><strong>投影变换（Projection TransFormation）</strong></h5><p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205139-95pslji.png" alt="image">​</p>
<p>正交投影不会近大远小（鸽子为什么那么大）</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205147-ritsdvy.png" alt="image">​</p>
<p>透视投影就是把相机放在空间的一个点，往一个方向连出一个四棱锥，把这个四棱锥某一个深度到另一个深度之间的区域（frustum）都显示出来，显示到近处的平面上<br>正交投影假设相机离得无限远，这个时候近和远基本是一样的大小</p>
<h6 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a><strong>正交投影</strong></h6><p>简单做法：</p>
<p>相机移到原点，把 z 轴扔掉（怎么区分物体前后后面再说），所有东西都在(x,y)上，然后把范围约束到[-1，1]² 这样的一个矩形里（约定俗成），得到正交投影的结果。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205159-gzsq0g7.png" alt="image">​</p>
<p>正式的做法：</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205210-oc4fded.png" alt="image">​</p>
<p>定义一个立方体，映射到一个正则（规范、标准）立方体上。先做平移，再做缩放。</p>
<p>这里用的是右手系，z 方向向外，面离我们更远则 z 值更小，离我们更近则 z 值越大，所以 f 小于 n。所以有一些图形学的 API（比如 OpenGL 从透视空间到裁剪空间，webgl 也是类似）会用左手系，让 z 方向朝里。</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205218-zzb2df2.png" alt="image">​</p>
<h6 id="透视投影近大远小"><a href="#透视投影近大远小" class="headerlink" title="透视投影近大远小"></a><strong>透视投影</strong>近大远小</h6><p>平行线不再平行</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205234-fgcx5g3.png" alt="image">​</p>
<p>先把锥体向内挤压成一个立方体，约定近面和远面的 z 轴不变，远面中心点不变，近面大小不变（从透视到正交）。</p>
<p>再做正交投影</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205248-ba0qaqy.png" alt="image">​</p>
<p>找到远面的 y 和近面的 y’之间的比例关系</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205257-yb7ie5l.png" alt="image">​</p>
<p>齐次坐标里，点矩阵乘一个数字和以前表示的含义一样</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205305-qcme12h.png" alt="image"></p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205320-y3vu5im.png" alt="image">​​</p>
<p>近平面的所有点不改变，可以计算出转换矩阵的前两个数字</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205330-nmelurd.png" alt="image">​</p>
<p>远平面中心点不变，结合前面近平面的特征，可以计算出剩下两个数字</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205337-1370gm2.png" alt="image">​</p>
<p>最终得到透视到正交的转换矩阵</p>
<p>​<img data-src="/blog/./images/%E5%9B%BE%E5%BD%A2%E5%AD%A6/image-20230816205343-8w6owzr.png" alt="image">​</p>
<h4 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h4><p>在近平面和远平面之间的中心点被挤压时，会被推向近平面还是远平面？<br>对原矩阵做转换后，得到的结果的第四行的值为(0 0 1 0) 和 (x y z 1)相乘后得到：z；<br>计算 z 转换后的值为（f&lt;z&lt;n）值：z(n+f)-nf，需要除以 z 把最后一位变为 1 后再和原来的 z 比较</p>
<p>求解：(z(n+f) - nf)&#x2F;z 和 z 的关系，转换为抛物线求解，y &#x3D; z(n+f)- nf - z² , z 在 n 和 f 之间变化时，有两个解 n 和 f，且抛物线开口向下，即当 z 位于 n 和 f 之间时，其变换后的 z 的绝对值始终大于原来的 z 的绝对值。</p>
<p>‍</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
  <entry>
    <title>网络测速</title>
    <url>/blog/%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F/</url>
    <content><![CDATA[<h2 id="前端如何测试网络的速度？"><a href="#前端如何测试网络的速度？" class="headerlink" title="前端如何测试网络的速度？"></a>前端如何测试网络的速度？</h2><p>B 站视频播放时有一个自动根据网络环境调整分辨率的功能，想了解如何测速<br><img data-src="/blog/./%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F/b.png" alt="b站"></p>
<p>然后我找了下面的方法测速</p>
<h3 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h3><p>利用 XMLHttpRequest 请求返回的 Content-length，和请求所需时间求得下载速度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSpeed</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="variable language_">window</span>.<span class="property">performance</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url)</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = (<span class="variable language_">window</span>.<span class="property">performance</span>.<span class="title function_">now</span>() - start) / <span class="number">1000</span></span><br><span class="line">        <span class="keyword">const</span> size = xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&quot;Content-Length&quot;</span>) / <span class="number">1024</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time, size)</span><br><span class="line">        <span class="title function_">resolve</span>(size / time)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getSpeed</span>(<span class="string">&quot;./worker.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">speed</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(speed))</span><br></pre></td></tr></table></figure>

<p>请求我本地的文件测得速度：<br><img data-src="/blog/./%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F/speed.png" alt="speed"></p>
<h3 id="Image-对象-onload"><a href="#Image-对象-onload" class="headerlink" title="Image 对象 onload"></a>Image 对象 onload</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSpeed</span> = (<span class="params">url, fileSize</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="variable language_">window</span>.<span class="property">performance</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    img.<span class="property">src</span> = url</span><br><span class="line">    img.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> time = (<span class="variable language_">window</span>.<span class="property">performance</span>.<span class="title function_">now</span>() - start) / <span class="number">1000</span></span><br><span class="line">      <span class="title function_">resolve</span>(fileSize / time)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是要注意如果请求服务器的文件，建立请求也需要消耗时间，最好是多次请求取平均值。</p>
<h3 id="还有一个-downlink"><a href="#还有一个-downlink" class="headerlink" title="还有一个 downlink"></a>还有一个 downlink</h3><p><img data-src="/blog/./%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F/downlink.png" alt="downlink"><br>downlink 的单位是 mbps, 所以要转化成 kb&#x2F;s</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>虚假的洗牌算法</title>
    <url>/blog/%E8%99%9A%E5%81%87%E7%9A%84%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="虚假的洗牌算法"><a href="#虚假的洗牌算法" class="headerlink" title="虚假的洗牌算法"></a>虚假的洗牌算法</h2><p>最常见的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shuffle</span> = (<span class="params">list</span>) =&gt; list.<span class="title function_">sort</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<p>可这并不合理，对于这个数组：[1,2,3,4,5]，每个数字出现在每个位置的概率应该是相同的。然而使用以上算法，1 出现在 index&#x3D;4 位置的概率 与 4 出现在 index&#x3D;4 的概率并不相同。</p>
<h2 id="真正的洗牌算法"><a href="#真正的洗牌算法" class="headerlink" title="真正的洗牌算法"></a>真正的洗牌算法</h2><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyJUUyJTgwJTkzWWF0ZXNfc2h1ZmZsZQ==">Fisher–Yates shuffle<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = <span class="title class_">Array</span>(<span class="number">54</span>)</span><br><span class="line">  .<span class="title function_">fill</span>(<span class="literal">undefined</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> index)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 洗牌算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FYSufffle</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> randNums = <span class="title class_">Array</span>.<span class="title function_">from</span>(nums)</span><br><span class="line">  <span class="keyword">let</span> len = nums.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rand = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * len)</span><br><span class="line">    len--</span><br><span class="line">    <span class="comment">// 交换</span></span><br><span class="line">    ;[randNums[rand], randNums[len]] = [randNums[len], randNums[rand]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> randNums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">FYSufffle</span>(nums))</span><br></pre></td></tr></table></figure>

<p>以上。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>包体积超限问题</title>
    <url>/blog/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8C%85%E4%BD%93%E7%A7%AF%E8%B6%85%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>某日发布节点后，监控平台发现包体积超限，增长很多，于是拉了各个业务方进行排查</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>我这边用 webpack-bundle-analyzer 发现增长的体积和懒加载的代码体积刚好对得上，怀疑是不是懒加载代码加载的时间提前了，代码有循环引用之类的，导致应该懒加载的代码，提前加载进来了。但是逐一查看改动代码，没有发现循环引用的情况。</p>
<p>又看了下监控的数据，发现统计的数据是不稳定的，在这之前也有部分数据超限，感觉统计代码的脚本不是很稳定，于是又去看统计代码体积的脚本。<br>看了代码，发现统计脚本是在插件加载完成后使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1BlcmZvcm1hbmNlL2dldEVudHJpZXNCeVR5cGU=">performance.getEntriesByType<i class="fa fa-external-link-alt"></i></span> 来获取所有加载的 script 资源的体积数据。</p>
<p>又想到前两天上线的一个 <a href="/blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%9B%BE%E7%89%87%E7%9B%91%E6%8E%A7/" title="如何实现全局图片监控">如何实现全局图片监控</a> 的功能中，有一行代码是改动了 performance 的缓存空间大小</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">setResourceTimingBufferSize</span>(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<p>于是怀疑是不是这个改动影响了统计代码体积的脚本，于是把这段代码删掉，重新发布，发现包体积恢复’正常’。<br>把这个size改为一个小值，跑一下脚本，发现统计的数据更少了，说明这个改动确实影响了统计代码体积的脚本。</p>
<p>看了下这个 setResourceTimingBufferSize，这个接口用于设置浏览器资源计时缓冲区的大小。<br>这个缓冲区用于存储页面加载过程中各种资源的性能数据，例如加载时间、传输时间等。这些数据可以通过 Performance 接口进行访问和分析。</p>
<p>当缓冲区达到设定的最大大小时，新的资源计时数据会替换掉最早的数据。这意味着，如果缓冲区已满，最早进入缓冲区的数据会被新的数据覆盖。</p>
<p>这个值不手动设置默认是 250， 又手动看了下打开页面后的资源大概多少，发现数值在 400 左右，所以初始的值 250 统计的值可能是偏小的，部分数据被丢掉了，数据不准确。</p>
<p>把这个问题反馈上去，调整统计体积脚本的代码，设置了一个较大值去统计所有初始加载的资源，包括部分 prefetch 的懒加载代码，以调整后的资源大小作为基线去评估后面的包体积增长情况。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次排查总的来说还是比较幸运的，还是需要从代码和监控数据入手，大胆假设，小心求证。</p>
<ol>
<li>webpack-boundle-analyzer 可以用来查看打包后的体积分布情况</li>
<li>performance.getEntriesByType 可以用来获取所有加载的资源的体积数据</li>
<li>performance.setResourceTimingBufferSize 可以用来设置 performance 的缓存空间大小，这个改动可能会影响 performance.getEntriesByType 的结果</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>设计一个拦截器</title>
    <url>/blog/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<p>拦截器是一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">do</span> sth...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它有两个参数。第一个参数是一个上下文，这个上下文在多个拦截切面中是共享的。第二个参数是一个 next 函数，调用它会进入下一个拦截切面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">aspects</span> = []; <span class="comment">// 用于存储拦截切面</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params"><span class="comment">/* async */</span> functor</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册拦截切面</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">aspects</span>.<span class="title function_">push</span>(functor);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">run</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行注册的拦截切面</span></span><br><span class="line">    <span class="keyword">const</span> aspects = <span class="variable language_">this</span>.<span class="property">aspects</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将注册的拦截切面包装成一个洋葱模型</span></span><br><span class="line">    <span class="keyword">const</span> proc = aspects.<span class="title function_">reduceRight</span>(</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">b</span>(context, a);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">proc</span>(); <span class="comment">//从外到里执行这个洋葱模型</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(ex.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Interceptor</span>;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inter = <span class="keyword">new</span> <span class="title class_">Interceptor</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task = <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`task <span class="subst">$&#123;id&#125;</span> begin`</span>);</span><br><span class="line">    ctx.<span class="property">count</span>++;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count: <span class="subst">$&#123;ctx.count&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`task <span class="subst">$&#123;id&#125;</span> end`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将多个任务以拦截切面的方式注册到拦截器中</span></span><br><span class="line">inter.<span class="title function_">use</span>(<span class="title function_">task</span>(<span class="number">0</span>));</span><br><span class="line">inter.<span class="title function_">use</span>(<span class="title function_">task</span>(<span class="number">1</span>));</span><br><span class="line">inter.<span class="title function_">use</span>(<span class="title function_">task</span>(<span class="number">2</span>));</span><br><span class="line">inter.<span class="title function_">use</span>(<span class="title function_">task</span>(<span class="number">3</span>));</span><br><span class="line">inter.<span class="title function_">use</span>(<span class="title function_">task</span>(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从外到里依次执行拦截切面</span></span><br><span class="line">inter.<span class="title function_">run</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>使用拦截器的好处：控制业务流程，复用模块功能（拦截切面可以被共用，避免代码冗余）</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>逆天!纯CSS实现获取窗口大小</title>
    <url>/blog/%E9%80%86%E5%A4%A9!%E7%BA%AFCSS%E5%AE%9E%E7%8E%B0%E8%8E%B7%E5%8F%96%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<p>先看看效果</p>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113570696204148&bvid=BV1JgzEY4Em6&cid=27106543898&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<p>看看代码是怎么样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@property</span> --vw &#123;</span></span><br><span class="line"><span class="language-css">        syntax: <span class="string">&quot;&lt;length&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        inherits: true;</span></span><br><span class="line"><span class="language-css">        initial-value: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@property</span> --vh &#123;</span></span><br><span class="line"><span class="language-css">        syntax: <span class="string">&quot;&lt;length&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        inherits: true;</span></span><br><span class="line"><span class="language-css">        initial-value: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--w</span>: <span class="built_in">tan</span>(<span class="built_in">atan2</span>(<span class="built_in">var</span>(--vw), <span class="number">1px</span>));</span></span><br><span class="line"><span class="language-css">        <span class="attr">--h</span>: <span class="built_in">tan</span>(<span class="built_in">atan2</span>(<span class="built_in">var</span>(--vh), <span class="number">1px</span>));</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">counter-reset</span>: w <span class="built_in">var</span>(--w) h <span class="built_in">var</span>(--h);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="built_in">counter</span>(w) <span class="string">&quot;X&quot;</span> <span class="built_in">counter</span>(h);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: fit-content;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">inset</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就这么几行代码</p>
<p>我们来分析一下</p>
<p>首先，通过伪元素实现内容的水平垂直居中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: “width X height”;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: auto;</span><br><span class="line">        <span class="attribute">height</span>: fit-content;</span><br><span class="line">        <span class="attribute">width</span>: fit-content;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">inset</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后定义了两个 CSS 的自定义属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> --vw &#123;</span><br><span class="line">        syntax: <span class="string">&quot;&lt;length&gt;&quot;</span>;</span><br><span class="line">        inherits: true;</span><br><span class="line">        initial-value: <span class="number">100vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> --vh &#123;</span><br><span class="line">        syntax: <span class="string">&quot;&lt;length&gt;&quot;</span>;</span><br><span class="line">        inherits: true;</span><br><span class="line">        initial-value: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详细的解释：</p>
<ol>
<li><p>​ <strong>​<code>@property --vw &#123; ... &#125;</code>​</strong> ​:</p>
<ul>
<li>这行代码定义了一个新的 CSS 自定义属性 <code>--vw</code>​。<code>@property</code>​ 是一个 CSS at-rule，用于定义自定义属性。在这个例子中，<code>--vw</code>​ 是一个自定义属性，用于表示视口宽度的百分比。</li>
</ul>
</li>
<li><p>​<strong>​<code>syntax: &quot;&lt;length&gt;&quot;;</code>​</strong> ​:</p>
<ul>
<li>这行代码定义了 <code>--vw</code>​ 的语法类型。<code>&lt;length&gt;</code>​ 表示这个自定义属性的值是一个长度值，例如 <code>px</code>​, <code>em</code>​, <code>rem</code>​, <code>vw</code>​, <code>vh</code>​ 等。</li>
</ul>
</li>
<li><p>​<strong>​<code>inherits: true;</code>​</strong> ​:</p>
<ul>
<li>这行代码定义了 <code>--vw</code>​ 是否可以继承。<code>true</code>​ 表示这个自定义属性可以被子元素继承。</li>
</ul>
</li>
<li><p>​<strong>​<code>initial-value: 100vw;</code>​</strong> ​:</p>
<ul>
<li>这行代码定义了 <code>--vw</code>​ 的初始值。<code>100vw</code>​ 表示视口宽度的 100%，即整个视口的宽度。</li>
</ul>
</li>
</ol>
<p>这几行代码定义了一个名为 <code>--vw</code>​ 的 CSS 自定义属性，用于表示视口宽度的百分比。这个属性可以被子元素继承，并且其初始值是视口宽度的 100%。</p>
<p>之后，关键的来了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">        <span class="attr">--w</span>: <span class="built_in">tan</span>(<span class="built_in">atan2</span>(<span class="built_in">var</span>(--vw), <span class="number">1px</span>));</span><br><span class="line">        <span class="attr">--h</span>: <span class="built_in">tan</span>(<span class="built_in">atan2</span>(<span class="built_in">var</span>(--vh), <span class="number">1px</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先我们知道三角形一个角的对边&#x2F;临边&#x3D; <code>tanA</code>​，用反三角函数可以求得 <code>A</code>​ 的角度。也就是说 <code>atan2(var(--vw), 1px)</code>​ 这里求得的是（浏览器宽度&#x2F;1px 高度）所对应的那个角的角度值，然后再对这个角度求 <code>tan</code>​ 值，即可得出浏览器的当前宽度。这里求得的值是带 <code>px</code>​ 单位的，浏览器会自动转换将原来的 <code>vw </code>​ 转为 <code>px</code>​。</p>
<p>接下来就需要去掉<code>px</code>​把这个数值写入页面，利用的是 css <code>counter</code>​ 方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 定义 w 为 <span class="selector-tag">var</span>(<span class="attr">--w</span>) 的名字</span><br><span class="line"><span class="attribute">counter-reset</span>: w <span class="built_in">var</span>(--w) h <span class="built_in">var</span>(--h);</span><br><span class="line">// <span class="number">2</span>. 利用 counter(w) 拿到值</span><br><span class="line"><span class="attribute">content</span>: <span class="built_in">counter</span>(w) <span class="string">&quot;X&quot;</span> <span class="built_in">counter</span>(h);</span><br></pre></td></tr></table></figure>

<p>以上</p>
]]></content>
  </entry>
  <entry>
    <title>高性能的JavaScript</title>
    <url>/blog/%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84JavaScript/</url>
    <content><![CDATA[<h3 id="加载和执行"><a href="#加载和执行" class="headerlink" title="加载和执行"></a>加载和执行</h3><p>每个<code>&lt;script&gt;</code>标签初始化下载都会阻塞页面渲染，所以减少页面的<code>&lt;script&gt;</code>标签数量可以起到优化作用，内嵌脚本外链脚本通用,另外HTTP会带来的额外的性能消耗，下载一个100KB的文件比下载4个25KB的文件更快，所以可以通过进行脚本的合并去1、减少<code>&lt;script&gt;</code>标签数量 2、减少HTTP请求带来的消耗（针对外链脚本）。</p>
<h3 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h3><p>1.字面量：代表自身，无特定位置，包括：字符串、数字、布尔值、对象、数组、函数、正则表达式及null和undefined<br>2.本地变量：var&#x2F;let&#x2F;const关键字定义的数据存储单元<br>3.数组元素：存储在JavaScript数组对象内部，以数字为索引，下标从0开始<br>4.对象成员：存储在JavaScript对象内部，以字符串为索引<br>从一个字面量和本地变量中存取数据时的性能消耗极小（可忽略），数组和对象则稍高一些。<br>建议：尽量使用字面量和局部变量（局部变量在方法运行过后会自行释放，用完手动置为null或undefined也行），减少使用对象和数组,比如某作用域内的值呗函数引用一次以上，就可以把它存储到局部变量中来使用</p>
<h3 id="算法及流程控制"><a href="#算法及流程控制" class="headerlink" title="算法及流程控制"></a>算法及流程控制</h3><ol>
<li><p>for in循环可以枚举任何对象的<strong>属性名</strong>（不是值），但是for in比其他三个循环<strong>明显要慢</strong>，所以除非要迭代一个属性数量未知的对象，否则避免使用for in循环，如果遍历一个属性数量已知属性列表，其他循环比for in快</p>
</li>
<li><p>假设以上四种循环类型性能一样，可以从两个方面去优化循环的性能：<br> (当循环体复杂度为X时，优化方案优先减少循环体的复杂度，循环体复杂度大于X时，优化方案优先减少迭代次数 )<br> 1.每次迭代的事务（减少循环体的复杂度）<br> 2.迭代的次数（减少循环的次数，百度‘达夫设备’），可以这么理解，达夫设备就是拆解循环，比如遍历一个长度为100的数组，普通情况下循环体执行100次，达夫设备的思想是把100次拆为每次循环执行多次（n表示）100对n取余，执行取余次数，再执行100除以n（下舍）次循环，这个循环体执行n次普通循环体的操作<br> 达夫设备代码：(这个8就是我说的n)</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> it = <span class="title class_">Math</span>.<span class="title function_">floor</span>(a.<span class="property">length</span> / <span class="number">4</span>),st = a.<span class="property">length</span> % <span class="number">4</span>,i = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(st) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>,a[i++]);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,a[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  st = <span class="number">0</span></span><br><span class="line">&#125;<span class="keyword">while</span>(--it)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最小化属性查找：</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">for(var i = 0, len = arr.length; i &lt; len; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 基于函数的迭代：forEach()<br> forEach遍历一个数组的所有成员，并执行一个函数</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">arr.forEach(function(value, index, array)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p> 但是<strong>所有情况</strong>下。基于循环的迭代比基于函数的迭代快8倍，在运行速度要求严格时，基于循环的迭代优先于基于函数的迭代</p>
</li>
<li><p>if-else对比switch：<br> 当条件较少时 使用if-else更易读，而当条件较多时if-else性能负担比switch大，易读性也没switch好。<br> 优化if-else的方法是：尽可能的把可能出现的条件放在首位，比如：</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">var i = Math.random(1);   </span><br><span class="line">    if(i &lt;= 0.8)&#123;            //i小于0.8是几率最大的，如果i的值满足i &lt;= 0.8 后面的条件就不会再判断了</span><br><span class="line">        ...</span><br><span class="line">    &#125;else if(i &gt; 0.8 &amp;&amp; i &lt;= 0.9)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> 当条件很多的时候：（比如10个和10个以上），避免使用条件语句if-else、switch是最佳方式是使用hash表</p>
</li>
<li></li>
</ol>
<pre><code>* Memoization

减少工作量就是最好的性能优化技术（你可以理解为，砍需求是为了性能优化）  
Memoization避免重复工作，缓存前一个计算的结果为后面的计算所用
</code></pre>
<ol start="6">
<li><p>​<code>(do-while, while) &gt; for &gt; forEach</code>​</p>
<p> forEach为函数调用（慢在函数查找</p>
<p> 达夫设备 速度和 (do-while, while) 相差无几，有时更慢，但是比其他循环更快</p>
</li>
</ol>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol>
<li><pre><code class="language-js"> //创建一个对象 较慢
 var myObject = new Object();
 my0bject.name = &quot;Nicholas&quot;;
 my0bject.count =50;
 //较快   直接量
 var myObject =&#123;
   name: &quot;Nicholas&quot;
   count: 50
 &#125;
</code></pre>
</li>
</ol>
<ul>
<li>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快。·避免做重复的工作。当需要检测浏览器时，可使用延迟加载或条件预加载。</li>
<li>在进行数学计算时，考虑使用直接操作数字的二进制形式的位运算。</li>
<li>JavaScript的原生方法总会比你写的任何代码都要快。尽量使用原生方法。</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>齐次坐标到底是什么</title>
    <url>/blog/%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h1><p>齐次坐标可以用来区分 (X,Y) 到底是个向量还是个坐标，它不是一个新的坐标系，不是说把二维的变成三维的，它是一种记法。</p>
<p>（x,y,0) 表示一个向量， (x,y,1)表示一个坐标。</p>
<p><strong>点+点&#x3D;点，点加向量&#x3D;点，向量+向量&#x3D;向量，点-点&#x3D;向量。</strong></p>
<p>引入齐次坐标是为了在发生变换时，其几何意义依然准确。</p>
<p><strong>一个向量平移之后，其结果仍然是这个向量</strong>，<strong>而一个点平移之后，其值就会发生变化但仍然是一个点</strong>。</p>
<p>对于平移来说：</p>
<p>$$<br>\left(\begin{array}{cccc}<br>1 &amp; 0 &amp; 0 &amp; t_{x} \\<br>0 &amp; 1 &amp; 0 &amp; t_{y} \\<br>0 &amp; 0 &amp; 1 &amp; t_{z} \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{array}\right) \cdot\left(\begin{array}{c}<br>x_{0} \\<br>y_{0} \\<br>z_{0} \\<br>w_{0}<br>\end{array}\right)&#x3D;\left(\begin{array}{c}<br>x_{0}+w_{0} * t_{x} \\<br>y_{0}+w_{0} * t_{y} \\<br>z_{0}+w_{0} * t_{z} \\<br>w_{0}<br>\end{array}\right)<br>$$</p>
<p>如果$w_{0}$是0，那这个结果就是$\left(x_{0}, y_{0}, z_{0}\right)$，与向量的定义相符。</p>
<p>如果$w_{0}$是1，结果仍是一个点，与点的定义相符。</p>
<p>‍</p>
<p>对于平移、旋转、缩放这3个最常见的仿射变换，平移变换只对点有意义，因为向量没有位置概念。</p>
<p>而旋转和缩放对于向量和点都有意义。</p>
<p>‍</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
  </entry>
</search>
