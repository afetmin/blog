<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>createObjectURL</title>
    <url>/blog/%E5%85%B3%E4%BA%8EcreateObjectURL/</url>
    <content><![CDATA[<h2 id="createObjectURL-是什么"><a href="#createObjectURL-是什么" class="headerlink" title="createObjectURL 是什么"></a>createObjectURL 是什么</h2><blockquote>
<p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。 — MDN</p>
</blockquote>
<span id="more"></span>

<h2 id="Blob-URL-Object-URL"><a href="#Blob-URL-Object-URL" class="headerlink" title="Blob URL&#x2F;Object URL"></a>Blob URL&#x2F;Object URL</h2><p>Blob URL&#x2F;Object URL 是⼀种伪协议，允许 Blob 和 File 对象⽤作图像，下载⼆进制数据链接等的 URL<br>源。在浏览器中，我们使⽤ URL.createObjectURL ⽅法来创建 Blob URL，该⽅法接收⼀个 Blob 对<br>象，并为其创建⼀个唯⼀的 URL，其形式为 <code>blob:&lt;origin&gt;/&lt;uuid&gt;</code> ，对应的示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">blob</span>:<span class="attr">https</span>:<span class="comment">//example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641</span></span><br></pre></td></tr></table></figure>

<p>浏览器内部为每个通过 URL.createObjectURL ⽣成的 URL 存储了⼀个 URL → Blob 映射。因此，此<br>类 URL 较短，但可以访问 Blob 。⽣成的 URL 仅在当前⽂档打开的状态下才有效。它允许引⽤<br><code>&lt;img&gt; 、 &lt;a&gt;</code> 中的 Blob ，但如果你访问的 Blob URL 不再存在，则会从浏览器中收到 404 错误。</p>
<p>上述的 Blob URL 看似很不错，但实际上它也有副作⽤。虽然存储了 URL → Blob 的映射，但 Blob 本<br>身仍驻留在内存中，浏览器⽆法释放它。映射在⽂档卸载时⾃动清除，因此 Blob 对象随后被释放。但<br>是，如果应⽤程序寿命很⻓，那不会很快发⽣。因此，如果我们创建⼀个 Blob URL，即使不再需要该<br>Blob，它也会存在内存中。</p>
<p>针对这个问题，我们可以调⽤ URL.revokeObjectURL(url) ⽅法，从内部映射中删除引⽤，从⽽允许<br>删除 Blob（如果没有其他引⽤），并释放内存。</p>
<h2 id="createObjectURL-可以用来做什么"><a href="#createObjectURL-可以用来做什么" class="headerlink" title="createObjectURL 可以用来做什么"></a>createObjectURL 可以用来做什么</h2><p>比如显示上传的预览图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onchange</span>=<span class="string">&quot;previewFiles(this.files)&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;preview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>) <span class="keyword">const</span> ulEle =</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;preview&#x27;</span>) <span class="keyword">function</span> <span class="title function_">previewFiles</span>(<span class="params">files</span>)&#123;<span class="string">&quot; &quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#123;<span class="title class_">Array</span>.<span class="title function_">from</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      ulEle.<span class="title function_">appendChild</span>(li)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(file)</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">height</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">width</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当图片加载完成之后对象URL就不再需要了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(<span class="variable language_">this</span>.<span class="property">src</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      li.<span class="title function_">appendChild</span>(img)</span></span><br><span class="line"><span class="language-javascript">    &#125;)&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>来看看效果：</p>
<p><img src="/blog/img/createObjectURL/1.png" alt="效果"></p>
<blockquote>
<p>在每次调用  <code>createObjectURL()</code>  方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL">URL.revokeObjectURL()</a> 方法来释放。</p>
</blockquote>
<p>浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。</p>
<h2 id="FileReader-的-readAsDataURL"><a href="#FileReader-的-readAsDataURL" class="headerlink" title="FileReader 的 readAsDataURL"></a>FileReader 的 readAsDataURL</h2><blockquote>
<p>readAsDataURL 方法会读取指定的 Blob 或 File 对象。读取操作完成的时候，readyState 会变成已完成 DONE，并触发 loadend 事件，同时 result 属性将包含一个 data:URL 格式的字符串（base64 编码）以表示所读取文件的内容。</p>
</blockquote>
<p>还是上一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useFileReaderPreivewFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">from</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    ulEle.<span class="title function_">appendChild</span>(li)</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">      img.<span class="property">height</span> = <span class="number">100</span></span><br><span class="line">      img.<span class="property">width</span> = <span class="number">100</span></span><br><span class="line">      img.<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">      li.<span class="title function_">appendChild</span>(img)</span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的效果:</p>
<p><img src="/blog/img/createObjectURL/2.png" alt="效果图"></p>
<p>来一张终极图：</p>
<p><img src="/blog/img/createObjectURL/3.jpg" alt="data_url.jpg"></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>关于vue的mixin</title>
    <url>/blog/%E5%85%B3%E4%BA%8Evue%E7%9A%84mixin/</url>
    <content><![CDATA[<h2 id="vue的mixin"><a href="#vue的mixin" class="headerlink" title="vue的mixin"></a>vue的mixin</h2><p>当有多个组件写了多个同样的语句时，可以使用vue的mixin机制<br>创建一个utils&#x2F;mixin.js文件，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  mapGetters,</span><br><span class="line">  mapActions</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bookMixin = &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bookName&#x27;</span>, <span class="string">&#x27;bookCover&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;setBookName&#x27;</span>, <span class="string">&#x27;setBookCover&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>接下来就可以在组件内这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; bookMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;utils/mixin&#x27;</span></span><br><span class="line">  <span class="attr">mixins</span>:[bookMixin]</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这样可以将vuex的内容在一处增加，多处复用。</p>
<p>mapActions是写到methods里的，这样就可以替换这种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原来写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;setBookName&#x27;</span>,<span class="variable language_">this</span>.<span class="property">bookName</span>)</span><br><span class="line"><span class="comment">// 优雅写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setBookName</span>(<span class="variable language_">this</span>.<span class="property">bookName</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>关于中间件</title>
    <url>/blog/%E5%85%B3%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>使用 node 构建 web 应用时，并不单单响应一个简单的 hello world，在一个实际的业务中，我们也许会做这些：</p>
<ul>
<li>请求方法的判断。</li>
<li>URL 的路径解析。</li>
<li>URL 中查询字符串解析。</li>
<li>Cookie 的解析。</li>
<li>Basic 认证。</li>
<li>表单数据的解析。</li>
<li>任意格式文件的上传处理。</li>
</ul>
<span id="more"></span>
<p>这样一个完整的项目中需要处理很多的细节，当然你也可以都写在一起，但这样代码的耦合程度太高了，而且以后维护起来也令人头大。</p>
<p>为此引入<strong>中间件（middleware）</strong>来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。</p>
<p>理解中间件的最简单的方式是实现一个基础的中间件模式，一个中间件其实就是一个函数。</p>
<p>一个简单的中间件模式需要一个 use 方法来进行中间件的注册，需要一个 run 来执行这些注册的中间件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="attr">fns</span>: [],</span><br><span class="line">  <span class="title function_">callback</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === idx) <span class="title function_">fn</span>(ctx, next)</span><br><span class="line">    &#125;)</span><br><span class="line">    index === <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="property">length</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">callback</span>(ctx)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用一下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">name</span> = <span class="string">&quot;ranxiu&quot;</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">gender</span> = <span class="string">&quot;girl&quot;</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">run</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">// 打印：&#123;name:&quot;ranxiu&quot;,gender:&quot;girl&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>关于 run 函数还有更加优雅的写法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">ctx, stack</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> middleware = stack.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">if</span> (middleware) &#123;</span><br><span class="line">      <span class="title function_">middleware</span>(ctx, next) <span class="comment">// 递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看看 koa-compose 的中间件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="comment">// 提前判断中间件类型,防止后续错误</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(middleware))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Middleware stack must be an array!&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="comment">// 中间件必须为函数类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Middleware must be composed of functions!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 采用闭包将索引缓存,来实现调用计数</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="comment">// 防止next()方法重复调用</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;next() called multiple times&quot;</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 包装next()返回值为Promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个字：优雅。有时不得不感慨人和人的差距有时比人和狗的差距还大。</p>
<p>拿这个 🌰 来说：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms || <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">const</span> stack = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Middleware&lt;T&gt; = (context: T, next: Koa.Next) =&gt; any;</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">compose</span>(stack)(&#123;&#125;)</span><br><span class="line"><span class="comment">// arr = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>

<p>当 i 为 3 时，</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = middleware[i] <span class="comment">//fn=undefined</span></span><br><span class="line"><span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line"><span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>() <span class="comment">//!fn为true</span></span><br></pre></td></tr></table></figure>

<p>直接返回 resolve，之后就执行 next()后面的函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">stack.<span class="title function_">push</span>(<span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">1</span>)</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>执行完后返回第二个 next() 后面继续往下执行，知道所有的中间件执行完毕。</p>
<p>这便是众人皆知的“洋葱模型”。你也可以选择只添加前置的处理，就是 await next()前面的操作</p>
<p>，或者后面的处理。</p>
<p>每个中间件足够的小而美，职责单一，同时多个中间件又具备良好的逻辑拓展性和可组合性，并且易于测试。这个设计模式真是太“漂亮”了。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>前端错误监控</title>
    <url>/blog/%E5%89%8D%E7%AB%AF%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="常见错误类型"><a href="#常见错误类型" class="headerlink" title="常见错误类型"></a>常见错误类型</h2><table>
<thead>
<tr>
<th>错误</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>SyntaxError</td>
<td>解析时发生语法错误</td>
<td>const x</td>
</tr>
<tr>
<td>TypeError</td>
<td>值不是所期待的类型</td>
<td>const person &#x3D; 1; person.name</td>
</tr>
<tr>
<td>ReferenceError</td>
<td>引用未声明的变量</td>
<td>x</td>
</tr>
<tr>
<td>RangeError</td>
<td>一个值不在其所允许的范围中</td>
<td>new Array(-1)</td>
</tr>
<tr>
<td>ResourceError</td>
<td>资源加载错误</td>
<td>new Image().src &#x3D; ‘&#x2F;remote&#x2F;null.jpg’</td>
</tr>
<tr>
<td>HttpError</td>
<td>http 请求错误</td>
<td>fetch(‘&#x2F;remote&#x2F;null’)</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="如何捕获错误"><a href="#如何捕获错误" class="headerlink" title="如何捕获错误"></a>如何捕获错误</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try&#x2F;catch"></a>try&#x2F;catch</h3><p>能够捕获常规运行时错误，语法错误和异步错误无法捕获</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规运行时错误，可以捕获 ✅</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法错误，不能捕获 ❌</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> notdefined,</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步错误，不能捕获 ❌</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a>window.onerror</h3><blockquote>
<p>混合事件 GlobalEventHandlers 的 onerror 属性是用于处理 error 的事件<br>Error 事件的事件处理程序，在各种目标对象的不同类型错误被触发：</p>
</blockquote>
<blockquote>
<ul>
<li>当 JavaScript 运行时错误（包括语法错误）发生时，window 会触发一个 ErrorEvent 接口的 error 事件，并执行 window.onerror()。</li>
<li>当一项资源（如&lt;img&gt;或&lt;script&gt;）加载失败，加载资源的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 onerror() 处理函数。这些 error 事件不会向上冒泡到 window，不过（至少在 Firefox 中）能被单一的 window.addEventListener 捕获。</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>函数参数：</p>
<ul>
<li>message：错误信息（字符串）。可用于 HTML onerror&#x3D;””处理程序中的 event。</li>
<li>source：发生错误的脚本 URL（字符串）</li>
<li>lineno：发生错误的行号（数字）</li>
<li>colno：发生错误的列号（数字）</li>
<li>error：Error 对象（对象）</li>
</ul>
<p>若该函数返回 true，则阻止执行默认事件处理函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规运行时错误，可以捕获 ✅</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法错误，不能捕获 ❌</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> notdefined,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步错误，可以捕获 ✅</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(notdefined);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源错误，不能捕获 ❌</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到异常：&#x27;</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://unknown/image/null.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<h3 id="window-addEventListener"><a href="#window-addEventListener" class="headerlink" title="window.addEventListener"></a>window.addEventListener</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 图片、script、css加载错误，都能被捕获 ✅</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;error&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://unknown/image/null.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unknown/foundnull.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unknown/foundnull.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// new Image错误，不能捕获 ❌</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;error&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span> = <span class="string">&quot;https://unknown/image/null.png&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// fetch错误，不能捕获 ❌</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;error&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, error)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(<span class="string">&quot;https://unknown/test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="异步错误"><a href="#异步错误" class="headerlink" title="异步错误"></a>异步错误</h3><p>如果使用 try&#x2F;catch 能捕获 await 的错误<br>普通 Promise 错误 使用 catch</p>
<h3 id="全局捕获错误-unhandledrejection"><a href="#全局捕获错误-unhandledrejection" class="headerlink" title="全局捕获错误 - unhandledrejection"></a>全局捕获错误 - unhandledrejection</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局统一处理Promise</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;unhandledrejection&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到异常：&quot;</span>, e)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://unknown/test&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-的错误"><a href="#Vue-的错误" class="headerlink" title="Vue 的错误"></a>Vue 的错误</h3><p>vue 的错误会被 vue 自动捕获，并且抛给 Vue.config.errorHandler。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局捕获Vue错误，直接扔出给onerror处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React-错误"><a href="#React-错误" class="headerlink" title="React 错误"></a>React 错误</h3><p>react 通过 componentDidCatch，声明一个错误边界的组件</p>
<h2 id="数据上报接口"><a href="#数据上报接口" class="headerlink" title="数据上报接口"></a>数据上报接口</h2><p>使用 1*1 像素的 gif 图片进行上报，有以下几点好处</p>
<ul>
<li>不会阻塞页面渲染</li>
<li>图片天然跨域</li>
<li>不会携带 Cookie</li>
<li>不需等待服务器返回数据</li>
<li>gif 图片所需流量最小</li>
</ul>
<p>但数据太大，最好还是用 post</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
</search>
